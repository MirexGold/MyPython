# from math import sqrt
# a, b = int(input()), int(input())
# print(a + b)  # —Å—É–º–º—É —á–∏—Å–µ–ª a –∏ b;
# print(a - b)  # —Ä–∞–∑–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª a –∏ b;
# print(a * b)  # –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–µ–ª a –∏ b;
# print(a / b)  # —á–∞—Å—Ç–Ω–æ–µ —á–∏—Å–µ–ª a –∏ b;
# print(a // b)  # —Ü–µ–ª—É—é —á–∞—Å—Ç—å –æ—Ç –¥–µ–ª–µ–Ω–∏—è —á–∏—Å–ª–∞ a –Ω–∞ b;
# print(a % b)  # –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è —á–∏—Å–ª–∞ a –Ω–∞ b;
# print(sqrt(a**10 + b**10))  # –∫–æ—Ä–µ–Ω—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∏–∑ —Å—É–º–º—ã –∏—Ö 10-—Ö —Å—Ç–µ–ø–µ–Ω–µ–π: sqrt{a^{10} + b^{10}}

# –ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞
# def my_imt(m, r):
#     imt = m / (r * r)
#     if 18.5 <= imt <= 25:
#         return "–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –º–∞—Å—Å–∞"
#     elif imt < 18.5:
#         return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞"
#     elif imt > 25:
#         return "–ò–∑–±—ã—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞"
#
#
# m = float(input())
# r = float(input())
#
# print(my_imt(m, r))


# –°—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏
# def coast(text):
#     rub = len(text) * 0.6
#     kop = len(text) * 60 % 100
#     return f'{int(rub)} —Ä. {kop} –∫–æ–ø.'
#
# stroka = input()
# print(coast(stroka))


# string = input()
# price = 60 * len(string)
#
# print(f'{price // 100} —Ä. {price % 100} –∫–æ–ø.')


##–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
# print(len(list(input().split())))

# –ó–æ–¥–∏–∞–∫
# sp = ['–î—Ä–∞–∫–æ–Ω', '–ó–º–µ—è', '–õ–æ—à–∞–¥—å', '–û–≤—Ü–∞', '–û–±–µ–∑—å—è–Ω–∞', '–ü–µ—Ç—É—Ö', '–°–æ–±–∞–∫–∞', '–°–≤–∏–Ω—å—è', '–ö—Ä—ã—Å–∞', '–ë—ã–∫', '–¢–∏–≥—Ä', '–ó–∞—è—Ü',
#       '–î—Ä–∞–∫–æ–Ω']
# print(sp[(int(input())-8) % 12])
#
#
# # 8,9,10,11,0,1,2,3,4,5,6,7  - %
# #
# # 0,1,2,3,4,5,6,7,8,9,10,11

# –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç —á–∏—Å–ª–∞
# a = input()
# if len(a) == 5:
#       print(int(a[::-1]))
# elif len(a) == 6:
#       print(int(a[0]+a[-1:0:-1]))


# Standard American Convention
# print(f"{int(input()):,}")


# –ó–∞–¥–∞—á–∞ –ò–æ—Å–∏—Ñ–∞ –§–ª–∞–≤–∏—è üå∂Ô∏èüå∂Ô∏è
# n, k = int(input()), int(input())
# counter = 0
# for i in range(1, n + 1):
#     counter = (counter + k) % i
# print(counter + 1)


# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã–µ —á–µ—Ç–≤–µ—Ä—Ç–∏
# n = int(input())
# counter1 = counter2 = counter3 = counter4 = 0
# for i in range(n):
#     x, y = map(int, input().split())
#     if x > 0 and y > 0:
#         counter1 += 1
#     elif x < 0 and y > 0:
#         counter2 += 1
#     elif x < 0 and y < 0:
#         counter3 += 1
#     elif x > 0 and y < 0:
#         counter4 += 1
# print(f'–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å: {counter1}')
# print(f'–í—Ç–æ—Ä–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å: {counter2}')
# print(f'–¢—Ä–µ—Ç—å—è —á–µ—Ç–≤–µ—Ä—Ç—å: {counter3}')
# print(f'–ß–µ—Ç–≤–µ—Ä—Ç–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å: {counter4}')

# –ë–æ–ª—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
# s = list(map(int, input().split()))
# counter = 0
# for i in range(len(s)-1):
#     if s[i+1] > s[i]:
#         counter += 1
# print(counter)


# –ù–∞–∑–∞–¥, –≤–ø–µ—Ä—ë–¥ –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
# s = input().split()
# for i in range(0, len(s)-1, 2):
#     s[i], s[i+1] = s[i+1], s[i]
# print(*s, end=' ')

# –°–¥–≤–∏–≥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏
# s = input().split()
# s.insert(0, s[-1])
# del s[-1]
# print(*s)

# –†–∞–∑–ª–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
# s = input().split()
# s1 = []
# for i in s:
#     if i not in s1:
#         s1.append(i)
# print(len(s1))

# –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–µ–ª
# l = [int(input()) for n in range(int(input()))]
# n = int(input())
# fl = False
#
# for i in range(len(l)):
#     for j in range(i + 1, len(l)):
#         if l[i] * l[j] == n:
#             fl = True
#             break
#
# print('–î–ê' if fl == True else '–ù–ï–¢')

# –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞
# t, r = input(), input()
# if t == r:
#     print('–Ω–∏—á—å—è')
# elif t == '–∫–∞–º–µ–Ω—å' and r == '–Ω–æ–∂–Ω–∏—Ü—ã' or t == '–Ω–æ–∂–Ω–∏—Ü—ã' and r == '–±—É–º–∞–≥–∞' or t == '–±—É–º–∞–≥–∞' and r == '–∫–∞–º–µ–Ω—å':
#     print('–¢–∏–º—É—Ä')
# else:
#     print('–†—É—Å–ª–∞–Ω')


# –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞, —è—â–µ—Ä–∏—Ü–∞, –°–ø–æ–∫ üå∂Ô∏è
# timur = input()
# ruslan = input()
# result = {'–∫–∞–º–µ–Ω—å': ['–Ω–æ–∂–Ω–∏—Ü—ã', '—è—â–µ—Ä–∏—Ü–∞'],
#           '–Ω–æ–∂–Ω–∏—Ü—ã': ['–±—É–º–∞–≥–∞', '—è—â–µ—Ä–∏—Ü–∞'],
#           '–±—É–º–∞–≥–∞': ['–∫–∞–º–µ–Ω—å', '–°–ø–æ–∫'],
#           '–°–ø–æ–∫': ['–Ω–æ–∂–Ω–∏—Ü—ã', '–∫–∞–º–µ–Ω—å'],
#           '—è—â–µ—Ä–∏—Ü–∞': ['–±—É–º–∞–≥–∞', '–°–ø–æ–∫']}
# if timur == ruslan:
#     print('–Ω–∏—á—å—è')
# else:
#     if ruslan in result[timur]:
#         print('–¢–∏–º—É—Ä')
#     else:
#         print('–†—É—Å–ª–∞–Ω')

# –û—Ä–µ–ª –∏ —Ä–µ—à–∫–∞
# stroka = input().split('–û')
# res = max(stroka, key=len)
# print(len(res))

# –ö—Ä–µ–º–Ω–∏–µ–≤–∞—è –¥–æ–ª–∏–Ω–∞ üå∂Ô∏èüå∂Ô∏è
# for i in range(int(input())):
#     s, virus, x  = input(), 'anton', 0
#     for sym in s:
#         if sym == virus[x]:
#             x += 1
#         if x == 5:
#             print(i + 1, end=' ')
#             break


# –†–æ—Å–∫–æ–º–Ω–∞–¥–∑–æ—Ä –∑–∞–ø—Ä–µ—Ç–∏–ª –±—É–∫–≤—É –∞ üå∂Ô∏èüå∂Ô∏è
# word = input() + ' –∑–∞–ø—Ä–µ—Ç–∏–ª –±—É–∫–≤—É'
# alpha = [chr(i) for i in range(1072, 1104)]
#
# for letter in alpha:
#     if letter in word:
#         print(word, letter)
#         word = word.replace(letter, '').replace('  ', ' ').strip()

# –ü—Ä–µ–¥–∏–∫–∞—Ç –¥–µ–ª–∏–º–æ—Å—Ç–∏
# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def func(num1, num2):
#     if num1 % num2 == 0:
#         return True
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# num1, num2 = int(input()), int(input())
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# if func(num1, num2):
#     print('–¥–µ–ª–∏—Ç—Å—è')
# else:
#     print('–Ω–µ –¥–µ–ª–∏—Ç—Å—è')

'''
–º–µ—Ç–æ–¥ append() –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞.
–º–µ—Ç–æ–¥ extend() —Ä–∞—Å—à–∏—Ä—è–µ—Ç –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫ –¥—Ä—É–≥–∏–º —Å–ø–∏—Å–∫–æ–º.
–º–µ—Ç–æ–¥ insert() –≤—Å—Ç–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –≤ –∑–∞–¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏.
–º–µ—Ç–æ–¥ index() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–∞–≤–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É –≤ –º–µ—Ç–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—é.
–º–µ—Ç–æ–¥ remove() —É–¥–∞–ª—è–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–∞–≤–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É –≤ –º–µ—Ç–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—é.
–º–µ—Ç–æ–¥ pop() —É–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ.
–º–µ—Ç–æ–¥ count() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ, –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–≤–Ω—ã –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É –≤ –º–µ—Ç–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—é.
–º–µ—Ç–æ–¥ reverse() –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ, —Ç–æ –µ—Å—Ç—å –º–µ–Ω—è–µ—Ç –µ–≥–æ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π.
–º–µ—Ç–æ–¥ copy() —Å–æ–∑–¥–∞–µ—Ç –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—É—é –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞.
–º–µ—Ç–æ–¥ clear() —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞.
–æ–ø–µ—Ä–∞—Ç–æ—Ä del –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–∞–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ú–µ—Ç–æ–¥—ã —Å—Ç—Ä–æ–∫, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏:
–º–µ—Ç–æ–¥ split() —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–ª–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤,
—Å–∏–º–≤–æ–ª —Ç–∞–±—É–ª—è—Ü–∏–∏ (\t) –∏–ª–∏ —Å–∏–º–≤–æ–ª –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (\n).
–º–µ—Ç–æ–¥ join() —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è —Å—Ç—Ä–æ–∫—É,
–∫ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –º–µ—Ç–æ–¥.
'''


# list1 = [10, 20, [300, 400, [5000, 6000], 500], 30, 40]
# list1[2][2].append(7000)
# # print(list1)  #-> [10, 20, [300, 400, [5000, 6000, 7000], 500], 30, 40]

# list1 = ['a', 'b', ['c', ['d', 'e', ['f', 'g'], 'k'], 'l'], 'm', 'n']
# sub_list = ['h', 'i', 'j']
# list1[2][1][2].extend(sub_list)
# print(list1)   #->['a', 'b', ['c', ['d', 'e', ['f', 'g', 'h', 'i', 'j'], 'k'], 'l'], 'm', 'n']


# list1 = [[1, 7, 8], [9, 7, 102], [6, 106, 105], [100, 99, 98, 103], [1, 2, 3]]
# maximum = -1
# for i in list1:
#     if max(i) > maximum:
#         maximum = max(i)
# print(maximum)


# list1 = [[1, 7, 8], [9, 7, 102], [102, 106, 105], [100, 99, 98, 103], [1, 2, 3]]
# for i in list1:
#     i.reverse()
#
# print(list1)  #->[[8, 7, 1], [102, 7, 9], [105, 106, 102], [103, 98, 99, 100], [3, 2, 1]]

# list1 = [[1, 7, 8], [9, 7, 102], [102, 106, 105], [100, 99, 98, 103], [1, 2, 3]]
# total = 0
# counter = 0
# for i in list1:
#     total += sum(i)
#     counter += len(i)
#
#
# print(total)
# print(counter)
# print(total/counter)


# n, m = int(input()), int(input())    # —Å—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è n –∏ m
# my_list = [[0] * m for _ in range(n)]
# print(my_list)

# –°—á–∏—Ç—ã–≤–∞–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
# n = 4                                          # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ (—ç–ª–µ–º–µ–Ω—Ç–æ–≤)
# my_list = []
#
# for _ in range(n):
#     elem = [int(i) for i in input().split()]   # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–æ–∫–∏
#     my_list.append(elem)

# –ü–µ—Ä–µ–±–æ—Ä –∏ –≤—ã–≤–æ–¥ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
# my_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
# for i in range(len(my_list)):
#     for j in range(len(my_list[i])):
#         print(my_list[i][j], end=' ')   # –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä end
#     print()                             # –ø–µ—Ä–µ–Ω–æ—Å –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É


# my_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
# for row in my_list:
#     for elem in row:
#         print(elem, end=' ')
#     print()

# my_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
# for i in range(len(my_list)):
#     for j in range(len(my_list[i])):
#         print(my_list[j][i], end=' ')    # –≤—ã–≤–æ–¥–∏–º my_list[j][i] –≤–º–µ—Å—Ç–æ my_list[i][j]
#     print()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
# –ø–æ –∏–Ω–¥–µ–∫—Å—É
# my_list = [[1, 9, 8, 7, 4], [7, 3, 4], [2, 1]]
# total = 0
# for i in range(len(my_list)):
#     for j in range(len(my_list[i])):
#         total += my_list[i][j]
# print(total)

# –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º
# my_list = [[1, 9, 8, 7, 4], [7, 3, 4], [2, 1]]
# total = 0
# for row in my_list:
#     for elem in row:
#         total += elem
# print(total)


# n = 3
# list1 = []
# for _ in range(n):
#     row = input().split()
#     list1.extend(row)
# print(list1)   #-> ['9', '7', '6', '2', '1', '3', '4', '45', '67']


# my_list = [[12, 221, 3], [41, 5, 633], [71, 8, 99]]
#
# maximum = my_list[0][0]
# minimum = my_list[0][0]
#
# for row in my_list:
#     if max(row) > maximum:
#         maximum = max(row)
#     if min(row) < minimum:
#         minimum = min(row)
#
# print(maximum + minimum)


# –°–ø–∏—Å–æ–∫ –ø–æ –æ–±—Ä–∞–∑—Ü—É 1
# n = int(input())
# matrix = [[i for i in range(1, n + 1)] for j in range(1, n + 1)]
# print(*matrix, sep='\n')

# n = int(input())
# matrix = []
# for i in range(1, n + 1):
#    matrix.append(i)
# for j in range(1, n + 1):
#    print(matrix)

# –°–ø–∏—Å–æ–∫ –ø–æ –æ–±—Ä–∞–∑—Ü—É 2
# n = int(input())
# matrix = [[j for j in range(1, i + 1)] for i in range(1, n + 1)]
# print(*matrix, sep='\n')

# n = int(input())
# matrix = []
# for i in range(1, n + 1):
#     matrix.append(i)
#     print(matrix)

# –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –ü–∞—Å–∫–∞–ª—è 1 üå∂Ô∏è
# n = int(input())
#
# li = [1]
# for i in range(n):
#     for j in range(len(li) - 1):
#         li[j] = li[j] + li[j + 1]
#     li.insert(0, 1)
#
# print(li)
#
# from math import factorial
# n = int(input())
# b = []
# for i in range(n+1):
#     b.append (int((factorial(n))/(factorial(i)*factorial(n-i))))
# print(b)


# a = [1]
# for i in range(int(input())):
#     a = [x + y for x, y in zip([*a, 0], [0, *a])]
# print(a)

# –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –ü–∞—Å–∫–∞–ª—è 2
# n = int(input())
# P=[]
# for i in range(0,n):
#     row=[1]*(i+1)
#     for j in range(i+1):
#         if j!=0 and j!=i:
#             row[j]=P[i-1][j-1]+P[i-1][j]
#     P.append(row)
#
# for r in P:
#     print(*r)

# # -------------------–§–£–ù–ö–¶–ò–Ø-------------------
# def pascal(n):
#     triangle = [[1]]
#
#     for i in range(n - 1):
#         row = [1]
#         for j in range(1, len(triangle[i])):
#             row += [sum(triangle[i][j - 1: j + 1])]
#         row += [1]
#         triangle.append(row.copy())
#
#     return triangle
#
#
# # --------------------–í–´–ó–û–í--------------------
# [print(*row) for row in pascal(int(input()))]


# –£–ø–∞–∫–æ–≤–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ üå∂Ô∏è
# res = []
# for el in input().split():
#     if res and el in res[-1]:
#         res[-1].append(el)
#     else:
#         res.append([el])
# print(res)
#
# #–†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏ üå∂Ô∏è
# def chunked(st, n):
#     st = st.split()
#     a = [[] for _ in range(0, len(st), n)]
#     for i in range(len(a)):
#         a[i].extend(st[:n])
#         st = st[n:]
#     return a
#
# string = input()
# num = int(input())
#
# print(chunked(string, num))

# –ü–æ–¥—Å–ø–∏—Å–∫–∏ —Å–ø–∏—Å–∫–∞ üå∂Ô∏èüå∂Ô∏è
# n = input().split()
# sp = [[]]
# k = 1
# while k != len(n) + 1:
#     for j in range(len(n)):
#         if len(n[j:j + k]) == k:
#             sp.append(n[j:j + k])
#     k += 1
# print(sp)

# ///////////////////////////////////////////////////////////
# 4.4 –ú–∞—Ç—Ä–∏—Ü—ã. –ß–∞—Å—Ç—å 1
##–º–∞—Ç—Ä–∏—Ü—É –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:
# [[input() for _ in range(m)] for _ in range(n)]


# matrix  = [[2, -5, -11, 0],
#            [-9, 4, 6, 13],
#            [4, 7, 12, -2]]
#
# print(matrix[1][2])  # –≤—ã–≤–æ–¥ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ (2, 3)  -->6

# –ü–µ—Ä–µ–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Ç—Ä–∏—Ü—ã

# –ø–µ—Ä–µ–±–∏—Ä–∞—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º:
# rows, cols = 3, 4           # rows - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫, cols - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
# matrix  = [[2, 3, 1, 0],
#            [9, 4, 6, 8],
#            [4, 7, 2, 7]]
# for r in range(rows):
#     for c in range(cols):
#         print(matrix[r][c], end=' ')
#     print()

# –ø–µ—Ä–µ–±–∏—Ä–∞—è –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º
# rows, cols = 3, 4           # rows - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫, cols - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
# matrix  = [[2, 3, 1, 0],
#            [9, 4, 6, 8],
#            [4, 7, 2, 7]]
# for c in range(cols):
#     for r in range(rows):
#         print(matrix[r][c], end=' ')
#     print()

# –§—É–Ω–∫—Ü–∏–∏ ljust() –∏ rjust()

# –°—Ç—Ä–æ–∫–æ–≤—ã–π –º–µ—Ç–æ–¥ ljust() –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ —à–∏—Ä–∏–Ω–µ, –¥–æ–±–∞–≤–ª—è—è –ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–∞.
# print('a'.ljust(3))
# print('ab'.ljust(3))
# print('abc'.ljust(3))

# –°—Ç—Ä–æ–∫–æ–≤—ã–π –º–µ—Ç–æ–¥ ljust() –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–º–µ—Å—Ç–æ –ø—Ä–æ–±–µ–ª–∞ –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–º—É –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç,
# –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π.
# print('a'.ljust(5, '*'))
# print('ab'.ljust(5, '$'))
# print('abc'.ljust(5, '#'))


# –°—Ç—Ä–æ–∫–æ–≤—ã–π –º–µ—Ç–æ–¥ rjust() –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ —à–∏—Ä–∏–Ω–µ, –¥–æ–±–∞–≤–ª—è—è –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞.
# print('a'.rjust(3))
# print('ab'.rjust(3))
# print('abc'.rjust(3))

# –°—Ç—Ä–æ–∫–æ–≤—ã–π –º–µ—Ç–æ–¥ rjust() –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–º–µ—Å—Ç–æ –ø—Ä–æ–±–µ–ª–∞ –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª,
# –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–º—É –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π.
# print('a'.rjust(5, '*'))
# print('ab'.rjust(5, '$'))
# print('abc'.rjust(5, '#'))


# –ü—Ä–∏–º–µ–Ω–∏–≤ –º–µ—Ç–æ–¥ ljust() –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ç–∞–±–ª–∏—Ü—ã –º—ã –ø–æ–ª—É—á–∏–º
# rows, cols = 3, 4                # rows - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫, cols - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
# matrix  = [[277, -930, 11, 0],
#            [9, 43, 6, 87],
#            [4456, 8, 290, 7]]
# for r in range(rows):
#     for c in range(cols):
#         print(str(matrix[r][c]).ljust(8), end='')
#     print()

# –≠–ª–µ–º–µ–Ω—Ç—ã —Å —Ä–∞–≤–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏ i == j –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏. –¢–∞–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–±–æ–∑–Ω–∞—á–∞—é—Ç—Å—è matrix[i][i].
# –≠–ª–µ–º–µ–Ω—Ç—ã —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ i –∏ j, —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º i + j + 1 = n (–∏–ª–∏ j = n - i - 1), –≥–¥–µ n ‚Äî —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –º–∞—Ç—Ä–∏—Ü—ã,
# –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ –ø–æ–±–æ—á–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏.

# n = 8
# matrix = [[0]*n for _ in range(n)]    # —Å–æ–∑–¥–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É —Ä–∞–∑–º–µ—Ä–æ–º 8√ó8
# for i in range(n):             # –∑–∞–ø–æ–ª–Ω—è–µ–º –≥–ª–∞–≤–Ω—É—é –¥–∏–∞–≥–æ–Ω–∞–ª—å –µ–¥–∏–Ω–∏—Ü–∞–º–∏, –∞ –ø–æ–±–æ—á–Ω—É—é –¥–≤–æ–π–∫–∞–º–∏
#     matrix[i][i] = 1
#     matrix[i][n-i-1] = 2
# for r in range(n):             # –≤—ã–≤–æ–¥–∏–º –º–∞—Ç—Ä–∏—Ü—É
#     for c in range(n):
#         print(matrix[r][c], end=' ')
#     print()

# –ò–Ω–¥–µ–∫—Å—ã i –∏ j —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏ —Å–≤—è–∑–∞–Ω—ã —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º i = j. –ò–Ω–¥–µ–∫—Å—ã i –∏ j—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞
# –ø–æ–±–æ—á–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º i + j + 1 = n (–∏–ª–∏  j = n - i - 1), –≥–¥–µ n ‚Äî —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –º–∞—Ç—Ä–∏—Ü—ã


## –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é print_matrix() –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ n:
# def print_matrix(matrix, n, width=1):
#     for r in range(n):
#         for c in range(n):
#             print(str(matrix[r][c]).ljust(width), end=' ')
#         print()
#
## –î–ª—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã –∏–∑ n —Å—Ç—Ä–æ–∫, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —á–∏—Å–ª–∞–º–∏, —É–¥–æ–±–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥:
# n = int(input())
# matrix = []
# for i in range(n):
#     temp = [int(num) for num in input().split()]
#     matrix.append(temp)


# n = 3
# a = [[1, 2, 3],             #->  9 8 7
#      [4, 5, 6],             #->  6 5 4
#      [7, 8, 9]]             #->  3 2 1
#
# for i in range(n):
#     for j in range(n):
#         print(a[n - i - 1][n - j - 1], end=' ')
#     print()


# —Å—á–∏—Ç–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏  –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π  –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–±–æ—á–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏
# n = 5
# a = [[19, 21, 33, 78, 99],
#      [41, 53, 66, 98, 76],
#      [79, 80, 90, 60, 20],
#      [33, 11, 45, 67, 90],
#      [45, 67, 12, 98, 23]]
#
# maximum = -1
# minimum = 100
#
# for i in range(n):
#     if a[i][i] > maximum:
#         maximum = a[i][i]
#     if a[i][n - i - 1] < minimum:
#         minimum = a[i][n - i - 1]
# print(minimum + maximum)   #-->101

# ----------------------------------
# —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã
# ----------------------------------

# N = int(input())
# M = int(input())
# matrix = [[0] * M for i in range(N)]
#
# # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
# for i in range(N):
#     for j in range(M):
#         matrix[i][j] = input()
#
# # –≤—ã–≤–µ—Å—Ç–∏ –º–∞—Ç—Ä–∏—Ü—É –Ω–∞ —ç–∫—Ä–∞–Ω –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
# for i in range(len(matrix)):  # len(A) - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –º–∞—Ç—Ä–∏—Ü–µ –ê
#     for j in range(len(matrix[i])):  # len(A[i]) - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ i
#         print(matrix[i][j], end=' ')
#     print()

# ----------------------------------
# ----------------------------------

# –í—ã–≤–µ—Å—Ç–∏ –º–∞—Ç—Ä–∏—Ü—É 1
# n, m = int(input()), int(input())
# matrix = [[0] * m for i in range(n)]
#
# # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã
# for i in range(n):
#     for j in range(m):
#         matrix[i][j] = input()
#
# # –≤—ã–≤–µ—Å—Ç–∏ –º–∞—Ç—Ä–∏—Ü—É –Ω–∞ —ç–∫—Ä–∞–Ω –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
# for i in range(len(matrix)):  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –º–∞—Ç—Ä–∏—Ü–µ
#     for j in range(len(matrix[i])):  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ i
#         print(matrix[i][j], end=' ')
#     print()

# # ------------------------------------
# n, m = int(input()), int(input())
# [print(*[input() for i in range(m)]) for i in range(n)]
# # -------------------------------------
# # -------------------------------------
# def input_matrix(rows, cols):
#     matrix = [[input() for _ in range(cols)] for _ in range(rows)]
#     return matrix
#
# def print_matrix(matrix):
#     for r in range(len(matrix)):
#         print(*matrix[r])
#     return None
#
# n, m = int(input()), int(input())
# print_matrix(input_matrix(n, m))
# # -------------------------------------
# # -------------------------------------
# –í—ã–≤–µ—Å—Ç–∏ –º–∞—Ç—Ä–∏—Ü—É 2
# rows, cols = int(input()), int(input())  # rows - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫, cols - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
# matrix = [[0] * cols for i in range(rows)]
#
# for i in range(rows):
#     for j in range(cols):
#         matrix[i][j] = input()
#
# for i in range(rows):
#     for j in range(cols):
#         print(matrix[i][j], end=' ')
#     print()
# print()
#
# for j in range(cols):
#     for i in range(rows):
#         print(matrix[i][j], end=' ')
#     print()
# -----------------------
# def print_matrix(matrix, rows, cols, width=1):
#     for i in range(rows):
#         for j in range(cols):
#             print(matrix[i][j].ljust(width), end=' ')
#         print()
#
#
# def print_transposed_matrix(matrix, rows, cols, width=1):
#     for j in range(cols):
#         for i in range(rows):
#             print(matrix[i][j].ljust(width), end=' ')
#         print()
#
#
# n, m = int(input()), int(input())
# matrix = [[input() for j in range(m)] for i in range(n)]
# print_matrix(matrix, n, m)
# print()
# print_transposed_matrix(matrix, n, m)

##–°–ª–µ–¥ –º–∞—Ç—Ä–∏—Ü—ã
# n = int(input())
# maximum = 0
# matrix = [list(map(int, input().split())) for __ in range(n)]
# for i in range(n):
#     maximum += matrix[i][i]
# print(maximum)


# res = 0
# for i in range(int(input())):
#     res += int(input().split()[i])
# print(res)

# –ë–æ–ª—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
# n = int(input())
# counter = 0
# matrix = [list(map(int, input().split())) for _ in range(n)]
# for i in matrix:
#     sr = (sum(list(map(int, i)))) / len(i)
#     for j in i:
#         if int(j) > sr:
#             counter += 1
#     print(counter)
#     counter = 0


# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤ –æ–±–ª–∞—Å—Ç–∏ 1
# n = int(input())
# maximum = []
# matrix = [list(map(int, input().split())) for __ in range(n)]
# for i in range(n):
#     for j in range(n):
#         if i >= j:
#             maximum.append(matrix[i][j])
# print(max(maximum))


# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤ –æ–±–ª–∞—Å—Ç–∏ 2 üå∂Ô∏è
# n = int(input())
# maximum = []
# matrix = [list(map(int, input().split())) for __ in range(n)]
# for i in range(n):
#     for j in range(n):
#         if (i >= j and i <= n - 1 -j) or (i <= j and i >= n - 1 -j) or (i == j) or (i + j + 1 == n):
#             maximum.append(matrix[i][j])
# print(max(maximum))

# –°—É–º–º—ã —á–µ—Ç–≤–µ—Ä—Ç–µ–π
# n = int(input())
# up = []
# left = []
# down = []
# right = []
# matrix = [list(map(int, input().split())) for __ in range(n)]
# for i in range(n):
#     for j in range(n):
#         if (i < j and i < n - 1 -j):
#             up.append(matrix[i][j])
#         elif (i > j and i < n - 1 -j):
#             left.append(matrix[i][j])
#         elif (i > j and i > n - 1 -j):
#             down.append(matrix[i][j])
#         elif (i < j and i > n - 1 -j):
#             right.append(matrix[i][j])
# print(f'–í–µ—Ä—Ö–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å: {sum(up)}')
# print(f'–ü—Ä–∞–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å: {sum(right)}')
# print(f'–ù–∏–∂–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å: {sum(down)}')
# print(f'–õ–µ–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å: {sum(left)}')


# –¢–∞–±–ª–∏—Ü–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è
# n, m = int(input()), int(input())
# for i in range(n):
#     mult = []
#     for j in range(m):
#         mult.append(str(i*j).ljust(3))
#     print(*mult)
#
# n, m = int(input()), int(input())
# mult = [[i * j for j in range(m)] for i in range(n)]
# for i in range(n):
#     for j in range(m):
#         print(str(mult[i][j]).ljust(3), end='')
#     print()


# –ú–∞–∫—Å–∏–º—É–º –≤ —Ç–∞–±–ª–∏—Ü–µ
# n, m = int(input()), int(input())
# row, col = 0, 0
# matrix = [[int(i) for i in input().split()] for _ in range(n)]
# for i in range(n):
#     for j in range(m):
#         if matrix[i][j] > matrix[row][col]:
#             row, col = i, j
# print(row, col)


# –û–±–º–µ–Ω —Å—Ç–æ–ª–±—Ü–æ–≤
# n, m = int(input()), int(input())
# matrix = [[int(i) for i in input().split()] for _ in range(n)]
# a, b = [int(i) for i in input().split()]
#
# for i in range(n):
#     matrix[i][a], matrix[i][b] = matrix[i][b], matrix[i][a]
# for i in matrix:
#     print(*i)

# –°–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
# n = int(input())
# flag = True
# matrix = [list(map(int, input().split())) for __ in range(n)]
# for i in range(n):
#     for j in range(n):
#         if matrix[i][j] != matrix[j][i]:
#             flag = False
#     if flag == False:
#         print('NO')
#         break
# else:
#     print('YES')


# –û–±–º–µ–Ω –¥–∏–∞–≥–æ–Ω–∞–ª–µ–π
# n = int(input())
# matrix = [[int(i) for i in input().split()] for _ in range(n)]
#
# for i in range(n):
#     matrix[i][i], matrix[n - i - 1][i] = matrix[n - i - 1][i], matrix[i][i]
#
# for row in matrix:
#     print(*row)

#
# # –ó–µ—Ä–∫–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
# n = int(input())
# matrix = [input().split() for _ in range(n)]
#
# for i in range(n // 2):
#     matrix[i], matrix[n - i - 1] = matrix[n - i - 1], matrix[i]
# for row in matrix:
#     print(*row)


# n = int(input())
# matrix = [[int(i) for i in input().split()] for _ in range(n)]
# matrix.reverse()
#
# for row in matrix:
#     print(*row)

# # –ü–æ–≤–æ—Ä–æ—Ç –º–∞—Ç—Ä–∏—Ü—ã
# n = int(input())
# matrix = [[int(i) for i in input().split()] for _ in range(n)]
#
# for j in range(n):
#     for i in range(n - 1, -1, -1):
#         print(matrix[i][j], end=' ')
#     print()


# –•–æ–¥—ã –∫–æ–Ω—è
# col, row = input().strip()
# coor_col = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7}
# coor_row = {'1': 7, '2': 6, '3': 5, '4': 4, '5': 3, '6': 2, '7': 1, '8': 0}
# arr = [["N" if [i, j] == [coor_row[row], coor_col[col]] else '.' for j in range(8)] for i in range(8)]
# for i in range(8):
#     for j in range(8):
#         if (coor_row[row] - i) * (coor_col[col] - j) in [-2, 2]: arr[i][j] = "*"
# for line in arr:
#     print(*line, sep = ' ')
#
# x, y = input()
# n = 8
# board = [['.'] * n for _ in range(n)]
# x = ord(x) - 97
# y = n - int(y)
# board[y][x] = 'N'
#
# for i in range(n):
#     for j in range(n):
#         if abs(y - i) * abs(x - j) == 2:
#             board[i][j] = '*'
#
# for row in board:
#     print(*row)


# –ú–∞–≥–∏—á–µ—Å–∫–∏–π –∫–≤–∞–¥—Ä–∞—Ç üå∂Ô∏è
# n = int(input())
# matrix = [[int(i) for i in input().split()] for j in range(n)]
#
# magic = sum(matrix[0])
# flag = 'YES'
# digits = [i for i in range(1, n ** 2 + 1)]
#
# for i in range(n):
#     for j in range(n):
#         if matrix[i][j] in digits:
#             digits.remove(matrix[i][j])
#     if i == n - 1 and j == n - 1 and digits != []:
#         flag = 'NO'
#
# for i in range(n):
#     if sum(matrix[i]) != magic:
#         flag = 'NO'
#         break
#
# for j in range(n):
#     result = 0
#     for i in range(n):
#         result += matrix[i][j]
#         if i == n - 1 and result != magic:
#             flag = 'NO'
#             break
#
# print(flag)

# –®–∞—Ö–º–∞—Ç–Ω–∞—è –¥–æ—Å–∫–∞
# x, y = [int(i) for i in input().split()]
# matrix = [['.'] * y for _ in range(x)]
#
# for i in range(x):
#     if i == 0 or i % 2 == 0:
#         for j in range(1, y, 2):
#             matrix[i][j] = '*'
#     else:
#         for j in range(0, y, 2):
#             matrix[i][j] = '*'
#
# for row in matrix:
#     print(*row)

# n, m = map(int, input().split())
# for i in range(n):
#     row = ['.' if (i + j) % 2 == 0 else '*' for j in range(m)]
#     print(*row)

# –ü–æ–±–æ—á–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å
# n = int(input())
# matrix = [[0] * n for _ in range(n)]
# for i in range(n):
#     matrix[i][n - 1 - i] = 1
#     for j in range(n):
#         if i > n - 1 - j:
#             matrix[i][j] = 2
#         print(matrix[i][j], end=" ")
#     print()

# def matrix(i, j, n):
#     if i == n - j - 1:
#         return 1
#     elif i < n - j - 1:
#         return 0
#     else:
#         return 2
# n = int(input())
# res = [[matrix(i, j, n) for j in range(n)] for i in range(n)]
# for x in res:
#     print(*x)


# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ 1
# n, m = map(int, input().split())
# matrix = []
# counter = 1
#
# for i in range(n):
#     matrix.append([])
#     for j in range(m):
#         matrix[i].append(counter)
#         counter += 1
#
#         print(f'{matrix[i][j]}'.ljust(3), end='')
#     print()

# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ 2
# n, m = [int(i) for i in input().split()]
# matrix = [[0] * m for _ in range(n)]
#
# for j in range(m):
#     for i in range(n):
#         matrix[i][j] = j * n + i + 1
#
# for i in range(n):
#     for j in range(m):
#         print(str(matrix[i][j]).ljust(3), end=' ')
#     print()


# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ 3
# n = int(input())
# matr = [[0] * n for _ in range(n)]
# for i in range(n):
#     matr[i][i] = 1
#     matr[i][n - 1 - i] = 1
# for i in range(n):
#     for j in range(n):
#         print(str(matr[i][j]).ljust(3), end='')
#     print()

# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ 4
# n = int(input())
# matrix = [[0] * n for _ in range(n)]
#
# for i in range(n):
#     for j in range(n):
#         if (i <= j and i + j + 1 <= n) or (i >= j and i + j + 1 >= n):
#             matrix[i][j] = 1
#
# for i in range(n):
#     for j in range(n):
#         print(str(matrix[i][j]).ljust(3), end=' ')
#     print()


# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ 5 üå∂Ô∏è
# n, m = [int(i) for i in input().split()]
# matrix = [[0] * m for _ in range(n)]
#
# for i in range(n):
#     for j in range(m):
#         matrix[i][j] = (i + j) % m + 1
#
# for i in range(n):
#     for j in range(m):
#         print(str(matrix[i][j]).ljust(3), end=' ')
#     print()


# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–º–µ–π–∫–æ–π
# s=input().split()
# n=int(s[0])
# m=int(s[1])
# matrix=[[0 for i in range(m)] for _ in range(n)]
# count =1
# for i in range(n):
#     for j in range(m):
#         matrix[i][j] += count
#         count+=1
# for i in range(n):
#     if i%2==0:
#         print(*matrix[i])
#     else:
#         matrix[i].reverse()
#         print(*matrix[i])


# n, m = [int(i) for i in input().split()]
# matrix = [[0] * m for _ in range(n)]
#
# for i in range(n):
#     for j in range(m):
#         matrix[i][j] = i * m + j + 1
#     if i % 2:
#         matrix[i].reverse()
#
# for i in range(n):
#     for j in range(m):
#         print(str(matrix[i][j]).ljust(3), end=' ')
#     print()

# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∏–∞–≥–æ–Ω–∞–ª—è–º–∏ üå∂Ô∏è
# n, m = [int(i) for i in input().split()]
# mtx = [[0] * m for _ in range(n)]
# sequence, k = 1, 0
#
# while sequence != n * m + 1:
#     for i in range(n):
#         for j in range(m):
#             if i + j == k:
#                 mtx[i][j] = sequence
#                 sequence += 1
#     k += 1
#
# for i in range(n):
#     for j in range(m):
#         print(str(mtx[i][j]).ljust(3), end='')
#     print()


# n, m = [int(i) for i in input().split()]
#
# matrix = [[1] * m for _ in range(n)]
# row, col, diag = 0, 0, 0
#
# for i in range(1, n * m):
#     col -= 1
#     row += 1
#     if col < 0 or row == n:
#         diag += 1
#         col = diag if diag < m else m - 1
#         row = diag - col
#
#     matrix[row][col] += i
#
# [print(*i) for i in matrix]

# # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Ç—Ä–∏—Ü—ã
# n, m = map(int, input().split())
# # –°–æ–∑–¥–∞–µ–º —Å–∫–µ–ª–µ—Ç –º–∞—Ç—Ä–∏—Ü—ã
# matrix = [[0] * m for i in range(n)]
# # –ó–∞–¥–∞–µ–º –æ—Ç—Å—á–µ—Ç —Å –µ–¥–∏–Ω–∏—Ü—ã
# d = 1
#
# for k in range(1, n + m):               # –¶–∏–∫–ª –ø–µ—Ä–µ–±–∏—Ä–∞—é—â–∏–π —Å—É–º–º—É –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
#     for i in range(n):                  # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏
#         for j in range(m):              # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã
#             if i + j + 1 == k:          # –í—ã—è–≤–ª—è–µ–º —è—á–µ–π–∫–∏, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –∏—Å–∫–æ–º–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏
#                 matrix[i][j] = d        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–π —è—á–µ–π–∫–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä
#                 d += 1                  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
#
# # –†–∞—Å–ø–µ—á–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É
# for row in range(n):
#     for col in range(m):
#         print(str(matrix[row][col]).ljust(3), end=' ')
#     print()


# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Ä–∞–ª—å—é üòàüòà
# n, m = map(int, input().split())
# l = [[0] * m for _ in range(n)]
# num = 1
# k = 0                                 # —É—Ä–æ–≤–µ–Ω—å –∫–≤–∞–¥—Ä–∞—Ç–∞: 0 - –≤–Ω–µ—à–Ω–∏–π, 1 - –≤–ª–æ–∂–µ–Ω–Ω—ã–π –∏ —Ç.–¥.
# product = n * m + 1                   # –≤—ã–Ω–µ—Å–µ–Ω–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —Ç.–∫. n –∏ m –º–µ–Ω—è—é—Ç—Å—è –≤ —Ü–∏–∫–ª–µ
#
# while num < product:
#     for j in range(k, m):             # –≤–µ—Ä—Ö–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞
#         l[k][j] = num
#         num += 1
#     for i in range(k + 1, n):         # –ø—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
#         l[i][j] = num
#         num += 1
#     if num == product:                # –∫–æ—Å—Ç—ã–ª—å –¥–ª—è —Å–ª—É—á–∞–µ–≤ —Å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ n, m
#         break
#     for j in range(m - 2, k - 1, -1): # –Ω–∏–∂–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞
#         l[i][j] = num
#         num += 1
#     for i in range(n - 2, k, -1):     # –ª–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
#         l[i][j] = num
#         num += 1
#     m -= 1                            # –∏–∑–º–µ–Ω—è—é —Ä–∞–∑–º–µ—Ä —Å—Ç–æ—Ä–æ–Ω –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞
#     n -= 1
#     k += 1
#
# for row in l:
#     for el in row:
#         print(str(el).ljust(3), end='')
#     print()


# 4.7 –û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –º–∞—Ç—Ä–∏—Ü–∞–º–∏ –≤ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ
# –°–ª–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü
# n, m = [int(i) for i in input().split()]
# matrix1 = [[int(i) for i in input().split()] for _ in range(n)]
# _ = input()
# matrix2 = [[int(i) for i in input().split()] for _ in range(n)]
# matrix3 = [[0] * m for _ in range(n)]
#
# for i in range(n):
#     for j in range(m):
#         matrix3[i][j] += matrix1[i][j] + matrix2[i][j]
#
# for row in matrix3:
#     print(*row)

# n, m = [int(x) for x in input().split()]
# A = [[int(x) for x in input().split()] for _ in range(n)]
# input()
# B = [[int(x) for x in input().split()] for _ in range(n)]
# C = [[A[i][j] + B[i][j] for j in range(m)] for i in range(n)]
# [print(*i) for i in C]

# –£–º–Ω–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü üå∂Ô∏è
# n, m = [int(x) for x in input().split()]
# matrix1 = [[int(x) for x in input().split()] for _ in range(n)]
# input()
# m, k = [int(x) for x in input().split()]
# matrix2 = [[int(x) for x in input().split()] for _ in range(m)]
# matrix3 = [[0] * k for i in range(n)]
# for i in range(n):
#     for j in range(k):
#         for q in range(m):
#             matrix3[i][j] += matrix1[i][q] * matrix2[q][j]
# [print(*i) for i in matrix3]


# –í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Ç—Ä–∏—Ü—ã
# n = int(input())
# a = [list(map(int, list(input().split()))) for _ in range(n)]
# m = int(input())
#
# def multi(a, b):
#     n = len(a)
#     b = list(zip(*b))
#     return [[sum([a[i][r] * b[j][r] for r in range(n)]) for j in range(n)] for i in range(n)]
#
# def expo(a, m):
#     c = list(a)
#     for _ in range(m-1):
#         c = multi(c, a)
#     return c
#
# result = expo(a, m)
#
# [print(*row) for row in result]

# –ö–∞–∂–¥—ã–π n-—ã–π —ç–ª–µ–º–µ–Ω—Ç
# s = input().split()
# n = int(input())
# res = []
# for i in range(n):
#     res.append(s[i::n])
# print(res)

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤ –æ–±–ª–∞—Å—Ç–∏ 2
# n = int(input())
# arr = []
# maximum = 0
# for i in range(n):
#     arr.append([int(elem) for elem in input().split()])
# for i in range(n):
#     for j in range(n):
#         if i >= n - 1 - j and arr[i][j] > maximum:
#             maximum = arr[i][j]
# print(maximum)

#  –±–µ—Ä–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã
# n = int(input())
# #  –≤—ã–ø–∏–ª–∏–≤–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# matrix = [[int(x) for x in input().split()] for i in range(n)]
# #  –≤—ã—á–∏—Å–ª—è–µ–º –±–æ–ª—å—à–∏–π (—ç–ª–µ–º–µ–Ω—Ç) –∏–∑ –±–æ–ª—å—à–∏—Ö (—ç–ª–µ–º–µ–Ω—Ç–æ–≤) –≤ –±–µ–≥—É—â–µ–º —Å—Ä–µ–∑–µ
# answer = max(max(matrix[i][n-i-1:]) for i in range(n))
# #  –∑–∞–∫–∏–¥—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
# print(answer)

# –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã
# import numpy as np
# n = int(input())
# arr = []
# for i in range(n):
#     arr.append([int(elem) for elem in input().split()])
# a_t = np.matrix(arr).transpose().tolist()
# for i in range(n):
#     print(*a_t[i])

# n = int(input())
# matrix = [input().split() for _ in range(n)]
#
# for i in range(n):
#     for j in range(i, n):
#         matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]
#
# for row in matrix:
#     print(*row)


# –°–Ω–µ–∂–∏–Ω–∫–∞
# n = int(input())
# arr = []
#
# for i in range(n):
#     arr.append([])
#     for j in range(n):
#         if i == n//2 or j == n//2 or i == j or i == n-j-1:
#             arr[i].append('*')
#         else:
#             arr[i].append('.')
#
# for i in range(n):
#     print(*arr[i])


# –°–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
# def is_symmetric(arr, n):
#     for i in range(n):
#         for j in range(n):
#             if arr[i][j] != arr[n-j-1][n-i-1]:
#                 return 'NO'
#     return 'YES'
#
# n = int(input())
# arr = []
#
# for i in range(n):
#     arr.append([int(elem) for elem in input().split()])
#
# print(is_symmetric(arr, n))

# n = int(input())
# arr = [list(map(int, input().split())) for _ in range(n)]
# res = 'YES'
# for i in range(n - 1):
#     for j in range(n - i - 1):
#         if arr[i][j] != arr[n - j - 1][n - i - 1]:
#             res = 'NO'
#             break
#     if res == 'NO':
#         break
# print(res)


# –õ–∞—Ç–∏–Ω—Å–∫–∏–π –∫–≤–∞–¥—Ä–∞—Ç üå∂Ô∏è
# import numpy as np
#
# def is_every_digit_in_arr(arr, n):
#     for i in range(1, n + 1):
#         if i not in arr:
#             return False
#     return True
#
# def is_latin_square(arr, n):
#     result = []
#     a_t = np.matrix(arr).transpose().tolist()
#     for i in range(n):
#         arr[i] = sorted(arr[i])
#         if (result != [] and result != arr[i]) or not is_every_digit_in_arr(arr[i], n):
#             return 'NO'
#         result = arr[i]
#     result = []
#     for i in range(n):
#         a_t[i] = sorted(a_t[i])
#         if (result != [] and result != a_t[i]) or not is_every_digit_in_arr(arr[i], n):
#             return 'NO'
#         result = a_t[i]
#
#     return 'YES'
#
# n = int(input())
# arr = []
#
# for i in range(n):
#     arr.append([int(elem) for elem in input().split()])
#
# print(is_latin_square(arr, n))

# n = int(input())
# matrix = [[int(i) for i in input().split()] for _ in range(n)]
# numbers = list(range(1, n + 1))
# result = 'YES'
#
# for i in range(n):
#     row_nums = sorted(matrix[i])
#     col_nums = sorted([matrix[j][i] for j in range(n)])
#     if row_nums != numbers or col_nums != numbers:
#         result = 'NO'
#         break
#
# print(result)

# # –•–æ–¥—ã —Ñ–µ—Ä–∑—è
# slovarx = {'a':0, 'b':1, 'c':2, 'd':3, 'e':4, 'f':5, 'g':6, 'h':7}
# slovary = {'8':0, '7':1, '6':2, '5':3, '4':4, '3':5, '2':6, '1':7, '0':8}
#
# position = input()
# arr = []
#
# for i in range(8):
#     arr.append([])
#     for j in range(8):
#         if j == slovarx[position[0]] and i == slovary[position[1]]:
#             arr[i].append('Q')
#         elif j == slovarx[position[0]] or i == slovary[position[1]]:
#             arr[i].append('*')
#         elif abs(slovarx[position[0]] - j) == abs(slovary[position[1]] - i):
#             arr[i].append('*')
#         else:
#             arr[i].append('.')
#
# for i in range(8):
#     print(*arr[i])
#
# # –î–∏–∞–≥–æ–Ω–∞–ª–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≥–ª–∞–≤–Ω–æ–π
# n = int(input())
# arr = []
#
# for i in range(n):
#     arr.append([])
#     for j in range(n):
#         arr[i].append(abs(i-j))
#
# for i in range(n):
#     print(*arr[i])

# //////////////////////////////  6.1 –í–≤–µ–¥–µ–Ω–∏–µ –≤ –∫–æ—Ä—Ç–µ–∂–∏   //////////////////////////////
# –ö–æ—Ä—Ç–µ–∂–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç:
# 
# –¥–æ—Å—Ç—É–ø –∫ —ç–ª–µ–º–µ–Ω—Ç—É –ø–æ –∏–Ω–¥–µ–∫—Å—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤);
# –º–µ—Ç–æ–¥—ã, –≤ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏ index(), count();
# –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –≤ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏ len(), sum(), min() –∏ max();
# —Å—Ä–µ–∑—ã;
# –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ in;
# –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏ (+) –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (*).

# 6 elementov
# primes = (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71)
# print(primes[:6])

# –∫—Ä–æ–º–µ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö.
# countries = ('Russia', 'Argentina', 'Slovakia', 'Canada', 'Slovenia', 'Italy', 'Spain', 'Ukraine', 'Chile', 'Cameroon')
# print(countries[2:])


# # –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–µ—Ö.
# countries = ('Russia', 'Argentina', 'Slovakia', 'Canada', 'Slovenia', 'Italy', 'Spain', 'Ukraine', 'Chile', 'Cameroon')
# print(countries[:-3])

# –∫—Ä–æ–º–µ –¥–≤—É—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏ —Ç—Ä–µ—Ö –ø–µ—Ä–≤—ã—Ö.
# countries = ('Russia', 'Argentina', 'Slovakia', 'Canada', 'Slovenia', 'Italy', 'Spain', 'Ukraine', 'Chile', 'Cameroon')
# print(countries[3:-2])

# # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ—Ä—Ç–µ–∂–∞
# countries = ('Romania', 'Poland', 'Estonia', 'Bulgaria', 'Slovakia', 'Slovenia', 'Hungary')
# number = len(countries)
# print(number)

# # —Å—É–º–º—É –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ—Ä—Ç–µ–∂–∞
# numbers = (12.5, 3.1415, 2.718, 9.8, 1.414, 1.1618, 1.324)
# print(min(numbers)+max(numbers))

# # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è index —Å–æ–¥–µ—Ä–∂–∞–ª–∞ –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ ¬´Slovenia¬ª
# countries = ('Russia', 'Argentina', 'Spain', 'Slovakia', 'Canada', 'Slovenia', 'Italy')
# index = countries.index('Slovenia')
# print(index)


# # number, —Å–æ–¥–µ—Ä–∂–∞–ª–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π ¬´Spain¬ª
# countries = ('Russia', 'Argentina', 'Spain', 'Slovakia', 'Canada', 'Slovenia', 'Italy', 'Spain', 'Ukraine', 'Chile', 'Spain', 'Cameroon')
# number = countries.count('Spain')
# print(number)


# # —á—Ç–æ–±—ã –æ–Ω –≤—ã–≤–µ–ª –∫–æ—Ä—Ç–µ–∂:  (1, 2, 3, 1, 2, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 8, 9, 10, 11, 12, 13)
# numbers1 = (1, 2, 3)
# numbers2 = (6,)
# numbers3 = (7, 8, 9, 10, 11, 12, 13)
#
# print(numbers1 * 2 + numbers2 * 9 + numbers3)
#
# city_name = input()
# city_year = int(input())
# city = (city_name, city_year)
# print(city)


# –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –∫–æ—Ä—Ç–µ–∂–∏
# tuples = [(), (), ('',), ('a', 'b'), (), ('a', 'b', 'c'), (1,), (), (), ('d',), ('', ''), ()]
# # non_empty_tuples = [tuples[2],tuples[3],tuples[5],tuples[6],tuples[9],tuples[10]]
# non_empty_tuples = [i for i in tuples if i]
# print(non_empty_tuples)

# # –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ —Ç–∞–∫, —á—Ç–æ–±—ã –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è new_tuples, —Å–æ–¥–µ—Ä–∂–∞–ª–∞ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ
# # —Å–ø–∏—Å–∫–∞ tuples —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –∫–∞–∂–¥–æ–≥–æ –∫–æ—Ä—Ç–µ–∂–∞, –∑–∞–º–µ–Ω–µ–Ω–Ω—ã–º –Ω–∞ —á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 100.
# tuples = [(10, 20, 40), (40, 50, 60), (70, 80, 90), (10, 90), (1, 2, 3, 4), (5, 6, 10, 2, 1, 77)]
# new_tuples = [i[:-1] + (100,) for i in tuples]
# print(new_tuples)


# # –≤—ã–≤–µ–ª —Å–ø–∏—Å–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å—Ä–µ–¥–Ω–∏–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–∏—Å–µ–ª –∫–∞–∂–¥–æ–≥–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∫–æ—Ä—Ç–µ–∂–∞
# numbers = ((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4), (90, 10))
# # tupl = []
# # for i in range(len(numbers)):
# #     tupl.append(sum(numbers[i])/len(numbers[i]))
# # print(tupl)
#
# print([sum(i) / len(i) for i in numbers])

# –í–µ—Ä—à–∏–Ω–∞ –ø–∞—Ä–∞–±–æ–ª—ã
# a, b, c = int(input()), int(input()), int(input()),
# print([(- (b / (2 * a))), (((4 * a * c) - b**2)/ (4 * a))])


# –ö–æ–Ω–∫—É—Ä—Å–Ω—ã–π –æ—Ç–±–æ—Ä
# n = int(input())
# sp = [input().split() for _ in range(n)]
# for i in sp:
#     print(*i)
# print()
# for i in sp:
#     if i[-1] == '5' or i[-1] == '4':
#         print(*i)
# --
# pup = [input() for _ in range(int(input()))]
# print(*pup, sep='\n')
# print()
# [print(x) for x in pup if int(x[-1]) > 3]

# colors = ('red', 'green', 'blue', 'cyan')
# a, b, c, d = colors
# print(a, d)


# 8.3 –í–≤–µ–¥–µ–Ω–∏–µ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤ Python
# numbers = {1.414, 12.5, 3.1415, 2.718, 9.8, 1.414, 1.1618, 1.324, 2.718, 1.324}
# print(min(numbers)+max(numbers))

#
# numbers = {20, 6, 8, 18, 18, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 12, 8, 8, 10, 4, 2, 2, 2, 16, 20}
# average = sum(numbers)/len(numbers)
#
# print(average)

# –ü–µ—Ä–µ–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
# numbers = {0, 1, 1, 2, 3, 3, 3, 5, 6, 7, 7}
# for num in numbers:
#     print(num)

# –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞.
# numbers = {0, 1, 1, 2, 3, 3, 3, 5, 6, 7, 7}
# print(*numbers, sep='\n')

# # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫ –≤—ã–≤–æ–¥–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é / —É–±—ã–≤–∞–Ω–∏—é)
# numbers = {0, 1, 1, 2, 3, 3, 3, 5, 6, 7, 7}
# sorted_numbers = sorted(numbers)
# print(*sorted_numbers, sep='\n')

# numbers = {0, 1, 1, 2, 3, 3, 3, 5, 6, 7, 7}
# sortnumbers = sorted(numbers, reverse=True)
# print(*sortnumbers, sep='\n')


# —Å—É–º–º—É –∫–≤–∞–¥—Ä–∞—Ç–æ–≤
# numbers = {9089, -67, -32, 1, 78, 23, -65, 99, 9089, 34, -32, 0, -67, 1, 11, 111, 111, 1, 23}
# summa = 0
# for i in numbers:
#     summa += i ** 2
# print(summa)
#
# print(sum([i*i for i in numbers]))


# —ç–ª–µ–º–µ–Ω—Ç—ã –º–Ω–æ–∂–µ—Å—Ç–≤–∞ fruits, –∫–∞–∂–¥—ã–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
# fruits = {'apple', 'banana', 'cherry', 'avocado', 'pineapple', 'apricot', 'banana', 'avocado', 'grapefruit'}
# print(*sorted(fruits, reverse=True), sep='\n')

# # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
# print(len(set(input())))

# –ù–µ–ø–æ–≤—Ç–æ—Ä–∏–º—ã–µ —Ü–∏—Ñ—Ä—ã
# s = list(input())
# print('YES' if len(s) == len(set(s)) else 'NO')

# –≤–µ—Ä–Ω–æ –ª–∏, —á—Ç–æ –≤ –∑–∞–ø–∏—Å–∏ —ç—Ç–∏—Ö –¥–≤—É—Ö —Å—Ç—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å–µ 10 —Ü–∏—Ñ—Ä?
# a, b = input(), input()
# print('YES' if len(set(a+b)) == 10 else 'NO')


# # –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –Ω–∞–±–æ—Ä—ã
# # a, b = input(), input()
# print('YES' if set(input()) == set(input()) else 'NO')

# # –í–µ—Ä–Ω–æ –ª–∏, —á—Ç–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤—Å–µ—Ö —Ç—Ä–µ—Ö —Å–ª–æ–≤ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –Ω–∞–±–æ—Ä –±—É–∫–≤?
# s = input().split()
# print(('NO', 'YES')[set(s[0]) == set(s[1]) == set(s[2])])

# 8.5 –ú–µ—Ç–æ–¥—ã –º–Ω–æ–∂–µ—Å—Ç–≤. –ß–∞—Å—Ç—å 1
# –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ add().
# –ú–µ—Ç–æ–¥ remove() ‚Äî —É–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–æ—à–∏–±–∫–∏) –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç.
# –ú–µ—Ç–æ–¥ discard() ‚Äî —É–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–æ—à–∏–±–∫–∏), –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
# –ú–µ—Ç–æ–¥ pop() ‚Äî —É–¥–∞–ª—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–æ—à–∏–±–∫–∏) –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ
# —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ø—É—Å—Ç–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞.

# numbers = {1, 2, 3, 4, 5}
#
# print('–¥–æ —É–¥–∞–ª–µ–Ω–∏—è:', numbers)
# num = numbers.pop()                 # —É–¥–∞–ª—è–µ—Ç 1—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–∞, –≤–æ–∑–≤—Ä–∞—â–∞—è –µ–≥–æ
# print('—É–¥–∞–ª—ë–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç:', num)
# print('–ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:', numbers)

# –ú–µ—Ç–æ–¥ clear() —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞.

# –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã 1
# sp = [input().lower() for _ in range(int(input()))]
# for i in sp:
#     print(len(set(i)))
#
# [print(len(set(input().lower()))) for x in range(int(input()))]

# –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã 2
# sp = [input().lower() for _ in range(int(input()))]
# s = ''.join(sp)
# print(len(set(s)))

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
# words = [word.lower().strip('.,;:-?!') for word in input().split()]
# print(len(set(words)))

# –í—Å—Ç—Ä–µ—á–∞–ª–æ—Å—å –ª–∏ —á–∏—Å–ª–æ —Ä–∞–Ω—å—à–µ?
# t = input().split()
# m = set()
# for i in t:
#     if i.lstrip('0') in m:
#         print('YES')
#     else:
#         m.add(i)
#         print('NO')

# 8.6 –ú–µ—Ç–æ–¥—ã –º–Ω–æ–∂–µ—Å—Ç–≤. –ß–∞—Å—Ç—å 2
# –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤: –º–µ—Ç–æ–¥ union()
# myset1 = {1, 2, 3, 4, 5}
# myset2 = {3, 4, 6, 7, 8}
# myset3 = myset1.union(myset2)
# print(myset3)   #->{1, 2, 3, 4, 5, 6, 7, 8}

# –î–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–≤—É—Ö –º–Ω–æ–∂–µ—Å—Ç–≤ –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä |
# myset1 = {1, 2, 3, 4, 5}
# myset2 = {3, 4, 6, 7, 8}
# myset3 = myset1 | myset2
# print(myset3)

# –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤: –º–µ—Ç–æ–¥ intersection(), –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä &
# myset1 = {1, 2, 3, 4, 5}
# myset2 = {3, 4, 6, 7, 8}
# myset3 = myset1.intersection(myset2)
# print(myset3)  #--> {3, 4}

# –†–∞–∑–Ω–æ—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤: –º–µ—Ç–æ–¥ difference(), –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä -
# myset1 = {1, 2, 3, 4, 5}
# myset2 = {3, 4, 6, 7, 8}
# myset3 = myset1.difference(myset2)
# print(myset3)    #-->{1, 2, 5}

# –°–∏–º–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–Ω–æ—Å—Ç—å: –º–µ—Ç–æ–¥ symmetric_difference(), –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä ^
# myset1 = {1, 2, 3, 4, 5}
# myset2 = {3, 4, 6, 7, 8}
# myset3 = myset1.symmetric_difference(myset2)
# print(myset3)   # -->{1, 2, 5, 6, 7, 8}


# –ú–µ—Ç–æ–¥—ã union(), intersection(), difference(), symmetric_difference() –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞,
# –∞ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –Ω–æ–≤—ã–µ. –ß–∞—Å—Ç–æ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞. –î–ª—è —Ç–∞–∫–∏—Ö —Ü–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
# –ø–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã update(), intersection_update(), difference_update(), symmetric_difference_update().


# –ú–µ—Ç–æ–¥ update() –∏–∑–º–µ–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—é., |=
# myset1 = {1, 2, 3, 4, 5}
# myset2 = {3, 4, 6, 7, 8}
# myset1.update(myset2)      # –∏–∑–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ myset1
# print(myset1)   # --> {1, 2, 3, 4, 5, 6, 7, 8}

# –ú–µ—Ç–æ–¥ intersection_update() –∏–∑–º–µ–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—é.
# myset1 = {1, 2, 3, 4, 5}
# myset2 = {3, 4, 6, 7, 8}
# myset1.intersection_update(myset2)      # –∏–∑–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ myset1
# print(myset1)   # --> {3, 4}

# –ú–µ—Ç–æ–¥ difference_update() –∏–∑–º–µ–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ —Ä–∞–∑–Ω–æ—Å—Ç–∏.
# myset1 = {1, 2, 3, 4, 5}
# myset2 = {3, 4, 6, 7, 8}
# myset1.difference_update(myset2)      # –∏–∑–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ myset1
# print(myset1) # -->{1, 2, 5}

# –ú–µ—Ç–æ–¥ symmetric_difference_update() –∏–∑–º–µ–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ —Å–∏–º–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–Ω–æ—Å—Ç–∏.
# myset1 = {1, 2, 3, 4, 5}
# myset2 = {3, 4, 6, 7, 8}
# myset1.symmetric_difference_update(myset2)      # –∏–∑–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ myset1
# print(myset1)   # --> {1, 2, 5, 6, 7, 8}


# mylist = [2021, 2020, 2019, 2018, 2017, 2016]
# mytuple = (2021, 2020, 2016)
# mystr = 'abcd'
# myset = {2009, 2010, 2016}
# print(myset.union(mystr))              # –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ —Å—Ç—Ä–æ–∫–æ–π
# print(myset.intersection(mylist))      # –ø–µ—Ä–µ—Å–µ–∫–∞–µ–º —Å–æ —Å–ø–∏—Å–∫–æ–º
# print(myset.difference(mytuple))       # –Ω–∞—Ö–æ–¥–∏–º —Ä–∞–∑–Ω–æ—Å—Ç—å —Å –∫–æ—Ä—Ç–µ–∂–µ–º


# A | B , A.union(B) - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ, —è–≤–ª—è—é—â–µ–µ—Å—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤ A –∏ B
# A |= B , A.update(B) - –î–æ–±–∞–≤–ª—è–µ—Ç –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ A –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ B
# A & B, A.intersection(B) - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ, —è–≤–ª—è—é—â–µ–µ—Å—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤ A –∏ B
# A &= B, A.intersection_update(B) - –û—Å—Ç–∞–≤–ª—è–µ—Ç –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ A —Ç–æ–ª—å–∫–æ —Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ B
# A - B , A.difference(B) - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–Ω–æ—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤ A –∏ B
# A -= B , A.difference_update(B) - –£–¥–∞–ª—è–µ—Ç –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ A –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –≤—Ö–æ–¥—è—â–∏–µ –≤ B
# A ^ B , A.symmetric_difference(B) - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–º–º–µ—Ç—Ä–∏—á–µ—Å–∫—É—é —Ä–∞–∑–Ω–æ—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤ A –∏ B
# A ^= B,  A.symmetric_difference_update(B) - –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ A —Å–∏–º–º–µ—Ç—Ä–∏—á–µ—Å–∫—É—é —Ä–∞–∑–Ω–æ—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤ A –∏ B

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö
# a = set(list(map(int, input().split())))
# b = set(list(map(int, input().split())))
# print(len(a.intersection(b)))


# # –û–±—â–∏–µ —á–∏—Å–ª–∞
# a = set(list(map(int, input().split())))
# b = set(list(map(int, input().split())))
# print(*sorted(a.intersection(b)))

# –ß–∏—Å–ª–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
# a = set(map(int, input().split()))
# b = set(map(int, input().split()))
# print(*sorted(a - b))

# –û–±—â–∏–µ —Ü–∏—Ñ—Ä—ã
# n = int(input())
# numbers = [input() for _ in range(n)]
#
# num_set = set(numbers[0]).intersection(*numbers)
# print(*sorted(num_set))

# 8.7 –ú–µ—Ç–æ–¥—ã –º–Ω–æ–∂–µ—Å—Ç–≤. –ß–∞—Å—Ç—å 3
# –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–¥–Ω–æ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –¥—Ä—É–≥–æ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ issubset()
# —Ç–∞–∫–∂–µ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã <= (–Ω–µ—Å—Ç—Ä–æ–≥–æ–µ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ) –∏ < (—Å—Ç—Ä–æ–≥–æ–µ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ).
# set1 = {2, 3}
# set2 = {1, 2, 3, 4, 5, 6}
# print(set1.issubset(set2))    #--> True
# –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ set2 —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã set1. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç,
# —á—Ç–æ set1 ‚Äì –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ set2. –≠—Ç–æ —Ç–∞–∫–∂–µ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ set2 ‚Äì –Ω–∞–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ set1.


# –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–¥–Ω–æ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤ –Ω–∞–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –¥—Ä—É–≥–æ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ issuperset()
# set1 = {'a', 'b', 'c', 'd', 'e'}
# set2 = {'c', 'e'}
# print(set1.issuperset(set2))    #--> True
# –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ set1 —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã set2. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç,
# —á—Ç–æ set1 ‚Äì –Ω–∞–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ set2. –≠—Ç–æ —Ç–∞–∫–∂–µ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ set2 ‚Äì –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ set1.

# –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ–±—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ isdisjoint()
# –î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –Ω–µ –∏–º–µ—é—Ç –æ–±—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∏  False, –∫–æ–≥–¥–∞
# –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏–º–µ—é—Ç –æ–±—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã.

# set1 <= set2 , set1.issubset(set2) - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ set1 —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ–º set2
# set1 >= set2 , set1.issuperset(set2) - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ set1 —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ–º set2
# set1 < set2 - –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ set1 <= set2 and set1 != set2 (—Å—Ç—Ä–æ–≥–æ–µ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ)
# set1 > set2 - –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ set1 >= set2 and set1 != set2 (—Å—Ç—Ä–æ–≥–æ–µ –Ω–∞–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ)


# –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ü–∏—Ñ—Ä—ã
# print(("YES", "NO")[set(input()).isdisjoint(input())])

# –í—Å–µ —Ü–∏—Ñ—Ä—ã
# print(['NO', 'YES'][set(input()) >= set(input())])

# –£—Ä–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏
# a, b, c = (set(int(i) for i in input().split()) for i in range(3))
# print(*sorted(set(a.intersection(b).difference(c)))[::-1])

# –£—Ä–æ–∫ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏
# set1, set2, set3 = [set([int(i) for i in input().split()]) for k in range(3)]
# print(*sorted((set1 | set2 | set3) - (set1 & set2 & set3)))


# –£—Ä–æ–∫ —Ñ–∏–∑–∏–∫–∏
# set_1, set_2, set_3 = (set(input().split()) for _ in range(3))
# print(*(sorted(set_3 - (set_1 | set_2), key=int, reverse=True)))

# –£—Ä–æ–∫ –±–∏–æ–ª–æ–≥–∏–∏
# a = set(input().split() + input().split() + input().split())
# b = set(map(str, range(11)))
# print(*sorted(b - a, key=int))

# 8.8 –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –º–Ω–æ–∂–µ—Å—Ç–≤ –∏ frozenset
# digits = set(input())
# –ø—Ä–∏ –≤–≤–æ–¥–µ —Å—Ç—Ä–æ–∫–∏ '12345' —Å–æ–∑–¥–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ {'1', '2', '3', '4', '5'},
# –∞ –Ω–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä {1, 2, 3, 4, 5}.

# digits = {int(c) for c in input()}
#
# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –º–Ω–æ–∂–µ—Å—Ç–≤
# 1. –°–æ–∑–¥–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∫–≤–∞–¥—Ä–∞—Ç–∞–º–∏ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ 9 –º–æ–∂–Ω–æ —Ç–∞–∫:
#
# squares = {i ** 2 for i in range(10)}
# 2. –°–æ–∑–¥–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∫—É–±–∞–º–∏ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –æ—Ç 10 –¥–æ 20 –º–æ–∂–Ω–æ —Ç–∞–∫:
#
# cubes = {i ** 3 for i in range(10, 21)}
# 3. –°–æ–∑–¥–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ —Å–∏–º–≤–æ–ª–∞–º–∏ —Å—Ç—Ä–æ–∫–∏ –º–æ–∂–Ω–æ —Ç–∞–∫:
#
# chars = {c for c in 'abcdefg'}
#
# –í –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞—Ö –º–Ω–æ–∂–µ—Å—Ç–≤ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Å–ª–æ–≤–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å
# –º–Ω–æ–∂–µ—Å—Ç–≤–æ, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏ –Ω–µ–∫–æ—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏, —Ç–æ –º—ã –º–æ–∂–µ–º –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–∞–∫–æ–π –∫–æ–¥:
#
# digits = {int(d) for d in 'abcd12ef78ghj90' if d.isdigit()}


# –ø–æ–ª—É—á–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ) —Å–ø–∏—Å–∫–∞ words
# items = [10, '30', 30, 10, '56', 34, '12', 90, 89, 34, 45, '67', 12, 10, 90, 23, '45', 56, '56', 1, 5, '6', 5]
# myset = {int(d) for d in items}
# print(*sorted(myset))
#
#
# –ø–æ–ª—É—á–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ) —Å–ø–∏—Å–∫–∞ words
# words = ['Plum', 'Grapefruit', 'apple', 'orange', 'pomegranate', 'Cranberry', 'lime', 'Lemon', 'grapes', 'persimmon',
#          'tangerine', 'Watermelon', 'currant', 'Almond']
# myset = {d[0].lower() for d in words}
# print(*sorted(myset))
#

# –ø–æ–ª—É—á–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ) —Å—Ç—Ä–æ–∫–∏ sentence
# sentence = '''My very photogenic mother died in a freak accident (picnic, lightning) when I was three, and, save for a pocket of warmth in the darkest past, nothing of her subsists within the hollows and dells of memory, over which, if you can still stand my style (I am writing under observation), the sun of my infancy had set: surely, you all know those redolent remnants of day suspended, with the midges, about some hedge in bloom or suddenly entered and traversed by the rambler, at the bottom of a hill, in the summer dusk; a furry warmth, golden midges.'''
# myset = {d.lower().strip('.,;:-?!()') for d in sentence.split()}
# print(*sorted(myset))

# –ø–æ–ª—É—á–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ —Å—Ç—Ä–æ–∫–∏ sentence –¥–ª–∏–Ω–æ—é –º–µ–Ω—å—à–µ 4 —Å–∏–º–≤–æ–ª–æ–≤
# sentence = '''My very photogenic mother died in a freak accident (picnic, lightning) when I was three, and, save for a pocket of warmth in the darkest past, nothing of her subsists within the hollows and dells of memory, over which, if you can still stand my style (I am writing under observation), the sun of my infancy had set: surely, you all know those redolent remnants of day suspended, with the midges, about some hedge in bloom or suddenly entered and traversed by the rambler, at the bottom of a hill, in the summer dusk; a furry warmth, golden midges.'''
# myset = {d.lower().strip('.,:():;!?') for d in sentence.split() if len(d.strip('.,:():;!?')) < 4}
# print(*sorted(myset))

# –≤—ã–±—Ä–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞ files —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ c —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .png

# files = ['python.png', 'qwerty.py', 'stepik.png', 'beegeek.org', 'windows.pnp', 'pen.txt', 'phone.py', 'book.txT',
#          'board.pNg', 'keyBoard.jpg', 'Python.PNg', 'apple.jpeg', 'png.png', 'input.tXt', 'split.pop', 'solution.Py',
#          'stepik.org', 'kotlin.ko', 'github.git']
# myset = {d.lower() for d in files if d[-3::].lower() == 'png'}
# print(*sorted(myset))

# Frozenset
# –ö–æ—Ä—Ç–µ–∂ (—Ç–∏–ø tuple) ‚Äì –Ω–µ–∏–∑–º–µ–Ω—è–µ–º–∞—è –≤–µ—Ä—Å–∏—è —Å–ø–∏—Å–∫–∞ (—Ç–∏–ø list), –∞ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ (—Ç–∏–ø frozenset) ‚Äì –Ω–µ–∏–∑–º–µ–Ω—è–µ–º–∞—è
# –≤–µ—Ä—Å–∏—è –æ–±—ã—á–Ω–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ (—Ç–∏–ø set).
# myset1 = frozenset({1, 2, 3})                         # –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
# myset2 = frozenset([1, 1, 2, 3, 4, 4, 4, 5, 6, 6])    # –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞
# myset3 = frozenset('aabcccddee')                      # –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–æ–∫–∏
#
# print(myset1)
# print(myset2)
# print(myset3)

# –ù–∞–¥ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–º–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –Ω–∞–¥ –æ–±—ã—á–Ω—ã–º–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏:
#
# –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤: –º–µ—Ç–æ–¥ union() –∏–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä |;
# –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤: –º–µ—Ç–æ–¥ intersection() –∏–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä &;
# —Ä–∞–∑–Ω–æ—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤: –º–µ—Ç–æ–¥ difference() –∏–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä -;
# —Å–∏–º–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–Ω–æ—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤: –º–µ—Ç–æ–¥ symmetric_difference() –∏–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä ^.
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
#
# myset1 = frozenset('hello')
# myset2 = frozenset('world')
#
# print(myset1 | myset2)
# print(myset1 & myset2)
# print(myset1 ^ myset2)

# –ú–µ—Ç–æ–¥—ã –∏–∑–º–µ–Ω—è—é—â–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö –º–Ω–æ–∂–µ—Å—Ç–≤:
# add()
# remove()
# discard()
# pop()
# clear()
# update()
# intersection_update()
# difference_update()
# symmetric_difference_update()


# n = int(input())
# m = int(input())
# k = int(input())
# p = int(input())
#
# print(n+p-m-k)

# arr = [int(elem) for elem in input().split()]
# print(len(arr) - len(set(arr)))

# def is_repeat(arr, n):
#     for i in range(n + 1):
#         s = input()
#         length = len(arr)
#         arr.add(s)
#         if length == len(arr):
#             return 'REPEAT'
#     return 'OK'
#
#
# print(is_repeat(arr, n))


# m = int(input())
# n = int(input())
# library = []
# toRead = []
#
# for i in range(m):
#     library.append(input())
#
# for i in range(n):
#     toRead.append(input())
#
# for elem in toRead:
#     if elem in library:
#         print('YES')
#     else:
#         print('NO')


# arr1 = {int(elem) for elem in input().split()}
# arr2 = {int(elem) for elem in input().split()}
#
# if len(arr1.intersection(arr2)) == 0:
#     print('BAD DAY')
# else:
#     print(*sorted(arr1.intersection(arr2), reverse=True))


# arr1 = {int(elem) for elem in input().split()}
# arr2 = {int(elem) for elem in input().split()}
# if arr1 == arr2:
#     print('YES')
# else:
#     print('NO')


# m = int(input())
# n = int(input())
# maths = set()
# informatics = set()
# for i in range(m):
#     maths.add(input())
# for i in range(n):
#     informatics.add(input())
# print(len(maths.difference(informatics)))


# m = int(input())
# n = int(input())
# maths = set()
# informatics = set()
# for i in range(m):
#     maths.add(input())
# for i in range(n):
#     informatics.add(input())
# if len(maths.symmetric_difference(informatics)) == 0:
#     print('NO')
# else:
#     print(len(maths.symmetric_difference(informatics)))

# ///////////////////////////// 10.1 –í–≤–µ–¥–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–∏ –≤ Python ////////////////////////////////////
# my_dict = dict{}
# print(my_dict)

# my_dict = {1.12: 'aa', 67.9: 45, 3.11: 'ccc', 7.9: 'dd', 9.2: 'ee', 7.1: 'ff', 0.12: 'qq', 1.91: 'aa', 10.12: [1, 2, 3],
#            99.0: {9, 0, 1}}
# print(min(my_dict) + max(my_dict))

# –ü–µ—Ä–µ–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ª–æ–≤–∞—Ä—è
# –î–ª—è –≤—ã–≤–æ–¥–∞ –∫–ª—é—á–µ–π —Å–ª–æ–≤–∞—Ä—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
# capitals = {'–†–æ—Å—Å–∏—è': '–ú–æ—Å–∫–≤–∞', '–§—Ä–∞–Ω—Ü–∏—è': '–ü–∞—Ä–∏–∂', '–ß–µ—Ö–∏—è': '–ü—Ä–∞–≥–∞'}
# for key in capitals:
#     print(key)

# –î–ª—è –≤—ã–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π —Å–ª–æ–≤–∞—Ä—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
# capitals = {'–†–æ—Å—Å–∏—è': '–ú–æ—Å–∫–≤–∞', '–§—Ä–∞–Ω—Ü–∏—è': '–ü–∞—Ä–∏–∂', '–ß–µ—Ö–∏—è': '–ü—Ä–∞–≥–∞'}
# for key in capitals:
#     print(capitals[key])

# –î–ª—è –≤—ã–≤–æ–¥–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ª–æ–≤–∞—Ä—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
# capitals = {'–†–æ—Å—Å–∏—è': '–ú–æ—Å–∫–≤–∞', '–§—Ä–∞–Ω—Ü–∏—è': '–ü–∞—Ä–∏–∂', '–ß–µ—Ö–∏—è': '–ü—Ä–∞–≥–∞'}
# for key in capitals:
#     print('–°—Ç–æ–ª–∏—Ü–∞', key, '- —ç—Ç–æ', capitals[key])

# –°–ª–æ–≤–∞—Ä–Ω—ã–π –º–µ—Ç–æ–¥ keys() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ª–æ–≤–∞—Ä—è.
# capitals = {'–†–æ—Å—Å–∏—è': '–ú–æ—Å–∫–≤–∞', '–§—Ä–∞–Ω—Ü–∏—è': '–ü–∞—Ä–∏–∂', '–ß–µ—Ö–∏—è': '–ü—Ä–∞–≥–∞'}
# for key in capitals.keys():     # –∏—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ —Å–ø–∏—Å–∫—É ['–†–æ—Å—Å–∏—è', '–§—Ä–∞–Ω—Ü–∏—è', '–ß–µ—Ö–∏—è']
#     print(key)

# –°–ª–æ–≤–∞—Ä–Ω—ã–π –º–µ—Ç–æ–¥ values() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ª–æ–≤–∞—Ä—è.
# capitals = {'–†–æ—Å—Å–∏—è': '–ú–æ—Å–∫–≤–∞', '–§—Ä–∞–Ω—Ü–∏—è': '–ü–∞—Ä–∏–∂', '–ß–µ—Ö–∏—è': '–ü—Ä–∞–≥–∞'}
# for value in capitals.values():     # –∏—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ —Å–ø–∏—Å–∫—É ['–ú–æ—Å–∫–≤–∞', '–ü–∞—Ä–∏–∂', '–ü—Ä–∞–≥–∞']
#     print(value)


# –°–ª–æ–≤–∞—Ä–Ω—ã–π –º–µ—Ç–æ–¥ items() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ª–æ–≤–∞—Ä—è, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –∫–æ—Ä—Ç–µ–∂–µ–π –ø–∞—Ä (–∫–ª—é—á, –∑–Ω–∞—á–µ–Ω–∏–µ)
# capitals = {'–†–æ—Å—Å–∏—è': '–ú–æ—Å–∫–≤–∞', '–§—Ä–∞–Ω—Ü–∏—è': '–ü–∞—Ä–∏–∂', '–ß–µ—Ö–∏—è': '–ü—Ä–∞–≥–∞'}
# for item in capitals.items():
#     print(item)


# –ò—Å–ø–æ–ª—å–∑—É—è –º–∞–≥–∏—é —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –∫–æ—Ä—Ç–µ–∂–µ–π, –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Ç–∞–∫–æ–π –∫–æ–¥:
# capitals = {'–†–æ—Å—Å–∏—è': '–ú–æ—Å–∫–≤–∞', '–§—Ä–∞–Ω—Ü–∏—è': '–ü–∞—Ä–∏–∂', '–ß–µ—Ö–∏—è': '–ü—Ä–∞–≥–∞'}
# for key, value in capitals.items():
#     print(key, '-', value)


# –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∫–ª—é—á–µ–π —Å–ª–æ–≤–∞—Ä—è
# capitals = {'–†–æ—Å—Å–∏—è': '–ú–æ—Å–∫–≤–∞', '–§—Ä–∞–Ω—Ü–∏—è': '–ü–∞—Ä–∏–∂', '–ß–µ—Ö–∏—è': '–ü—Ä–∞–≥–∞'}
# print(*capitals, sep='\n')

# –¢–∞–∫ –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –ø–∞—Ä, —Ç–æ –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –∫–∞–∫ –ø–æ –∫–ª—é—á–∞–º, —Ç–∞–∫ –∏ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º.
# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–ª—é—á–∞–º –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ sorted().
# capitals = {'–†–æ—Å—Å–∏—è': '–ú–æ—Å–∫–≤–∞', '–ê–Ω–≥–ª–∏—è': '–õ–æ–Ω–¥–æ–Ω', '–ß–µ—Ö–∏—è': '–ü—Ä–∞–≥–∞', '–ë—Ä–∞–∑–∏–ª–∏—è':'–ë—Ä–∞–∑–∏–ª–∏–∞'}
# for key in sorted(capitals):
#     print(key)

# –î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ª–æ–≤–∞—Ä—è –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é sorted() –≤–º–µ—Å—Ç–µ —Å –º–µ—Ç–æ–¥–æ–º items().
# capitals = {'–†–æ—Å—Å–∏—è': '–ú–æ—Å–∫–≤–∞', '–ê–Ω–≥–ª–∏—è': '–õ–æ–Ω–¥–æ–Ω', '–ß–µ—Ö–∏—è': '–ü—Ä–∞–≥–∞', '–ë—Ä–∞–∑–∏–ª–∏—è':'–ë—Ä–∞–∑–∏–ª–∏–∞'}
# for key, value in sorted(capitals.items(), key = lambda x: x[1]):
#     print(value)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ:
# capitals = {'–†–æ—Å—Å–∏—è': '–ú–æ—Å–∫–≤–∞', '–§—Ä–∞–Ω—Ü–∏—è': '–ü–∞—Ä–∏–∂', '–ß–µ—Ö–∏—è': '–ü—Ä–∞–≥–∞'}
# if '–†–æ—Å—Å–∏—è' in capitals:
#     print('–í —Å–ª–æ–≤–∞—Ä–µ –µ—Å—Ç—å –∫–ª—é—á –†–æ—Å—Å–∏—è')
#
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä–µ:
# capitals = {'–†–æ—Å—Å–∏—è': '–ú–æ—Å–∫–≤–∞', '–§—Ä–∞–Ω—Ü–∏—è': '–ü–∞—Ä–∏–∂', '–ß–µ—Ö–∏—è': '–ü—Ä–∞–≥–∞'}
# if '–ü–∞—Ä–∏–∂' in capitals.values():
#     print('–í —Å–ª–æ–≤–∞—Ä–µ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ü–∞—Ä–∏–∂')

# –≤—ã–≤–µ–ª –∏–º–µ–Ω–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ), —á–µ–π –Ω–æ–º–µ—Ä –æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 88.
# users = [{'name': 'Todd', 'phone': '551-1414', 'email': 'todd@gmail.com'},
#          {'name': 'Helga', 'phone': '555-1618', 'email': 'helga@mail.net'},
#          {'name': 'Olivia', 'phone': '449-3141', 'email': ''},
#          {'name': 'LJ', 'phone': '555-2718', 'email': 'lj@gmail.net'},
#          {'name': 'Ruslan', 'phone': '422-145-9098', 'email': 'rus-lan.cha@yandex.ru'},
#          {'name': 'John', 'phone': '233-421-32', 'email': ''},
#          {'name': 'Lara', 'phone': '+7998-676-2532', 'email': 'g.lara89@gmail.com'},
#          {'name': 'Alina', 'phone': '+7948-799-2434', 'email': 'ali.ch.b@gmail.com'},
#          {'name': 'Robert', 'phone': '420-2011', 'email': ''},
#          {'name': 'Riyad', 'phone': '128-8890-128', 'email': 'r.mahrez@mail.net'},
#          {'name': 'Khabib', 'phone': '+7995-600-9080', 'email': 'kh.nurmag@gmail.com'},
#          {'name': 'Olga', 'phone': '6449-314-1213', 'email': ''},
#          {'name': 'Roman', 'phone': '+7459-145-8059', 'email': 'roma988@mail.ru'},
#          {'name': 'Maria', 'phone': '12-129-3148', 'email': 'm.sharapova@gmail.com'},
#          {'name': 'Fedor', 'phone': '+7445-341-0545', 'email': ''},
#          {'name': 'Tim', 'phone': '242-449-3141', 'email': 'timm.ggg@yandex.ru'}]
# # sp = []
# # for i in users:
# #     if i['phone'][-1] == '8':
# #         sp.append(i['name'])
# # print(*sorted(sp))
#
# result = [user['name'] for user in users if user['phone'].endswith('8')]
# print(*sorted(result))


# # –≤—ã–≤–µ–ª –∏–º–µ–Ω–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ), —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ.
# users = [{'name': 'Todd', 'phone': '551-1414', 'email': 'todd@gmail.com'},
#          {'name': 'Helga', 'phone': '555-1618'},
#          {'name': 'Olivia', 'phone': '449-3141', 'email': ''},
#          {'name': 'LJ', 'phone': '555-2718', 'email': 'lj@gmail.net'},
#          {'name': 'Ruslan', 'phone': '422-145-9098', 'email': 'rus-lan.cha@yandex.ru'},
#          {'name': 'John', 'phone': '233-421-32', 'email': ''},
#          {'name': 'Lara', 'phone': '+7998-676-2532', 'email': 'g.lara89@gmail.com'},
#          {'name': 'Alina', 'phone': '+7948-799-2434'},
#          {'name': 'Robert', 'phone': '420-2011', 'email': ''},
#          {'name': 'Riyad', 'phone': '128-8890-128', 'email': 'r.mahrez@mail.net'},
#          {'name': 'Khabib', 'phone': '+7995-600-9080', 'email': 'kh.nurmag@gmail.com'},
#          {'name': 'Olga', 'phone': '6449-314-1213', 'email': ''},
#          {'name': 'Roman', 'phone': '+7459-145-8059'},
#          {'name': 'Maria', 'phone': '12-129-3148', 'email': 'm.sharapova@gmail.com'},
#          {'name': 'Fedor', 'phone': '+7445-341-0545', 'email': ''},
#          {'name': 'Tim', 'phone': '242-449-3141', 'email': 'timm.ggg@yandex.ru'}]
#
# result = [user['name'] for user in users if len(user) < 3 or user['email'] == '']
# print(*sorted(result))

# –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
# sp = {'0': 'zero', '1': 'one', '2': 'two', '3': 'three', '4': 'four', '5': 'five', '6': 'six', '7': 'seven',
#       '8': 'eight', '9': 'nine'}
# for i in input():
#     print(sp[i], end=' ')


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–µ–±–Ω—ã—Ö –∫—É—Ä—Å–∞—Ö
# data = {
#     "CS101": "CS101: 3004, –•–∞–π–Ω—Å, 8:00",
#     "CS102": "CS102: 4501, –ê–ª—å–≤–∞—Ä–∞–¥–æ, 9:00",
#     "CS103": "CS103: 6755, –†–∏—á, 10:00",
#     "NT110": "NT110: 1244, –ë–µ—Ä–∫, 11:00",
#     "CM241": "CM241: 1411, –õ–∏, 13:00"
# }
# print(data[input()])


# –ù–∞–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
# d = {".": '1', ",": '11', "?": '111', "!": '1111', ":": '11111',
#      "A": '2', "B": '22', "C": '222',
#      "D": '3', "E": '33', "F": '333',
#      "G": '4', "H": '44', "I": '444',
#      "J": '5', "K": '55', "L": '555',
#      "M": '6', "N": '66', "O": '666',
#      "P": '7', "Q": '77', "R": '777', "S": '7777',
#      "T": '8', "U": '88', "V": '888',
#      "W": '9', "X": '99', "Y": '999', "Z": '9999',
#      " ": '0', '"':''
#      }
# for i in input().upper():
#     print(d[i], end='')

# –ö–æ–¥ –ú–æ—Ä–∑–µ
# morze = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..',
#          'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',
#          'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', '0': '-----',
#          '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..',
#          '9': '----.'}
# for i in input().upper():
#      if i in morze:
#           print(morze[i], end=' ')
# -----------------

# letters = [c for c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789']
# morse = ['.-', '-...', '-.-.', '-..', '.', '..-.', '--.', '....', '..', '.---', '-.-', '.-..', '--', '-.', '---', '.--.', '--.-', '.-.', '...', '-', '..-', '...-', '.--', '-..-', '-.--', '--..', '-----', '.----', '..---', '...--', '....-', '.....', '-....', '--...', '---..', '----.']
# mydict = dict(zip(letters, morse))
# for i in input().upper():
#      if i in mydict:
#           print(mydict[i], end=' ')


# 10.3 –ú–µ—Ç–æ–¥—ã —Å–ª–æ–≤–∞—Ä–µ–π

# –º–µ—Ç–æ–¥ items() ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä–Ω—ã–µ –ø–∞—Ä—ã –∫–ª—é—á: –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–∞–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–º –∫–æ—Ä—Ç–µ–∂–∏;
# –º–µ—Ç–æ–¥ keys() ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π —Å–ª–æ–≤–∞—Ä—è;
# –º–µ—Ç–æ–¥ values() ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π —Å–ª–æ–≤–∞—Ä—è.

# info = {'name': 'Sam',
#         'age': 28,
#         'job': 'Teacher'}
# info['name'] = 'Timur'                    # –∏–∑–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É name
# info['email'] = 'timyr-guev@yandex.ru'    # –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å —ç–ª–µ–º–µ–Ω—Ç —Å –∫–ª—é—á–æ–º email
# print(info)

# –†–µ—à–∏–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É: –ø—É—Å—Ç—å –∑–∞–¥–∞–Ω —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª numbers , –≥–¥–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —á–∏—Å–ª–∞ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –Ω–µ–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ.
# –ù—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –∏–º–µ–Ω–Ω–æ —Ä–∞–∑ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –∫–∞–∂–¥–æ–µ –∏–∑ —á–∏—Å–µ–ª.
#
# numbers = [9, 8, 32, 1, 10, 1, 10, 23, 1, 4, 10, 4, 2, 2, 2, 2, 1, 10, 1, 2, 2, 32, 23, 23]
# –ü–µ—Ä–≤—ã–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –≥–æ–ª–æ–≤—É –∏–º–µ–µ—Ç –≤–∏–¥:
#
# numbers = [9, 8, 32, 1, 10, 1, 10, 23, 1, 4, 10, 4, 2, 2, 2, 2, 1, 10, 1, 2, 2, 32, 23, 23]
#
# result = {}
# for num in numbers:
#     result[num] += 1
# –û–¥–Ω–∞–∫–æ, –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ —Å–¥–µ–ª–∞—Ç—å result[num] += 1 –Ω–µ–ª—å–∑—è, —Ç–∞–∫ –∫–∞–∫ –µ—Å–ª–∏ –∫–ª—é—á–∞ num –≤ —Å–ª–æ–≤–∞—Ä–µ –µ—â–µ –Ω–µ—Ç,
# —Ç–æ –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç –æ—à–∏–±–∫–∞ KeyError.
#
# –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥, –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ—à–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É:
#
# numbers = [9, 8, 32, 1, 10, 1, 10, 23, 1, 4, 10, 4, 2, 2, 2, 2, 1, 10, 1, 2, 2, 32, 23, 23]
#
# result = {}
# for num in numbers:
#     if num not in result:
#         result[num] = 1
#     else:
#         result[num] += 1
# –¶–∏–∫–ª for –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ numbers –∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç,
# –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–Ω —É–∂–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ result. –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç,
# –∑–Ω–∞—á–∏—Ç —á–∏—Å–ª–æ –≤—Å—Ç—Ä–µ—Ç–∏–ª–æ—Å—å –≤–ø–µ—Ä–≤—ã–µ –∏ –º—ã –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ result[num] = 1. –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ
# —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ, —É–≤–µ–ª–∏—á–∏–º result[num] –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É.
#

# –≠—Ç–æ—Ç –∫–æ–¥ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ get().
# numbers = [9, 8, 32, 1, 10, 1, 10, 23, 1, 4, 10, 4, 2, 2, 2, 2, 1, 10, 1, 2, 2, 32, 23, 23]
#
# result = {}
# for num in numbers:
#     result[num] = result.get(num, 0) + 1
# –¶–∏–∫–ª for –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ numbers –∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ get() –º—ã
# –ø–æ–ª—É—á–∞–µ–º –ª–∏–±–æ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è result, –ª–∏–±–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Ä–∞–≤–Ω–æ–µ 0. –ö –¥–∞–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
# –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç—Å—è –µ–¥–∏–Ω–∏—Ü–∞, –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ –Ω—É–∂–Ω–æ–º—É –∫–ª—é—á—É.


# –ú–µ—Ç–æ–¥ update() ‚Äì —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Å–≤–æ–µ–æ–±—Ä–∞–∑–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏ –¥–ª—è —Å–ª–æ–≤–∞—Ä–µ–π. –û–Ω –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∫–ª—é—á–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è
# –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è —Å –∫–ª—é—á–∞–º–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥—Ä—É–≥–æ–≥–æ. –ü—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –∫–ª—é—á–µ–π –≤ –∏—Ç–æ–≥–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è,
# —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –º–µ—Ç–æ–¥–∞ update().

# info1 = {'name': 'Bob',
#         'age': 25,
#         'job': 'Dev'}
#
# info2 = {'age': 30,
#         'city': 'New York',
#         'email': 'bob@web.com'}
#
# info1.update(info2)
#
# print(info1)  #--> {'name': 'Bob', 'age': 30, 'job': 'Dev', 'city': 'New York', 'email': 'bob@web.com'}

# –í Python 3.9 –ø–æ—è–≤–∏–ª–∏—Å—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã | –∏ |= –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª–∏–∑—É—é—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏ —Å–ª–æ–≤–∞—Ä–µ–π.
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
#
# info1 = {'name': 'Bob',
#         'age': 25,
#         'job': 'Dev'}
#
# info2 = {'age': 30,
#         'city': 'New York',
#         'email': 'bob@web.com'}
#
# info1 |= info2
#
# print(info1)
# –∞–Ω–∞–ª–æ–≥–∏—á–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –∫–æ–¥—É.

# –ú–µ—Ç–æ–¥ setdefault() –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∫–ª—é—á—É, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—è —ç–ª–µ–º–µ–Ω—Ç —Å–ª–æ–≤–∞—Ä—è, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
# –ú–µ—Ç–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞:
#      key: –∫–ª—é—á, –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–ª–µ–¥—É–µ—Ç –ø–æ–ª—É—á–∏—Ç—å, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤–æ–µ –∏–º–µ–µ—Ç—Å—è –≤ —Å–ª–æ–≤–∞—Ä–µ, –ª–∏–±–æ —Å–æ–∑–¥–∞—Ç—å.
#      default: –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ª–æ–≤–∞—Ä—å.

# –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ key –∏ default –≤–æ–∑–º–æ–∂–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–±–æ—Ç—ã –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞.
# –°—Ü–µ–Ω–∞—Ä–∏–π 1. –ï—Å–ª–∏ –∫–ª—é—á key –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ, —Ç–æ –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∫–ª—é—á—É
# (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –ø–µ—Ä–µ–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä default –∏–ª–∏ –Ω–µ—Ç).
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
#
# info = {'name': 'Bob',
#         'age': 25}
#
# name1 = info.setdefault('name')           # –ø–∞—Ä–∞–º–µ—Ç—Ä default –Ω–µ –∑–∞–¥–∞–Ω
# name2 = info.setdefault('name', 'Max')    # –ø–∞—Ä–∞–º–µ—Ç—Ä default –∑–∞–¥–∞–Ω
# print(name1)
# print(name2)
# –≤—ã–≤–æ–¥–∏—Ç:
# Bob
# Bob
# –°—Ü–µ–Ω–∞—Ä–∏–π 2. –ï—Å–ª–∏ –∫–ª—é—á key –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ, —Ç–æ –º–µ—Ç–æ–¥ –≤—Å—Ç–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ default –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∫–ª—é—á—É.
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
# info = {'name': 'Bob',
#         'age': 25}
#
# job = info.setdefault('job', 'Dev')
# print(info)
# print(job)
# –≤—ã–≤–æ–¥–∏—Ç:
# {'name': 'Bob', 'age': 25, 'job': 'Dev'}
# Dev
# –ü—Ä–∏ —ç—Ç–æ–º –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ default –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ –º–µ—Ç–æ–¥, —Ç–æ –≤—Å—Ç–∞–≤–∏—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ None.

# –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
# –°—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä—è:
#
# –æ–ø–µ—Ä–∞—Ç–æ—Ä del;
# –º–µ—Ç–æ–¥ pop();
# –º–µ—Ç–æ–¥ popitem();
# –º–µ—Ç–æ–¥ clear().

# –° –ø–æ–º–æ—â—å—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ del –º–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ª–æ–≤–∞—Ä—è –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –∫–ª—é—á—É.
# –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:
#
# info = {'name': 'Sam',
#         'age': 28,
#         'job': 'Teacher',
#         'email': 'timyr-guev@yandex.ru'}
#
# del info['email']    # —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ—é—â–∏–π –∫–ª—é—á email
# del info['job']      # —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ—é—â–∏–π –∫–ª—é—á job
#
# print(info)
# –≤—ã–≤–æ–¥–∏—Ç (–ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è):
## {'name': 'Sam', 'age': 28}

# –û–ø–µ—Ä–∞—Ç–æ—Ä del —É–¥–∞–ª—è–µ—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è —ç–ª–µ–º–µ–Ω—Ç –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∫–ª—é—á—É –≤–º–µ—Å—Ç–µ —Å –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º.
# –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–∞–º–æ –∑–Ω–∞—á–µ–Ω–∏–µ —É–¥–∞–ª—è–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, —Ç–æ –Ω—É–∂–µ–Ω –º–µ—Ç–æ–¥ pop().
# –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:
#
# info = {'name': 'Sam',
#         'age': 28,
#         'job': 'Teacher',
#         'email': 'timyr-guev@yandex.ru'}
#
# email = info.pop('email')          # —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ –∫–ª—é—á—É email, –≤–æ–∑–≤—Ä–∞—â–∞—è –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ
# job = info.pop('job')              # —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ –∫–ª—é—á—É job, –≤–æ–∑–≤—Ä–∞—â–∞—è –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ
#
# print(email)
# print(job)
# print(info)
# –≤—ã–≤–æ–¥–∏—Ç:
#
# timyr-guev@yandex.ru
# Teacher
# {'name': 'Sam', 'age': 28}

# –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è:
# surname = info.pop('surname', None)
# –ï—Å–ª–∏ –∫–ª—é—á–∞ surname –≤ —Å–ª–æ–≤–∞—Ä–µ –Ω–µ—Ç, —Ç–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π surname –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ None.

# –ú–µ—Ç–æ–¥ popitem() —É–¥–∞–ª—è–µ—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–¥–∞–ª—è–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤
# –≤–∏–¥–µ –∫–æ—Ä—Ç–µ–∂–∞ (–∫–ª—é—á, –∑–Ω–∞—á–µ–Ω–∏–µ).
#
# info = {'name': 'Bob',
#      'age': 25,
#      'job': 'Dev'}
#
# info['surname'] = 'Sinclar'
#
# item = info.popitem()
#
# print(item)
# print(info)
# –≤—ã–≤–æ–¥–∏—Ç:
#
# ('surname', 'Sinclar')
# {'name': 'Bob', 'age': 25, 'job': 'Dev'}

# –ú–µ—Ç–æ–¥ clear() —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è.
# –ú–µ—Ç–æ–¥ copy() —Å–æ–∑–¥–∞–µ—Ç –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—É—é –∫–æ–ø–∏—é —Å–ª–æ–≤–∞—Ä—è.
# –û–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è (=) –Ω–µ –∫–æ–ø–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å, –∞ –ª–∏—à—å –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ä—ã–π —Å–ª–æ–≤–∞—Ä—å –Ω–æ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π.


# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°–ª–æ–≤–∞—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–º–µ—Å—Ç–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π,
# –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–∏—Å–ª–æ –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ. –ù–∞–ø—Ä–∏–º–µ—Ä –≤–º–µ—Å—Ç–æ

# num = int(input())
# if num == 1:
#     description = 'One'
# elif num == 2:
#     description = 'Two'
# elif num == 3:
#     description = 'Three'
# else:
#     description = 'Unknown'
# print(description)
#
# –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å
#
# num = int(input())
# description = {1: 'One', 2: 'Two', 3: 'Three'}
# print(description.get(num, 'Unknown'))


# # —á—Ç–æ–±—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π result —Ö—Ä–∞–Ω–∏–ª—Å—è —Å–ª–æ–≤–∞—Ä—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–ª—é—á–∏
# # ‚Äì —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 15 (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ), –∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π –∫–≤–∞–¥—Ä–∞—Ç—ã –∫–ª—é—á–µ–π.
# key = [i for i in range(1,16)]
# value = [i**2 for i in range(1,16)]
# result = dict(zip(key, value))
# print(result)
#
# result = {}
# for i in range(1, 16):
#     result[i] = i * i
#
# result = {}
# result = {i: i**2 for i in range(1, 16)}

# result = {i: i ** 2 for i in range(1, 16)}


# –æ–±—ä–µ–¥–∏–Ω–∏–ª —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–≤—É—Ö —Å–ª–æ–≤–∞—Ä–µ–π dict1 –∏ dict2 –ø–æ –∫–ª—é—á–∞–º, —Å–∫–ª–∞–¥—ã–≤–∞—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É –∏ —Ç–æ–º—É –∂–µ –∫–ª—é—á—É,
# # –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –∫–ª—é—á –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ–±–æ–∏—Ö —Å–ª–æ–≤–∞—Ä—è—Ö
# dict1 = {'a': 100, 'z': 333, 'b': 200, 'c': 300, 'd': 45, 'e': 98, 't': 76, 'q': 34, 'f': 90, 'm': 230}
# dict2 = {'a': 300, 'b': 200, 'd': 400, 't': 777, 'c': 12, 'p': 123, 'w': 111, 'z': 666}
#
# for key, value in dict2.items():
#     dict1[key] = dict1.setdefault(key, 0) + value
# result = dict1.copy()


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ —Ç–∞–∫, —á—Ç–æ–±—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π result —Ö—Ä–∞–Ω–∏–ª—Å—è —Å–ª–æ–≤–∞—Ä—å,
# –≤ –∫–æ—Ç–æ—Ä–æ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ —Å—Ç—Ä–æ–∫–∏ text –±—É–¥–µ—Ç –ø–æ–¥—Å—á–∏—Ç–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π.
# text = 'footballcyberpunkextraterritorialityconversationalistblockophthalmoscopicinterdependencemamauserfff'
# result = {l: text.count(l) for l in set(text)}
# print(result)


# s = 'orange strawberry barley gooseberry apple apricot barley currant orange melon pomegranate banana banana orange barley apricot plum grapefruit banana quince strawberry barley grapefruit banana grapes melon strawberry apricot currant currant gooseberry raspberry apricot currant orange lime quince grapefruit barley banana melon pomegranate barley banana orange barley apricot plum banana quince lime grapefruit strawberry gooseberry apple barley apricot currant orange melon pomegranate banana banana orange apricot barley plum banana grapefruit banana quince currant orange melon pomegranate barley plum banana quince barley lime grapefruit pomegranate barley'
#
# result = {}  # —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
#
# for i in s.split():  # –ø—Ä–æ–≤–æ–¥–∏–º –ø–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
#     result[i] = result.get(i, 0) + 1  # –µ—Å–ª–∏ —Å–ª–æ–≤–∞ –Ω–µ—Ç —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ = 0 –∏–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º +1
#
# s = max(result.values())  # —É–∑–Ω–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è —Å–ª–æ–≤–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π s
#
# print(min([key for key, value in result.items() if
#            value == s]))  # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤ –∫–æ—Ç–æ—Ä—ã–π, —Å–ø–æ—Å–æ–±–æ–º –ø–µ—Ä–µ–±–æ—Ä–∞ –¥–æ–±–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–≤–Ω–æ –∑–Ω–∞—á–µ–Ω–∏—é s, —Å –ø–æ–º–æ—â—å—é min —É–∑–Ω–∞–µ–º –∫–∫–∞–∫–æ–µ –∑–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ –∞–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è —è–≤–ª—è—é—Ç—Å—è –º–µ–Ω—å—à–µ –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ

#
# pets = [('Hatiko', 'Parker', 'Wilson', 50),
#         ('Rusty', 'Josh', 'King', 25),
#         ('Fido', 'John', 'Smith', 28),
#         ('Butch', 'Jake', 'Smirnoff', 18),
#         ('Odi', 'Emma', 'Wright', 18),
#         ('Balto', 'Josh', 'King', 25),
#         ('Barry', 'Josh', 'King', 25),
#         ('Snape', 'Hannah', 'Taylor', 40),
#         ('Horry', 'Martha', 'Robinson', 73),
#         ('Giro', 'Alex', 'Martinez', 65),
#         ('Zooma', 'Simon', 'Nevel', 32),
#         ('Lassie', 'Josh', 'King', 25),
#         ('Chase', 'Martha', 'Robinson', 73),
#         ('Ace', 'Martha', 'Williams', 38),
#         ('Rocky', 'Simon', 'Nevel', 32)]
#
# result = {}
# for p, *name in pets:
#     result.setdefault(tuple(name), []).append(p)

# # –°–∞–º–æ–µ —Ä–µ–¥–∫–æ–µ —Å–ª–æ–≤–æ üå∂Ô∏è
# li = [word.strip(".,!?:;-").lower() for word in input().split()]
# di = {word: li.count(word) for word in li}
# m = min(di.values())
#
# for k, v in sorted(di.items(), key=lambda t: t[0]):
#     if v == m:
#         print(k)
#         break


# # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ üå∂Ô∏è
# d, l = {}, []
#
# for c in input().split():
#     if c not in l:
#         l.append(c)
#     else:
#         d[c] = d.get(c, 0) + 1
#         l.append(c + '_' + str(d[c]))
#
# print(*l)


# # –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞
# data =  [(input().split(':')) for i in range(int(input()))]
# data = {i[0].lower(): i[1].strip() for i in data}
# for i in [input().lower() for i in range(int(input()))]:
#     print(data.get(i, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"))


# –ê–Ω–∞–≥—Ä–∞–º–º—ã 1
# s = sorted(input())
# dct1 = dict(zip(range(len(s)), s))
#
# s = sorted(input())
# dct2 = dict(zip(range(len(s)), s))
#
# print('YES' if dct1 == dct2 else 'NO')

# print('YES' if sorted(input()) == sorted(input()) else 'NO')

# # –ê–Ω–∞–≥—Ä–∞–º–º—ã 2
# s1 = [i for i in input().lower() if i.isalpha()]
# s2 = [i for i in input().lower() if i.isalpha()]
# print('YES' if sorted(s1) == sorted(s2) else 'NO')

# –°–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤
# lovar=dict([[i for i in input().split(' ')] for i in range(int(input()))])
# a=input()
# for key,value in lovar.items():
#     if key==a:
#         print(value)
#     if value==a:
#         print(key)


# # –°—Ç—Ä–∞–Ω—ã –∏ –≥–æ—Ä–æ–¥–∞
# d = {}
# for _ in range(int(input())):
#     s = input().split()
#     d[s[0]] = s[1:]
# for _ in range(int(input())):
#     city = input()
#     for country, cities in d.items():
#         if city in cities:
#             print(country)

# –¢–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞
# res = {}
# for i in range(int(input())):
#     a, b = input().lower().split()
#     res[b] = res.get(b, []) + [a]
#
# for i in range(int(input())):
#     name = input().lower()
#     print(*res.get(name, ['–∞–±–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω']))


# # –°–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ
# f = input()
# d = {}
# for u in f:
#     d.setdefault(f.count(u), u)
#
# for _ in range(int(input())):
#     key, value = input().split(':')
#     f = f.replace(d[int(value)], key)
# print(f)

# 10.5 –í–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã —Å–ª–æ–≤–∞—Ä–µ–π
# ids = ['emp1', 'emp2', 'emp3']
# emp_info = [{'name': 'Timur', 'job': 'Teacher'},
#             {'name': 'Ruslan', 'job': 'Developer'},
#             {'name': 'Rustam', 'job': 'Tester'}]
# info = dict(zip(ids, emp_info))


# –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è
# –∫ –µ–≥–æ –∫–ª—é—á—É –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è (=).
#
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
#
# info = {'emp1': {'name': 'Timur', 'job': 'Teacher'},
#         'emp2': {'name': 'Ruslan', 'job': 'Developer'},
#         'emp3': {'name': 'Rustam', 'job': 'Tester'}}
#
# info['emp1']['job'] = 'Manager'
#
# print(info['emp1'])
# –≤—ã–≤–æ–¥–∏—Ç:
#
# {'name': 'Timur', 'job': 'Manager'}


# –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–º —Å–ª–æ–≤–∞—Ä—è–º
# –ò—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–º —Å–ª–æ–≤–∞—Ä—è–º –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç—Å—è –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ –¥–≤—É–º—è —Ü–∏–∫–ª–∞–º–∏ for (–∏–Ω–æ–≥–¥–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞).
#
# info = {'emp1': {'name': 'Timur', 'job': 'Teacher'},
#         'emp2': {'name': 'Ruslan', 'job': 'Developer'},
#         'emp3': {'name': 'Rustam', 'job': 'Tester'}}
# for emp in info:
#     print('Employee ID:', emp)
#     for key in info[emp]:
#         print(key + ':', info[emp][key])
#     print()
# –≤—ã–≤–æ–¥–∏—Ç:
# Employee ID: emp1
# name: Timur
# job: Teacher
#
# Employee ID: emp2
# name: Ruslan
# job: Developer
#
# Employee ID: emp3
# name: Rustam
# job: Tester
#


# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–æ–∂–Ω–æ –±—ã–ª–æ –¥–æ–±–∏—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ items():
#
# info = {'emp1': {'name': 'Timur', 'job': 'Teacher'},
#         'emp2': {'name': 'Ruslan', 'job': 'Developer'},
#         'emp3': {'name': 'Rustam', 'job': 'Tester'}}
#
# for emp, inf in info.items():
#     print('Employee ID:', emp)
#     for key in inf:
#         print(key + ':', inf[key])
#     print()


# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã —Å–ª–æ–≤–∞—Ä–µ–π
# squares = {i: i**2 for i in range(6)}
# {–∫–ª—é—á: –∑–Ω–∞—á–µ–Ω–∏–µ for –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è in –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å}

## 1. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª–æ–≤–∞—Ä—è –ø—Ä–∏ –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ —Å—Ç—Ä–æ–∫–µ.
# dct = {c: c * 3 for c in 'ORANGE'}
# print(dct)  #--> {'O': 'OOO', 'R': 'RRR', 'A': 'AAA', 'N': 'NNN', 'G': 'GGG', 'E': 'EEE'}


##2. –î–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–ª—é—á–∞ –∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ —Å–ª–æ–≤–∞—Ä—è –º–æ–≥—É—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤—ã—Ä–∞–∂–µ–Ω–∏—è.
# lst = ['ReD', 'GrEeN', 'BlUe']
# dct = {c.lower(): c.upper() for c in lst}
# print(dct)   #-->  {'red': 'RED', 'green': 'GREEN', 'blue': 'BLUE'}

# ##3. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏.
# dict1 = {0: 'A', 1: 'B', 2: 'C', 3: 'D', 4: 'E', 5: 'F'}
# selected_keys = [0, 2, 5]
# dict2 = {k: dict1[k] for k in selected_keys}
# print(dict2)   #-->  {0: 'A', 2: 'C', 5: 'F'}

##–£—Å–ª–æ–≤–∏—è –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ —Å–ª–æ–≤–∞—Ä–µ–π
# squares = {i: i**2 for i in range(10) if i % 2 == 0}
# print(squares)


##–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞—Ä–µ–π
# squares = {i: {j: j**2 for j in range(i + 1)} for i in range(5)}
# for value in squares.values():
#     print(value)
# –≤—ã–≤–æ–¥–∏—Ç:
#
# {0: 0}
# {0: 0, 1: 1}
# {0: 0, 1: 1, 2: 4}
# {0: 0, 1: 1, 2: 4, 3: 9}
# {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}
#


# –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å result , –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–ª—é—á–æ–º –±—É–¥–µ—Ç –ø–æ–∑–∏—Ü–∏—è —á–∏—Å–ª–∞ –≤ —Å–ø–∏—Å–∫–µ numbers (–Ω–∞—á–∏–Ω–∞—è —Å 00),
# –∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º ‚Äì –µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç.
# numbers = [34, 10, -4, 6, 10, 23, -90, 100, 21, -35, -95, 1, 36, -38, -19, 1, 6, 87]
# result = {i:numbers[i]**2 for i in range(len(numbers))}
# print(result)


# # –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å result, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ª–æ–≤–∞—Ä—è colors, –∫—Ä–æ–º–µ —Ç–µ—Ö,
# # —É –∫–æ—Ç–æ—Ä—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–µ–º —è–≤–ª—è–µ—Ç—Å—è None.
# colors = {'c1': 'Red', 'c2': 'Grey', 'c3': None, 'c4': 'Green', 'c5': 'Yellow', 'c6': 'Pink', 'c7': 'Orange', 'c8': None, 'c9': 'White', 'c10': 'Black', 'c11': 'Violet', 'c12': 'Gold', 'c13': None, 'c14': 'Amber', 'c15': 'Azure', 'c16': 'Beige', 'c17': 'Bronze', 'c18': None, 'c19': 'Lilac', 'c20': 'Pearl', 'c21': None, 'c22': 'Sand', 'c23': None}
# result = {key: value for key, value in colors.items() if value != None}


# –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å result, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ª–æ–≤–∞—Ä—è favorite_numbers ,
# –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö —è–≤–ª—è—é—Ç—Å—è –¥–≤—É–∑–Ω–∞—á–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏.
# favorite_numbers = {'timur': 17, 'ruslan': 7, 'larisa': 19, 'roman': 123, 'rebecca': 293, 'ronald': 76, 'dorothy': 62, 'harold': 36, 'matt': 314, 'kim': 451, 'rosaly': 18, 'rustam': 89, 'soltan': 111, 'amir': 654, 'dima': 390, 'amiran': 777, 'geor': 999, 'sveta': 75, 'rita': 909, 'kirill': 404, 'olga': 271, 'anna': 55, 'madlen': 876}
# result = {i: favorite_numbers[i] for i in favorite_numbers if int(favorite_numbers[i]/10)  in range(1, 10)}


# # –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å result, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ª–æ–≤–∞—Ä—è months,
# # –≤ –∫–æ—Ç–æ—Ä—ã—Ö –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–º–µ–Ω—è–ª–∏—Å—å –º–µ—Å—Ç–∞–º–∏.
# months = {1: 'January', 2: 'February', 3: 'March', 4: 'April', 5: 'May', 6: 'June', 7: 'July', 8: 'August', 9: 'September', 10: 'October', 11: 'November', 12: 'December'}
# result = {value: key for key, value in months.items()}


# # –í –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π s —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ –ø–∞—Ä —á–∏—Å–ª–æ:—Å–ª–æ–≤–æ. –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä,
# # # —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å result, –≤ –∫–æ—Ç–æ—Ä–æ–º —á–∏—Å–ª–∞ –±—É–¥—É—Ç –∫–ª—é—á–∞–º–∏, –∞ —Å–ª–æ–≤–∞ ‚Äì –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
# #
# # s = '1:men 2:kind 90:number 0:sun 34:book 56:mountain 87:wood 54:car 3:island 88:power 7:box 17:star 101:ice'
# # result = {int(key): value for key, value in (a.split(':') for a in s.split())}


# # —Å–ø–æ–ª—å–∑—É—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å result , –≥–¥–µ –∫–ª—é—á–æ–º –±—É–¥–µ—Ç —ç–ª–µ–º–µ–Ω—Ç
# # —Å–ø–∏—Å–∫–∞ numbers, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º ‚Äì –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –µ–≥–æ –¥–µ–ª–∏—Ç–µ–ª–µ–π –Ω–∞—á–∏–Ω–∞—è —Å 1.
# numbers = [34, 10, 4, 6, 10, 23, 90, 100, 21, 35, 95, 1, 36, 38, 19, 1, 6, 87, 1000, 13456, 360]
# result = {key: sorted([n for n in range(1, key + 1) if key % n == 0]) for key in numbers}


# # –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å result, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–ª—é—á–æ–º –±—É–¥–µ—Ç —Å—Ç—Ä–æ–∫–∞ ‚Äì —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ words, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º ‚Äì —Å–ø–∏—Å–æ–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö
# # –∫–æ–¥–æ–≤ ASCII —Å–∏–º–≤–æ–ª–æ–≤ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
# words = ['hello', 'bye', 'yes', 'no', 'python', 'apple', 'maybe', 'stepik', 'beegeek']
# result = {word: [ord(w) for w in word] for word in words}


# –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å result, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ª–æ–≤–∞—Ä—è letters , –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º —Ç–µ—Ö, –∫–ª—é—á–∏ –∫–æ—Ç–æ—Ä—ã—Ö
# –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ remove_keys.
# letters = {0: 'A', 1: 'B', 2: 'C', 3: 'D', 4: 'E', 5: 'F', 6: 'G', 7: 'H', 8: 'I', 9: 'J', 10: 'K', 11: 'L', 12: 'M', 13: 'N', 14: 'O', 15: 'P', 16: 'Q', 17: 'R', 18: 'S', 19: 'T', 20: 'U', 21: 'V', 22: 'W', 23: 'X', 24: 'Y', 26: 'Z'}
# remove_keys = [1, 5, 7, 12, 17, 19, 21, 24]
# result = {key: value for key, value in letters.items() if key not in remove_keys}


# # –æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å result, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ª–æ–≤–∞—Ä—è students,
# # –≥–¥–µ —É–∫–∞–∑–∞–Ω —Ä–æ—Å—Ç –±–æ–ª—å—à–µ 167 —Å–º, –∞ –≤–µ—Å –º–µ–Ω—å—à–µ 75 –∫–≥.
# students = {'Timur': (170, 75), 'Ruslan': (180, 105), 'Soltan': (192, 68), 'Roman': (175, 70), 'Madlen': (160, 50), 'Stefani': (165, 70), 'Tom': (190, 90), 'Jerry': (180, 87), 'Anna': (172, 67), 'Scott': (168, 78), 'John': (186, 79), 'Alex': (195, 120), 'Max': (200, 110), 'Barak': (180, 89), 'Donald': (170, 80), 'Rustam': (186, 100), 'Alice': (159, 59), 'Rita': (170, 80), 'Mary': (175, 69), 'Jane': (190, 80)}
# result = {key: value for key, value in students.items() if value[0] > 167 and value[1] < 75}


# # –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å result, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–ª—é—á–æ–º —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∂–¥–æ–≥–æ –∫–æ—Ä—Ç–µ–∂–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º ‚Äì –∫–æ—Ä—Ç–µ–∂
# # –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–≤—É—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
# tuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30), (31, 32, 33), (34, 35, 36)]
# result = {k: tuple(v) for k, *v in tuples}


# # –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ result, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—Ä–∞–∑—Ü–æ–º:
# # [{'S001': {'Camila Rodriguez': 86}}, {'S002': {'Juan Cruz': 98}},...].
# student_ids = ['S001', 'S002', 'S003', 'S004', 'S005', 'S006', 'S007', 'S008', 'S009', 'S010', 'S011', 'S012', 'S013']
# student_names = ['Camila Rodriguez', 'Juan Cruz', 'Dan Richards', 'Sam Boyle', 'Batista Cesare', 'Francesco Totti', 'Khalid Hussain', 'Ethan Hawke', 'David Bowman', 'James Milner', 'Michael Owen', 'Gary Oldman', 'Tom Hardy']
# student_grades = [86, 98, 89, 92, 45, 67, 89, 90, 100, 98, 10, 96, 93]
# result = [{student_ids[i]: {student_names[i]: student_grades[i]}} for i in range(len(student_ids))]


# # –≤—ã–≤–µ–ª –≤—Å–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –∫–∞–∂–¥—ã–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –≤ —Ñ–æ—Ä–º–∞—Ç–µ username @ domain.
# emails = {'nosu.edu': ['timyr', 'joseph', 'svetlana.gaeva', 'larisa.mamuk'],
#           'gmail.com': ['ruslan.chaika', 'rustam.mini', 'stepik-best'],
#           'msu.edu': ['apple.fruit', 'beegeek', 'beegeek.school'],
#           'yandex.ru': ['surface', 'google'],
#           'hse.edu': ['tomas-henders', 'cream.soda', 'zivert'],
#           'mail.ru': ['angel.down', 'joanne', 'the.fame.moster']}
# arr = []
#
# for elem in emails:
#         for address in emails[elem]:
#                 arr.append(address + '@' + elem)
#
# for elem in sorted(arr):
#         print(elem)


# # –ú–∏–Ω—É—Ç–∫–∞ –≥–µ–Ω–µ—Ç–∏–∫–∏
# d = {'A': 'U', 'C': 'G', 'G': 'C', 'T': 'A'}
# arr = [d[elem] for elem in input()]
#
# print(''.join(arr))

# # –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä
# s = input().split()
# arr = []
# d = {}
#
# for elem in s:
#     if elem in d:
#         d[elem] += 1
#         arr.append(d[elem])
#     else:
#         d[elem] = 1
#         arr.append(d[elem])
#
# print(*arr)

# # Scrabble game
# d = {'A': 1, 'E': 1, 'I': 1, 'L': 1, 'N': 1, 'O': 1, 'R': 1, 'S': 1, 'T': 1, 'U': 1, 'D': 2, 'G': 2, 'B': 3, 'C': 3,
#      'M': 3, 'P': 3, 'F': 4, 'H': 4, 'V': 4, 'W': 4, 'Y': 4, 'K': 5, 'J': 8, 'X': 8, 'Q': 10, 'Z': 10}
#
# summa = 0
#
# for elem in input():
#     summa += d[elem]
#
# print(summa)

# # –°—Ç—Ä–æ–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
# def build_query_string(params):
#     result = ''
#     for elem in sorted(params):
#         result += elem
#         result += '='
#         result += str(params[elem])
#         result += '&'
#     return result[:-1]


# # –°–ª–∏—è–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π üå∂Ô∏è
# def merge(values):
#     result = {}
#     for elem in values:
#         for i in elem:
#             if i in result:
#                 result[i].add(elem[i])
#             else:
#                 result[i] = set()
#                 result[i].add(elem[i])
#
#     return result

# # –û–ø–∞—Å–Ω—ã–π –≤–∏—Ä—É—Å üòà
# s = {'write': 'W', 'read': 'R','execute': 'X'}
# d = {}
#
# n = int(input())
#
# for i in range(n):
#     arr = input().split()
#     d[arr[0]] = arr[1:]
#
# m = int(input())
#
# for i in range(m):
#     arr = input().split()
#     if s[arr[0]] in d[arr[1]]:
#         print('OK')
#     else:
#         print('Access denied')

# # –ü–æ–∫—É–ø–∫–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ üå∂Ô∏è
# n = int(input())
# d = {}
#
# for i in range(n):
#     arr = input().split()
#     if arr[0] in d:
#         if arr[1] in d[arr[0]]:
#             d[arr[0]][arr[1]] += int(arr[2])
#         else:
#             d[arr[0]][arr[1]] = int(arr[2])
#     else:
#         d[arr[0]] = {arr[1]: int(arr[2])}
#
# for name in sorted(d):
#     print(name + ':')
#     for product in sorted(d[name]):
#         print(product + ' ' + str(d[name][product]))
#
#
# 12.1 –ú–æ–¥—É–ª—å random. –ß–∞—Å—Ç—å 1

# –§—É–Ω–∫—Ü–∏—è randint() –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–∞ a –∏ b –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
# –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏–∑ –æ—Ç—Ä–µ–∑–∫–∞ [a;b], –õ–µ–≤–∞—è –∏ –ø—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ a –∏ b –≤–∫–ª—é—á–∞—é—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω
# import random
# num1 = random.randint(0, 17)

# –§—É–Ω–∫—Ü–∏—è randrange() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–∏—Å–µ–ª.
# import random
# num = random.randrange(10)
# –≤–æ–∑–≤—Ä–∞—Ç–∏—Ç —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø—Ä–µ–¥–µ–ª–∞, –∏—Å–∫–ª—é—á–∞—è —Å–∞–º –ø—Ä–µ–¥–µ–ª

# –§—É–Ω–∫—Ü–∏–∏ randint() –∏ randrange() –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ê –≤–æ—Ç —Ñ—É–Ω–∫—Ü–∏—è random() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
# –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π (–≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ). –í —Ñ—É–Ω–∫—Ü–∏—é random() –Ω–∏–∫–∞–∫–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
# –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è. –§—É–Ω–∫—Ü–∏—è random() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π –≤
# –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 1 (–∏—Å–∫–ª—é—á–∞—è 1).
# import random
# num = random.random()

# –§—É–Ω–∫—Ü–∏—è uniform() —Ç–æ–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –æ–Ω–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç
# –∑–∞–¥–∞–≤–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –æ—Ç–±–æ—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏–π.
# –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [1.5;17.3] (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ):
# import random
# num = random.uniform(1.5, 17.3)

# –§—É–Ω–∫—Ü–∏—è seed() —è–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
# import random
#
# random.seed(17)   # —è–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
#
# for _ in range(10):
#     print(random.randint(1, 100))
#

# import random
# for i in range(int(input())):
#     if random.randint(0,1):
#         print('–û—Ä–µ–ª')
#     else:
#         print('–†–µ—à–∫–∞')

# import random
# n = int(input())    # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
# for _ in range(n):
#     num = random.randint(0, 1)
#     if num == 0:
#         print('–û—Ä–µ–ª')
#     else:
#         print('–†–µ—à–∫–∞')

# import random
# n = int(input())    # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
# for _ in range(n):
#     num = random.randint(1, 6)
#     print(num)


# –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å
# import random
# length = int(input())    # –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è
# for _ in range(length):
#     r = random.randint(0,1)  #—Ä–µ–≥–∏—Å—Ç—Ä
#     if r == 0:
#         pas = random.randint(65,90)
#     else:
#         pas = random.randint(97, 122)
#     print(chr(pas),end='')

# # –õ–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç
# import random
# s = set()
# while len(s) < 7:
#     s.add(random.randint(1, 49))
# print(*sorted(s))


# –ú–µ—Ç–æ–¥ shuffle() –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç –µ–≥–æ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.
# import random
# numbers = [1, 2, 3, 4, 5, 6, 7, 8]
# random.shuffle(numbers)
# print(numbers)   #--> [4, 7, 8, 1, 2, 3, 6, 5]

# –ú–µ—Ç–æ–¥ choice() –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (—Å—Ç—Ä–æ–∫—É, –∫–æ—Ä—Ç–µ–∂) –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–∏–Ω
# —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç.

# –ú–µ—Ç–æ–¥ sample() –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–∞: –ø–µ—Ä–≤—ã–π ‚Äì —Å–ø–∏—Å–æ–∫ (—Å—Ç—Ä–æ–∫–∞, –∫–æ—Ä—Ç–µ–∂, –º–Ω–æ–∂–µ—Å—Ç–≤–æ),
# –≤—Ç–æ—Ä–æ–π ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö
# (–∏–º–µ—é—â–∏—Ö —Ä–∞–∑–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã) —Å–ª—É—á–∞–π–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.

# # –≤ –º–æ–¥—É–ª–µ string –æ—Å—Ç–∞–ª–∏—Å—å —É–¥–æ–±–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
# import string
#
# print(string.ascii_letters)
# print(string.ascii_uppercase)
# print(string.ascii_lowercase)
# print(string.digits)
# print(string.hexdigits)
# print(string.octdigits)
# print(string.punctuation)
# print(string.printable)
# –≤—ã–≤–æ–¥–∏—Ç:
#
# abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
# ABCDEFGHIJKLMNOPQRSTUVWXYZ
# abcdefghijklmnopqrstuvwxyz
# 0123456789
# 0123456789abcdefABCDEF
# 01234567
# !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
# 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~ \t\n\r\x0b\x0c


# generate_ip()
# import random
# def generate_ip():
#     numbers = [i for i in range(256)]
#     ip = str(random.choice(numbers)) + '.' + str(random.choice(numbers)) + '.' + str(random.choice(numbers)) + '.' + str(random.choice(numbers))
#     return ip
#
# from random import randrange as r
# def generate_ip():
#     return f'{r(256)}.{r(256)}.{r(256)}.{r(256)}'

# –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –õ–∞—Ç–≤–µ—Ä–∏–∏.
# import string, random
# from random import randrange as r
# def generate_index():
#     return f'{random.choice(string.ascii_uppercase)}{random.choice(string.ascii_uppercase)}{r(1,9)}{r(1,9)}_{r(1,9)}{r(1,9)}{random.choice(string.ascii_uppercase)}{random.choice(string.ascii_uppercase)}'
#
# print(generate_index())


# –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∞—Ç—Ä–∏—Ü—ã (–¥–≤—É–º–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞).
# import random
# matrix = [[1, 2, 3, 4],
#           [5, 6, 7, 8],
#           [9, 10, 11, 12],
#           [13, 14, 15, 16]]
# random.shuffle(matrix)
# print(matrix)

# —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è random –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 100 —Å–ª—É—á–∞–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤
# –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ö –∫–∞–∂–¥—ã–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

# from random import randrange
# tickets = set()
# while len(tickets) != 100:
#     tickets.add(randrange(1000000, 10000000))
# print(*tickets, sep='\n')

# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ —Å–ª–æ–≤–æ –∏ –≤—ã–≤–æ–¥–∏—Ç —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è random –µ–≥–æ —Å–ª—É—á–∞–π–Ω—É—é –∞–Ω–∞–≥—Ä–∞–º–º—É.
# import random
# a = list(input())
# random.shuffle(a)
# print(''.join(a))
#


# —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è random –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –∏–≥—Ä—ã –≤ –±–∏–Ω–≥–æ.
# import random
# num = random.sample(range(1, 76), 25)
# num[12] = 0
# for i in range(len(num)):
#     print(str(num[i]).ljust(3), end = '')
#     if i in [4, 9, 14, 19]:
#         print()


# –¢–∞–π–Ω—ã–π –¥—Ä—É–≥ üå∂Ô∏è
# from random import *
# fri = [input() for _ in range(int(input()))]
# fricop = fri.copy()
# a = 0
# def rand(a, b):
# 	r = 0
# 	for i, j in zip(a, b):
# 		if i!=j:
# 			r+=1
# 	return r
# while a != len(fri):
# 	shuffle(fricop)
# 	a = rand(fri, fricop)
# for k, l in zip(fri, fricop):
# 	print(k,'-',l)


# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π 1
# import random
# n, m = int(input()), int(input())
# s = [i for i in '23456789']
# s.extend([chr(i) for i in range(ord('a'), ord('z')) if i not in [ord('l'),ord('i'), ord('o')] ])
# s.extend([chr(i) for i in range(ord('A'), ord('Z')) if i not in [ord('L'),ord('I'), ord('O')] ])
# for _ in range(n):
#     random.shuffle(s)
#     p = ""
#     for i in range(m):
#         p += s[i][0]
#     print(p)

# from string import *
# from random import sample
#
# LETTER = ''.join((set(ascii_letters) | set(digits)) - set('lI1oO0'))
#
# def generate_password(length):
#     return ''.join(sample(LETTER, length))
#
# def generate_passwords(count, length):
#     return [generate_password(length) for _ in range(count)]
#
# n, m = int(input()), int(input())
# print(*generate_passwords(n, m), sep='\n')

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π 2 üå∂Ô∏è
# import string
# import random
# def generate_password(length):
#     s = ''.join([i for i in (string.printable[:62]) if i not in '10OolI'])
#     return (''.join(random.sample(s[:8], 1) + random.sample(s[8:30], 1) + random.sample(s[30:], length - 2)))
# def generate_passwords(count):
#     return [generate_password(m) for _ in range(count)]
# n, m = int(input()), int(input())
# print(*generate_passwords(n), sep='\n')

# import random
#
# n = 10 ** 6
# k = 0
# s0 = 16
# for _ in range(n):
#     x = random.uniform(-2, 2)  # —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π –æ—Ç 0 –¥–æ 1
#     y = random.uniform(-2, 2)  # —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π –æ—Ç 0 –¥–æ 1
#
#     if x ** 3 + y ** 4 + 2 >= 0 and 3 * x + y ** 2 <= 2:  # –µ—Å–ª–∏ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –Ω—É–∂–Ω—É—é –æ–±–ª–∞—Å—Ç—å
#         k += 1
#
# print((k / n) * s0)

# import random
#
# n = 10 ** 6
# k = 0
# s0 = 4
# for _ in range(n):
#     x = random.uniform(-1, 1)  # —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π –æ—Ç 0 –¥–æ 1
#     y = random.uniform(-1, 1)  # —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π –æ—Ç 0 –¥–æ 1
#
#     if x ** 2 + y ** 2 <= 1:  # –µ—Å–ª–∏ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –Ω—É–∂–Ω—É—é –æ–±–ª–∞—Å—Ç—å
#         k += 1
#
# print((k / n) * s0)

# –ë–æ–ª–æ—Ç–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
# import random
#
# def is_sort(nums):                   # –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ª–∏ —Å–ø–∏—Å–æ–∫?
#     for i in range(len(nums) - 1):
#         if nums[i] > nums[i + 1]:
#             return False
#     return True
#
# def bogosort(nums):                  # —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –±–æ–ª–æ—Ç–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
#     while not is_sort(nums):
#         random.shuffle(nums)
#     return nums
#
# numbers = list(range(10))
# random.shuffle(numbers)              # –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
# print(numbers)                       # –≤—ã–≤–æ–¥–∏–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
#
# sorted_numbers = bogosort(numbers)
#
# print(sorted_numbers)

# 13.1 –ú–æ–¥—É–ª—å decimal
# from decimal import *
#
# s = '9.73 8.84 8.92 9.60 9.32 8.97 8.53 1.26 6.62 9.85 1.85 1.80 0.83 6.75 9.74 9.11 9.14 5.03 5.03 1.34 3.52 8.09 7.89 8.24 8.23 5.22 0.30 2.59 1.25 6.24 2.14 7.54 5.72 2.75 2.32 2.69 9.32 8.11 4.53 0.80 0.08 9.36 5.22 4.08 3.86 5.56 1.43 8.36 6.29 5.13'
# numbers = sorted([Decimal(i) for i in s.split()])
# print(sum(numbers))
# print(*numbers[-1:-6:-1])

# from decimal import *
# num = abs(Decimal(input()))
# if num < 1:
#     a = num.as_tuple().digits
#     print(max(a))
# else:
#     print(max(num.as_tuple().digits) + min(num.as_tuple().digits))
#
#
# from decimal import *
# num = Decimal(input())
# cyphers = num.as_tuple().digits
# print(max(cyphers) + min(cyphers) * (abs(num) >= 1))

# from decimal import *
#
# d = Decimal(input())
# print(Decimal.sqrt(d) + Decimal.exp(d) + Decimal.ln(d) + Decimal.log10(d))


# 13.2 –ú–æ–¥—É–ª—å fractions
# from fractions import Fraction
## num1 = Fraction(3, 4)     # 3 - —á–∏—Å–ª–∏—Ç–µ–ª—å, 4 - –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å
# num2 = Fraction('0.55')
# num3 = Fraction('1/9')
## print(num1, num2, num3, sep='\n')

# from fractions import Fraction
# num1 = Fraction(5, 1)        # 5/1 = 5
# num2 = Fraction(23, 23)      # 23/23 = 1
# print(num1, num2, sep='\n')


# C–≤–æ–π—Å—Ç–≤–∞ numerator –∏ denominator
# –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Å–ª–∏—Ç–µ–ª—è –∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—è Fraction —á–∏—Å–ª–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–≤–æ–π—Å—Ç–≤–∞ numerator –∏ denominator.
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
#
# from fractions import Fraction
# num = Fraction('5/16')
# print('–ß–∏—Å–ª–∏—Ç–µ–ª—å –¥—Ä–æ–±–∏ —Ä–∞–≤–µ–Ω:', num.numerator)
# print('–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å –¥—Ä–æ–±–∏ —Ä–∞–≤–µ–Ω:', num.denominator)
# –≤—ã–≤–æ–¥–∏—Ç:
# –ß–∏—Å–ª–∏—Ç–µ–ª—å –¥—Ä–æ–±–∏ —Ä–∞–≤–µ–Ω: 5
# –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å –¥—Ä–æ–±–∏ —Ä–∞–≤–µ–Ω: 16


# –í Python 3.8 –ø–æ—è–≤–∏–ª—Å—è –º–µ—Ç–æ–¥ as_integer_ratio(), –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ —á–∏—Å–ª–∏—Ç–µ–ª—è
# –∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—è –¥–∞–Ω–Ω–æ–≥–æ Fraction —á–∏—Å–ª–∞.
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
# from fractions import Fraction
# num = Fraction('-5/16')
# print(num.as_integer_ratio())
# –≤—ã–≤–æ–¥–∏—Ç:
# (-5, 16)
#
# –ú–µ—Ç–æ–¥ limit_denominator()
# –ú–µ—Ç–æ–¥ limit_denominator() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º—É—é –±–ª–∏–∑–∫—É—é –∫ –¥–∞–Ω–Ω–æ–º—É —á–∏—Å–ª—É —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –¥—Ä–æ–±—å
# —á–µ–π –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞.
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
# from fractions import Fraction
# import math
# print('PI =', math.pi)
# num = Fraction(str(math.pi))
# print('No limit =', num)
# for d in [1, 5,  50, 90, 100, 500, 1000000]:
#     limited = num.limit_denominator(d)
#     print(limited)
# –≤—ã–≤–æ–¥–∏—Ç:
# PI = 3.141592653589793
# No limit = 3141592653589793/1000000000000000
# 3
# 16/5
# 22/7
# 267/85
# 311/99
# 355/113
# 3126535/995207
# –ú–µ—Ç–æ–¥ limit_denominator() –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –æ—á–µ–Ω—å —Ç–æ—á–Ω—ã–µ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è –∏—Ä—Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª,
# —á—Ç–æ –æ—á–µ–Ω—å —É–¥–æ–±–Ω–æ –≤–æ –º–Ω–æ–≥–∏—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á–∞—Ö.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π —Ä–∞–∑ –Ω–µ –ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥:
# from fractions import Fraction as F
# num1 = F('1/5') + F('3/2')
# num2 = F('1/4') * F('2/5')
# print(num1)
# print(num2)


# from fractions import Fraction
#
# numbers = ['6.34', '4.08', '3.04', '7.49', '4.45', '5.39', '7.82', '2.76', '0.71', '1.97', '2.54', '3.67', '0.14',
#            '4.29', '1.84', '4.07', '7.26', '9.37', '8.11', '4.30', '7.16', '2.46', '1.27', '0.29', '5.12', '4.02',
#            '6.95', '1.62', '2.26', '0.45', '6.91', '7.39', '0.52', '1.88', '8.38', '0.75', '0.32', '4.81', '3.31',
#            '4.63', '7.84', '2.25', '1.10', '3.35', '2.05', '7.87', '2.40', '1.20', '2.58', '2.46']
#
# # for i in numbers:
# #     print(f'{i} = {Fraction(i)}')
#
# [print(f'{i} = {Fraction(i)}') for i in numbers]

# –≤—ã–≤–µ–ª —Å—É–º–º—É –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ –∏ –Ω–∞–∏–º–µ–Ω—å—à–µ–≥–æ —á–∏—Å–ª–∞ –≤ –≤–∏–¥–µ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–æ–π –¥—Ä–æ–±–∏
# from fractions import Fraction as F
# from decimal import Decimal as D
# s = '0.78 4.3 9.6 3.88 7.08 5.88 0.23 4.65 2.79 0.90 4.23 2.15 3.24 8.57 0.10 8.57 1.49 5.64 3.63 8.36 1.56 6.67 1.46 5.26 4.83 7.13 1.22 1.02 7.82 9.97 5.40 9.79 9.82 2.78 2.96 0.07 1.72 7.24 7.84 9.23 1.71 6.24 5.78 5.37 0.03 9.60 8.86 2.73 5.83 6.50 0.123 0.00021'
# print(F(D(min(s.split())) + D(max(s.split()))))

# # –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥—Ä–æ–±—å
# from fractions import Fraction as F
# print(F(int(input()), int(input())))

# –û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –¥—Ä–æ–±—è–º–∏
# from fractions import Fraction as F
#
# a, b = input(), input()
# print(f'{a} + {b} = {F(a)+F(b)}')
# print(f'{a} - {b} = {F(a)-F(b)}')
# print(f'{a} * {b} = {F(a)*F(b)}')
# print(f'{a} / {b} = {F(a)/F(b)}')


# # –°—É–º–º–∞ –¥—Ä–æ–±–µ–π 1
# from fractions import Fraction
# n = int(input())
# p = 0
# for i in range(1, n + 1):
#     a = Fraction(1, i) ** 2
#     p += a
# print(Fraction(p))

# –°—É–º–º–∞ –¥—Ä–æ–±–µ–π 2
# from fractions import Fraction as F
#
#
# def fact(n):
#     res = 1
#     for i in range(1, n + 1): res *= i
#     return res
#
#
# n = int(input())
# print(sum([F(1, fact(i)) for i in range(1, n + 1)]))

# # –Æ–Ω—ã–π –º–∞—Ç–µ–º–∞—Ç–∏–∫ üå∂Ô∏è
# from fractions import Fraction
# from math import gcd
#
# n = int(input())
#
# for i in range((n-1)//2, 0, -1):
#     if gcd(i, n-i) == 1:
#         print(Fraction(i, n-i))
#         break

# # –£–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–µ –¥—Ä–æ–±–∏
# from math import gcd
# from fractions import Fraction
# n = int(input())
# result = []
# while n != 1:
#     for i in range(1, n):
#         if gcd(i, n) == 1:
#             result.append(f'{i}/{n}')
#     n -= 1
# answer = sorted(map(Fraction, result))
# print(*answer, sep='\n')

# matrix() ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É 1 \times 11√ó 1, –≤ –∫–æ—Ç–æ—Ä–æ–π –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ —Ä–∞–≤–Ω–æ –Ω—É–ª—é;
# matrix(n) ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É n \times nn√ó n, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é –Ω—É–ª—è–º–∏;
# matrix(n, m) ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –∏–∑ nn —Å—Ç—Ä–æ–∫ –∏ mm —Å—Ç–æ–ª–±—Ü–æ–≤, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é –Ω—É–ª—è–º–∏;
# matrix(n, m, value) ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –∏–∑ nn —Å—Ç—Ä–æ–∫ –∏ mm —Å—Ç–æ–ª–±—Ü–æ–≤, –≤ –∫–æ—Ç–æ—Ä–æ–π –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ä–∞–≤–µ–Ω —á–∏—Å–ª—É value.
#
# def matrix(n=1, m=0, a=0):
#     if n == 1 and not m:
#         m = 1
#     elif n != 1 and not m:
#         m = n
#     return [[a] * m for _ in range(n)]

# 15.2 –§—É–Ω–∫—Ü–∏–∏ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
# def my_sum(*args):
#     return sum(args)
#
# print(my_sum(*[1, 2, 3, 4, 5]))   #  —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞
# print(my_sum(*(1, 2, 3)))         #  —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∫–æ—Ä—Ç–µ–∂–∞
# print(my_sum(1, 2, *[3, 4, 5], *(7, 8, 9), 10))

# –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –≤ –≤–∏–¥–µ *args, –ø—Ä–∏—á—ë–º –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.
# –¢–∞–∫–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–ª—è –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –¢–æ–ª—å–∫–æ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
# –ø–æ–ª—É—á–∞—é—Ç—Å—è –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–º–µ–Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–ª—é—á–∞—Ö.
# –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ my_func():
#
# def my_func(**kwargs):
#     print(type(kwargs))
#     print(kwargs)
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
#
# my_func()
# my_func(a=1, b=2)
# my_func(name='Timur', job='Teacher')
# –≤—ã–≤–æ–¥–∏—Ç:
#
# <class 'dict'>
# {}
# <class 'dict'>
# {'a': 1, 'b': 2}
# <class 'dict'>
# {'name': 'Timur', 'job': 'Teacher'}

# # –ü–µ—Ä–µ–¥–∞—á–∞ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–µ —Å–ª–æ–≤–∞—Ä—è
# –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ my_func():
#
# def my_func(**kwargs):
#     print(type(kwargs))
#     print(kwargs)
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
#
# info = {'name':'Timur', 'age':'28', 'job':'teacher'}
#
# my_func(**info)
# –≤—ã–≤–æ–¥–∏—Ç:
#
# <class 'dict'>
# {'name': 'Timur', 'age': '28', 'job': 'teacher'}
#

# def func(*args):
#     return max(args) + min(args)
#
#
# print(func(10, 15, *[31, 42, 5, 1], *(17, 28, 19, 100), 13, 12))

# def count_args(*args):
#     return len(args)

# –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–≤—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤.
# def sq_sum(*args):
#     return sum(i ** 2 for i in args)


# –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö
# –≤ –Ω–µ–µ —á–∏—Å–ª–æ–≤—ã—Ö (int –∏–ª–∏ float) –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.

# def mean(*args):
#     sp = [i for i in args if type(i) == int or type(i) == float]
#     if len(sp) != 0:
#         return sum(sp)/len(sp)
#     else:
#         return 0.0
#
# print(mean())
# print(mean(7))
# print(mean(1.5, True, ['stepik'], 'beegeek', 2.5, (1, 2)))
# print(mean(True, ['stepik'], 'beegeek', (1, 2)))
# print(mean(-1, 2, 3, 10, ('5')))
# print(mean(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))


# –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–æ–∫ –∏–º–µ–Ω (–∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–Ω–æ)
# –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—Ä–∞–∑—Ü–æ–º.
# def greet(name, *args):
#     sp = ' and '.join((name,) + args)
#     return f"Hello, {sp}!"


# –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–ª—é–±–∞—è –Ω–µ–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞) –ø–æ –æ–±—Ä–∞–∑—Ü—É: <–Ω–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞>) <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞>
# (–Ω—É–º–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –µ–¥–∏–Ω–∏—Ü—ã). –ï—Å–ª–∏ —Å—Ä–µ–¥–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞,
# –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤.

# def print_products(*products):
#     filtered = [product for product in products if product and isinstance(product, str)]
#     if filtered:
#         for indx, product in enumerate(filtered, 1):
#             print(f"{indx}) {product}")
#     else:
#         print("–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤")

# def print_products(*args):
#     i = 0
#     for elem in args:
#         if type(elem) is str and elem:
#             i += 1
#             print(f'{i}) {elem}')
#     if not i: print('–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤')
#
#
#
# print_products('–ë–∞–Ω–∞–Ω—ã', [1, 2], ('Stepik',), '–Ø–±–ª–æ–∫–∏', '', '–ú–∞–∫–∞—Ä–æ–Ω—ã', 5, True)


# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é info_kwargs(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
# –∏ –ø–µ—á–∞—Ç–∞–µ—Ç –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—Ä–∞–∑—Ü–æ–º: <–∏–º—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞>: <–∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞>,
# –ø—Ä–∏ —ç—Ç–æ–º –∏–º–µ–Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Å–ª–µ–¥—É—é—Ç –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é).
# def info_kwargs(**kwargs):
#     for key, value in sorted(kwargs.items()):
#         print(key + ": " + str(value))


# –î–∞–Ω —Å–ø–∏—Å–æ–∫ numbers, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ—Ä—Ç–µ–∂–∏ —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö
# —Ñ—É–Ω–∫—Ü–∏–π min() –∏ max() –≤—ã–≤–æ–¥–∏—Ç —Ç–µ –∫–æ—Ä—Ç–µ–∂–∏ (–∫–∞–∂–¥—ã–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ), –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ
# –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.

# numbers = [(10, 10, 10), (30, 45, 56), (81, 39), (1, 2, 3), (12,), (-2, -4, 100), (1, 2, 99), (89, 9, 34),
#            (10, 20, 30, -2), (50, 40, 50), (34, 78, 65), (-5, 90, -1, -5), (1, 2, 3, 4, 5, 6), (-9, 8, 4),
#            (90, 1, -45, -21)]
#
# def f(x):
#     return sum(x)/len(x)
#
# print(min(numbers, key=f))
# print(max(numbers, key=f))

#
# points = [(-1, 1), (5, 6), (12, 0), (4, 3), (0, 1), (-3, 2), (0, 0), (-1, 3), (2, 0), (3, 0), (-9, 1), (3, 6), (8, 8)]
# def f(n):
#     return 0.5 ** (n[0] ** 2 + n[1] ** 2)
#
# points.sort(key=f, reverse=True)
# print(points)

# numbers = [(10, 10, 10), (30, 45, 56), (81, 80, 39), (1, 2, 3), (12, 45, 67), (-2, -4, 100), (1, 2, 99), (89, 90, 34), (10, 20, 30), (50, 40, 50), (34, 78, 65), (-5, 90, -1)]
# f = lambda x: min(x) + max(x)
# numbers.sort(key=f)
#
# print(numbers)

# –°–æ—Ä—Ç–∏—Ä—É–π –∫–∞–∫ —Ö–æ—á–µ—à—å
# v = int(input())
# athletes = [('–î–∏–º–∞', 10, 130, 35), ('–¢–∏–º—É—Ä', 11, 135, 39), ('–†—É—Å–ª–∞–Ω', 9, 140, 33), ('–†—É—Å—Ç–∞–º', 10, 128, 30),
#             ('–ê–º–∏—Ä', 16, 170, 70), ('–†–æ–º–∞', 16, 188, 100), ('–ú–∞—Ç–≤–µ–π', 17, 168, 68), ('–ü–µ—Ç—è', 15, 190, 90)]
# stroka = sorted(athletes, key=lambda x: x[v - 1])
# for i in stroka:
#     print(*i)


# –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# from math import *
# def get_res(n, f):
#     funcs = {'–∫–≤–∞–¥—Ä–∞—Ç': n**2,
#              '–∫—É–±': n**3,
#              '–∫–æ—Ä–µ–Ω—å': n**0.5,
#              '–º–æ–¥—É–ª—å': abs(n),
#              '—Å–∏–Ω—É—Å': sin(n)}
#     return funcs[f]
# a, b = int(input()), input().lower()
# print(get_res(a, b))

# –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞-1
# nums = input().split()
# def cmp(num):
#     n = [int(i) for i in num]
#     return sum(n)
# nums.sort(key=cmp)
# print(*nums)


# # –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞-2
# def sum_nums(numstr):
#     nums = list(map(int, list(numstr)))
#     return sum(nums), int(numstr)
#
# s = input().split()
# print(*sorted(s, key=sum_nums))

# 15.5 –§—É–Ω–∫—Ü–∏–∏ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞

# –§—É–Ω–∫—Ü–∏—è map()
# def f(x):
#     return x**2     # —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç x
#
#
# old_list = [1, 2, 4, 9, 10, 25]
# new_list = []
# for item in old_list:
#     new_item = f(item)
#     new_list.append(new_item)
#
# print(old_list)
# print(new_list)
# –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞–±–æ—Ç—ã —Ç–∞–∫–æ–≥–æ –∫–æ–¥–∞ –±—É–¥–µ—Ç:
#
# [1, 2, 4, 9, 10, 25]
# [1, 4, 16, 81, 100, 625]

# –ù–µ—Å–ª–æ–∂–Ω–æ –ø–æ–Ω—è—Ç—å, —á—Ç–æ —Ü–∏–∫–ª –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤–æ –≤—Å–µ—Ö —Å–ª—É—á–∞—è—Ö.
# –ú–µ–Ω—è—Ç—å—Å—è –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, —Ç–æ –µ—Å—Ç—å –ø—Ä–∏–º–µ–Ω—è–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è f().

# def map(function, items):
#     result = []
#     for item in items:
#         new_item = function(item)
#         result.append(new_item)
#     return result
# # –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º —Å–æ–≤–µ—Ä—à–∞—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞ map().
# def square(x):
#     return x**2
#
#
# def cube(x):
#     return x**3
#
#
# numbers = [1, 2, -3, 4, -5, 6, -9, 0]
#
# strings = map(str, numbers)        # –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—è - —Ñ—É–Ω–∫—Ü–∏—é str
# abs_numbers = map(abs, numbers)    # –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—è - —Ñ—É–Ω–∫—Ü–∏—é abs
#
# squares = map(square, numbers)     # –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—è - —Ñ—É–Ω–∫—Ü–∏—é square
# cubes = map(cube, numbers)         # –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—è - —Ñ—É–Ω–∫—Ü–∏—é cube
#
# print(strings)
# print(abs_numbers)
# print(squares)
# print(cubes)


# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è map() –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤—ã—à–µ:
#
# strings = ['10', '12', '-4', '-9', '0', '1', '23', '100', '99']
#
# numbers1 = [int(c) for c in strings]   # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
# numbers2 = map(int, strings)               # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é map() –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
#
# print(numbers1)
# print(numbers2)
# –≤—ã–≤–æ–¥–∏—Ç:
#
# [10, 12, -4, -9, 0, 1, 23, 100, 99]
# [10, 12, -4, -9, 0, 1, 23, 100, 99]

# –¶–µ–ø–æ—á–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
# –ú—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ–º —Å—Ç—Ä–æ–∏—Ç—å —Ü–µ–ø–æ—á–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π, –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã–∑—ã–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—é map().
#
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è map() –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤—ã—à–µ:
#
# numbers = ['-1', '20', '3', '-94', '65', '6', '-970', '8']
#
# new_numbers = map(abs, map(int, numbers))
#
# print(new_numbers)
# –≤—ã–≤–æ–¥–∏—Ç:
#
# [1, 20, 3, 94, 65, 6, 970, 8]
# –¢–æ –µ—Å—Ç—å, —Å–Ω–∞—á–∞–ª–∞ –º—ã –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –≤ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª —Å –ø–æ–º–æ—â—å—é –∫–æ–¥–∞ map(int, numbers),
# –ø–æ–ª—É—á–∞—è —Å–ø–∏—Å–æ–∫ [-1, 20, 3, -94, 65, 6, -970, 8]. –î–∞–ª–µ–µ —Å –ø–æ–º–æ—â—å—é –µ—â–µ –æ–¥–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ map()
# —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ø–∏—Å–æ–∫ [1, 20, 3, 94, 65, 6, 970, 8].
#

# –§—É–Ω–∫—Ü–∏—è filter()
# def filter(function, items):
#     result = []
#     for item in items:
#         if function(item):
#             result.append(item)  # –¥–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç item –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è function –≤–µ—Ä–Ω—É–ª–∞ –∑–Ω–∞—á–µ–Ω–∏–µ True
#     return result

# –ù–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ–±—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —á–∏—Å–µ–ª –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏, –±–æ–ª—å—à–∏–º–∏ 10, –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–∞–∫–æ–π –∫–æ–¥:
#
# def is_greater10(num):   # —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 10 –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
#     return num > 10
#
#
# numbers = [12, 2, -30, 48, 51, -60, 19, 10, 13]
#
# large_numbers = filter(is_greater10, numbers)   #  —Å–ø–∏—Å–æ–∫ large_numbers —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã, –±–æ–ª—å—à–∏–µ 10
#
# print(large_numbers)
# –≠—Ç–æ—Ç –∫–æ–¥, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è filter() –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤—ã—à–µ –≤—ã–≤–æ–¥–∏—Ç:
#
# [12, 48, 51, 19, 13]

# –§—É–Ω–∫—Ü–∏—è reduce()
# –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–∏ map() –∏ filter() —Ä–∞–±–æ—Ç–∞–ª–∏ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Å–ø–∏—Å–∫–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ.
# –ù–æ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ü–∏–∫–ª—ã —Å –∞–≥—Ä–µ–≥–∞—Ü–∏–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ‚Äî —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏
# –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç–∞-–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞.
# # –¢–∏–ø–∏—á–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ ‚Äî —Å—É–º–º–∞ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –∏—Ö –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ.
# # –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
#
# numbers = [1, 2, 3, 4, 5]
# # total = 0
# product = 1
# # for num in numbers:
#     total += num
#     product *= num
# # print(total)
# print(product)
# –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—É–º–º—É –∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç:
# # 15
# 120

# –° —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ —Å—É–º–º–∞ 1 + 2 + 3 + 4 + 5 –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∞ –∫–∞–∫:
# (((((0+1)+2)+3)+4)+5).
# –ù–æ–ª—å –∑–¥–µ—Å—å —Ç–æ—Ç —Å–∞–º—ã–π –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä, —Ç–æ—á–Ω–µ–µ –µ–≥–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –û–Ω –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫ —Å—É–º–º–µ –Ω–∏—á–µ–≥–æ, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–µ—Ç
# —Å–ª—É–∂–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–Ω–æ–π —Ç–æ—á–∫–æ–π. –ê –µ—â–µ –±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º, –µ—Å–ª–∏ –≤—Ö–æ–¥–Ω–æ–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.
# –ù–µ—Å–ª–æ–∂–Ω–æ –ø–æ–Ω—è—Ç—å, —á—Ç–æ —ç—Ç–æ—Ç —Ü–∏–∫–ª –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤–æ –≤—Å–µ—Ö —Å–ª—É—á–∞—è—Ö. –ú–µ–Ω—è—Ç—å—Å—è –±—É–¥–µ—Ç
# —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ (0 –¥–ª—è —Å—É–º–º—ã, 1 –¥–ª—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏ —Ç.–¥.) –∏ –æ–ø–µ—Ä–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è
# –∫–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∏ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä. –¢–∞–∫ –ø–æ—á–µ–º—É –±—ã –Ω–µ –æ–±–æ–±—â–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–¥? –¢–∞–∫ –∏ —Å–¥–µ–ª–∞–µ–º:

# def reduce(operation, items, initial_value):
#     acc = initial_value
#     for item in items:
#         acc = operation(acc, item)
#     return acc
# # –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è reduce() –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤—ã—à–µ:
#
# def add(x, y):
#     return x+y
# def mult(x, y):
#     return x*y
# numbers = [1, 2, 3, 4, 5]
# total = reduce(add, numbers, 0)
# product = reduce(mult, numbers, 1)
# print(total)
# print(product)
# # –≤—ã–≤–æ–¥–∏—Ç:
# # 15
# # 120
# #
# words = ['abba', 'qwerty', 'python', 'a', 'deed', 'nun', 'level', 'deified', 'bbbbb', 'mother', 'surface', 'sister']
#
# words_len = map(len, words)
# print(max(words_len))
#

# —Ñ—É–Ω–∫—Ü–∏—è —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª - –≤–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–≤ –≤ —Å–ø–∏—Å–∫–µ
#
# def predicate(word):
#     return word == word[::-1]
#
#
# words = ['abba', 'qwerty', 'python', 'a', 'deed', 'nun', 'level', 'language', 'deified', 'bbbbb', 'mother', 'sister', 'surface', '1234321']
# filtered = filter(predicate, words)
# print(len(filtered))
# –§—É–Ω–∫—Ü–∏—è filter():
#
# def filter(function, items):
#     result = []
#     for item in items:
#         if function(item):
#             result.append(item)
#     return result
#

# numbers = [-2, 45, 45, -7, -45, 37, -42, 27, -58, -58, -12, -27, -49, -27, -56, 4, -99, -11, 86]
#
# var1 = max(numbers, key=abs)
# var2 = min(map(abs, numbers))
# print(var1 + var2)

# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ map() –æ–∫—Ä—É–≥–ª—è–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ numbers –¥–æ 2 –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
# –∞ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏—Ç –∏—Ö, –∫–∞–∂–¥—ã–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
#
# def map(function, items):
#     result = []
#     for item in items:
#         result.append(function(item))
#     return result
#
#
# numbers = [3.56773, 5.57668, 4.00914, 56.24241, 9.01344, 32.12013, 23.22222, 90.09873, 45.45, 314.1528, 2.71828,
#            1.41546]
# result = map(lambda x: round(x, 2), numbers)
#
# for elem in result:
#     print(elem)

# # –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–π filter() –∏ map() –æ—Ç–±–∏—Ä–∞–µ—Ç –∏–∑ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
# # numbers —Ç—Ä—ë—Ö–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞, –¥–∞—é—â–∏–µ –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ –Ω–∞ 5 –æ—Å—Ç–∞—Ç–æ–∫ 2, –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ö –∫—É–±—ã, –∫–∞–∂–¥—ã–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
# def map(function, items):
#     result = []
#     for item in items:
#         result.append(function(item))
#     return result
#
#
# def filter(function, items):
#     result = []
#     for item in items:
#         if function(item):
#             result.append(item)
#     return result
#
#
# numbers = [1014, 1321, 675, 1215, 56, 1386, 1385, 431, 1058, 486, 1434, 696, 1016, 1084, 424, 1189, 475, 95, 1434, 1462,
#            815, 776, 657, 1225, 912, 537, 1478, 1176, 544, 488, 668, 944, 207, 266, 1309, 1027, 257, 1374, 1289, 1155,
#            230, 866, 708, 144, 1434, 1163, 345, 394, 560, 338, 232, 182, 1438, 1127, 928, 1309, 98, 530, 1013, 898, 669,
#            105, 130, 1363, 947, 72, 1278, 166, 904, 349, 831, 1207, 1496, 370, 725, 926, 175, 959, 1282, 336, 1268, 351,
#            1439, 186, 273, 1008, 231, 138, 142, 433, 456, 1268, 1018, 1274, 387, 120, 340, 963, 832, 1127]
#
#
# def tu(a):
#     return a % 5 == 2 and len(str(a)) == 3
#
#
# def coub(x):
#     return x ** 3
#
#
# map(print, map(coub, filter(tu, numbers)))


# –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞ —Å—É–º–º—ã –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ numbers.
# def reduce(operation, items, initial_value):
#     acc = initial_value
#     for item in items:
#         acc = operation(acc, item)
#     return acc
#
# numbers = [97, 42, 9, 32, 3, 45, 31, 77, -1, 11, -2, 75, 5, 51, 34, 28, 46, 1, -8, 84, 16, 51, 90, 56, 65, 90, 23, 35, 11, -10, 70, 90, 90, 12, 96, 58, -8, -4, 91, 76, 94, 60, 72, 43, 4, -6, -5, 51, 58, 60, 30, 38, 67, 62, 36, 72, 34, 82, 62, -1, 60, 82, 87, 81, -7, 57, 26, 36, 17, 43, 80, 40, 75, 94, 91, 64, 38, 72, 29, 84, 38, 35, 7, 54, 31, 95, 78, 27, 82, 1, 64, 94, 31, 29, -8, 98, 24, 61, 7, 73]
#
# print (sum([pow(elem, 2) for elem in numbers]))

# –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞ —Å—É–º–º—ã –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –¥–≤—É–∑–Ω–∞—á–Ω—ã—Ö —á–∏—Å–µ–ª, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª—è—Ç—Å—è –Ω–∞ 7 –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞.
# numbers = [77, 293, 28, 242, 213, 285, 71, 286, 144, 276, 61, 298, 280, 214, 156, 227, 228, 51, -4, 202, 58, 99, 270,
#            219, 94, 253, 53, 235, 9, 158, 49, 183, 166, 205, 183, 266, 180, 6, 279, 200, 208, 231, 178, 201, 260, -35,
#            152, 115, 79, 284, 181, 92, 286, 98, 271, 259, 258, 196, -8, 43, 2, 128, 143, 43, 297, 229, 60, 254, -9, 5,
#            187, 220, -8, 111, 285, 5, 263, 187, 192, -9, 268, -9, 23, 71, 135, 7, -161, 65, 135, 29, 148, 242, 33, 35,
#            211, 5, 161, 46, 159, 23, 169, 23, 172, 184, -7, 228, 129, 274, 73, 197, 272, 54, 278, 26, 280, 13, 171, 2,
#            79, -2, 183, 10, 236, 276, 4, 29, -10, 41, 269, 94, 279, 129, 39, 92, -63, 263, 219, 57, 18, 236, 291, 234,
#            10, 250, 0, 64, 172, 216, 30, 15, 229, 205, 123, -105]
# print (sum([pow(elem, 2) for elem in numbers if abs(elem)//100 == 0 and abs(elem)//10 > 0 and elem%7==0]))


# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é func_apply(), –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –Ω–∞ –≤—Ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏—é –∏ —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é —Å–ø–∏—Å–æ–∫,
# –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∫ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É —Å–ø–∏—Å–∫—É.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è func_apply() –Ω–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
#
# def add3(x):
#     return x + 3
#
#
# def mul7(x):
#     return x * 7
#
#
# print(func_apply(mul7, [1, 2, 3, 4, 5, 6]))
# print(func_apply(add3, [1, 2, 3, 4, 5, 6]))
# print(func_apply(str, [1, 2, 3, 4, 5, 6]))
# –¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
#
# [7, 14, 21, 28, 35, 42]
# [4, 5, 6, 7, 8, 9]
# ['1', '2', '3', '4', '5', '6']


# –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è map()
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
# circle_areas = [3.56773, 5.57668, 4.31914, 6.20241, 91.01344, 32.01213]
#
# result1 = list(map(round, circle_areas, [1]*6))         # –æ–∫—Ä—É–≥–ª—è–µ–º —á–∏—Å–ª–∞ –¥–æ 1 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
# result2 = list(map(round, circle_areas, range(1, 7)))   # –æ–∫—Ä—É–≥–ª—è–µ–º —á–∏—Å–ª–∞ –¥–æ 1,2,...,6 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
#
# print(circle_areas)
# print(result1)
# print(result2)
# –≤—ã–≤–æ–¥–∏—Ç:
#
# [3.56773, 5.57668, 4.31914, 6.20241, 91.01344, 32.01213]
# [3.6, 5.6, 4.3, 6.2, 91.0, 32.0]
# [3.6, 5.58, 4.319, 6.2024, 91.01344, 32.01213]

# –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è filter()

# –í –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ func —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è —Ç–µ–∫—É—â–∏–π
# —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –í–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ func –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ True –∏–ª–∏ False.
# –î–ª—è –ø—Ä–∏–º–µ—Ä–∞, —É–¥–∞–ª–∏–º –≤—Å–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞.
#
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
# # def func(elem):
#     return elem >= 0
# numbers = [-1, 2, -3, 4, 0, -20, 10]
# positive_numbers = list(filter(func, numbers))  #  –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä –≤ —Å–ø–∏—Å–æ–∫
# print(positive_numbers)
# –≤—ã–≤–æ–¥–∏—Ç:
# [2, 4, 0, 10]

# –§—É–Ω–∫—Ü–∏—è reduce()
# –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ reduce() –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å functools.
# –§—É–Ω–∫—Ü–∏—è reduce() –∏–º–µ–µ—Ç —Å–∏–≥–Ω–∞—Ç—É—Ä—É reduce(func, iterable, initializer=None). –ï—Å–ª–∏ –Ω–∞—á–∞–ª—å–Ω–æ–µ
# –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Ç–æ –≤ –µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ iterable.

# from functools import reduce
#
# def func(a, b):
#     return a + b
#
# numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# total = reduce(func, numbers, 0)   # –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è 0
# print(total)
# –≤—ã–≤–æ–¥–∏—Ç: 55
# –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, —á—Ç–æ –º—ã –º–æ–≥–ª–∏ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Ç–∞–∫:
# total = reduce(func, numbers)   # –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ numbers

# –ú–æ–¥—É–ª—å operator
# –ß—Ç–æ–±—ã –Ω–µ –ø–∏—Å–∞—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–µ —Ç–∞–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ
# –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫–∞–∫ —Å—É–º–º–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ:
#
# def sum_func(a, b):
#     return a + b
#
#
# def mult_func(a, b):
#     return a * b
# –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –º–æ–¥—É–ª—è operator.
# –û–ø–µ—Ä–∞—Ü–∏—è	        –°–∏–Ω—Ç–∞–∫—Å–∏—Å	–§—É–Ω–∫—Ü–∏—è
# Addition	        a + b	    add(a, b)
# Containment Test	obj in seq	contains(seq, obj)
# Division	        a / b	    truediv(a, b)
# Division	        a // b	    floordiv(a, b)
# Exponentiation	a ** b	    pow(a, b)
# Modulo	        a % b	    mod(a, b)
# Multiplication	a * b	    mul(a, b)
# Negation (Arithmetic)	-a	    neg(a)
# Subtraction	    a - b	    sub(a, b)
# Ordering	        a < b	    lt(a, b)
# Ordering	        a <= b	    le(a, b)
# Equality	        a == b	    eq(a, b)
# Difference	    a != b	    ne(a, b)
# Ordering	        a >= b	    ge(a, b)
# Ordering	        a > b	    gt(a, b)

# from operator import *     #  –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
# print(add(10, 20))         #  —Å—É–º–º–∞
# print(floordiv(20, 3))     #  —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ
# print(neg(9))              #  —Å–º–µ–Ω–∞ –∑–Ω–∞–∫–∞
# print(lt(2, 3))            #  –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ <
# print(lt(10, 8))           #  –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ <
# print(eq(5, 5))            #  –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ ==
# print(eq(5, 9))            #  –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ ==

# from functools import reduce
# import operator
# words = ['Testing ', 'shows ', 'the ', 'presence', ', ', 'not ', 'the ', 'absence ', 'of ', 'bugs']
# numbers = [1, 2, -6, -4, 3, 9, 0, -6, -1]
# opposite_numbers = list(map(operator.neg, numbers))    #  —Å–º–µ–Ω–∞ –∑–Ω–∞–∫–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞
# concat_words = reduce(operator.add, words)             #  –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞
# print(opposite_numbers)    #--> [-1, -2, 6, 4, -3, -9, 0, 6, 1]
# print(concat_words)         #--> "Testing shows the presence, not the absence of bugs"

# pets = ['alfred', 'tabitha', 'william', 'arla']
# chars = ['x', 'y', '2', '3', 'a']
#
# uppered_pets = list(map(str.upper, pets))
# capitalized_pets = list(map(str.capitalize, pets))
# only_letters = list(filter(str.isalpha, chars))
#
# print(uppered_pets)
# print(capitalized_pets)
# print(only_letters)
# –≤—ã–≤–æ–¥–∏—Ç:
#
# ['ALFRED', 'TABITHA', 'WILLIAM', 'ARLA']
# ['Alfred', 'Tabitha', 'William', 'Arla']
# ['x', 'y', 'a']
#
#


# 15.7 –ê–Ω–æ–Ω–∏–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏. –ß–∞—Å—Ç—å 1
# def standard_function(x):            #  —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
#     return x*2
# lambda_function = lambda x: x*2      #  –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏

# f1 = lambda: 10 + 20               # —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
# f2 = lambda —Ö, —É: —Ö + —É            # —Ñ—É–Ω–∫—Ü–∏—è —Å –¥–≤—É–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
# f3 = lambda —Ö, —É, z: —Ö + —É + z     # —Ñ—É–Ω–∫—Ü–∏—è —Å —Ç—Ä–µ–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
#
# print(f1())
# print(f2(5, 10))
# print(f3(5, 10, 30))

# def compare_by_second(point):
#     return point[1]
#
# def compare_by_sum(point):
#     return point[0] + point[1]
#
# points = [(1, -1), (2, 3), (-10, 15), (10, 9), (7, 18), (1, 5), (2, -4)]
#
# print(sorted(points, key=compare_by_second))   # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ç–æ—Ä–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –∫–æ—Ä—Ç–µ–∂–∞
# print(sorted(points, key=compare_by_sum))      # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—É–º–º–µ –∫–æ—Ä—Ç–µ–∂–∞

# # –ª–æ–≥–∏—á–Ω–æ –∏—Ö –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
# points = [(1, -1), (2, 3), (-10, 15), (10, 9), (7, 18), (1, 5), (2, -4)]
#
# print(sorted(points, key=lambda point: point[1]))                 # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ç–æ—Ä–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –∫–æ—Ä—Ç–µ–∂–∞
# print(sorted(points, key=lambda point: point[0] + point[1]))      # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—É–º–º–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ—Ä—Ç–µ–∂–∞

# –ü–µ—Ä–µ–¥–∞—á–∞ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥—Ä—É–≥–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º
# numbers = [1, 2, 3, 4, 5, 6]
#
# new_numbers1 = list(map(lambda x: x+1, numbers))      #  —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 1
# new_numbers2 = list(map(lambda x: x*2, numbers))      #  —É–¥–≤–∞–∏–≤–∞–µ–º
# new_numbers3 = list(map(lambda x: x**2, numbers))     #  –≤–æ–∑–≤–æ–¥–∏–º –≤ –∫–≤–∞–¥—Ä–∞—Ç
#
# print(new_numbers1) #--> [2, 3, 4, 5, 6, 7]
# print(new_numbers2)  #-->  [2, 4, 6, 8, 10, 12]
# print(new_numbers3) #-->  [1, 4, 9, 16, 25, 36]

# -----

# strings = ['a', 'b', 'c', 'd', 'e']
# numbers = [3, 2, 1, 4, 5]
# new_strings = list(map(lambda x, y: x*y, strings, numbers))
#
# print(new_strings) #--> ['aaa', 'bb', 'c', 'dddd', 'eeeee']

# ----------
# numbers = [-1, 2, -3, 4, 0, -20, 10, 30, -40, 50, 100, 90]
#
# positive_numbers = list(filter(lambda x: x > 0, numbers))      #  –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞
# large_numbers = list(filter(lambda x: x > 50, numbers))        #  —á–∏—Å–ª–∞, –±–æ–ª—å—à–∏–µ 50
# even_numbers = list(filter(lambda x: x % 2 == 0, numbers))     #  —á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞
#
# print(positive_numbers) #--> [2, 4, 10, 30, 50, 100, 90]
# print(large_numbers) #--> [100, 90]
# print(even_numbers) #--> [2, 4, 0, -20, 10, 30, -40, 50, 100, 90]

# ---------------
# words = ['python', 'stepik', 'beegeek', 'iq-option']
#
# new_words1 = list(filter(lambda w: len(w) > 6, words))    #  —Å–ª–æ–≤–∞ –¥–ª–∏–Ω–æ—é –±–æ–ª—å—à–µ 6 —Å–∏–º–≤–æ–ª–æ–≤
# new_words2 = list(filter(lambda w: 'e' in w, words))      #  —Å–ª–æ–≤–∞ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –±—É–∫–≤—É e
#
# print(new_words1) #--> ['beegeek', 'iq-option']
# print(new_words2) #--> ['stepik', 'beegeek']
#
# -----------------
#
# from functools import reduce
#
# words = ['python', 'stepik', 'beegeek', 'iq-option']
# numbers = [1, 2, 3, 4, 5, 6]
#
# summa = reduce(lambda x, y: x + y, numbers, 0)
# product = reduce(lambda x, y: x * y, numbers, 1)
# sentence = reduce(lambda x, y: x + ' loves ' + y, words, 'Everyone')
#
# print(summa) #--> 21
# print(product) #--> 720
# print(sentence) #-->  Everyone loves python loves stepik loves beegeek loves iq-option

# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
# –ê–Ω–æ–Ω–∏–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞–±–æ—Ç—ã –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π.
#
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º a, \, b, \, ca,b,c —Å—Ç—Ä–æ–∏—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ç—Ä–µ—Ö—á–ª–µ–Ω:
#
# def generator_square_polynom(a, b, c):
#     def square_polynom(x):
#         return a*x**2 + b*x + c
#     return square_polynom
# –¢–∞–∫–æ–π –∫–æ–¥ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ç–∞–∫:
#
# def generator_square_polynom(a, b, c):
#     return lambda x: a*x**2 + b*x + c
# –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —è–≤–ª—è—é—Ç—Å—è –∑–∞–º—ã–∫–∞–Ω–∏—è–º–∏: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è
# –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö a, b, c –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è.


# –£—Å–ª–æ–≤–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –≤ —Ç–µ–ª–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
# –í —Ç–µ–ª–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏–π –∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è
# –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤—Ä–æ–¥–µ —Ü–∏–∫–ª–æ–≤ for –∏ while. –û–¥–Ω–∞–∫–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Ä–Ω–∞—Ä–Ω—ã–π —É—Å–ª–æ–≤–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä.
#
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
#
# numbers = [-2, 0, 1, 2, 17, 4, 5, 6]
#
# result = list(map(lambda x: 'even' if x % 2 == 0 else 'odd', numbers))
#
# print(result)
# –≤—ã–≤–æ–¥–∏—Ç:
#
# ['even', 'even', 'odd', 'even', 'odd', 'even', 'odd', 'even']
# –û–±—â–∏–π –≤–∏–¥ —Ç–µ—Ä–Ω–∞—Ä–Ω–æ–≥–æ —É—Å–ª–æ–≤–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ —Ç–µ–ª–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:
#
# –∑–Ω–∞—á–µ–Ω–∏–µ1 if —É—Å–ª–æ–≤–∏–µ else –∑–Ω–∞—á–µ–Ω–∏–µ2
# –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ1 , –µ—Å–ª–∏ –Ω–µ—Ç ‚Äì –∑–Ω–∞—á–µ–Ω–∏–µ2.
#
#
# –ü–µ—Ä–µ–¥–∞—á–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ –∞–Ω–æ–Ω–∏–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
# –ö–∞–∫ –∏ –æ–±—ã—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ def , –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –≤—Å–µ —Å–ø–æ—Å–æ–±—ã –ø–µ—Ä–µ–¥–∞—á–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤:
#
# –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã;
# –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã;
# –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (*args);
# –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (**kwargs);
# –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã (*).
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
#
# f1 = lambda x, y, z: x + y + z
# f2 = lambda x, y, z=3: x + y + z
# f3 = lambda *args: sum(args)
# f4 = lambda **kwargs: sum(kwargs.values())
# f5 = lambda x, *, y=0, z=0: x + y + z
#
#
# print(f1(1, 2, 3))
# print(f2(1, 2))
# print(f2(1, y=2))
# print(f3(1, 2, 3, 4, 5))
# print(f4(one=1, two=2, three=3))
# print(f5(1))
# print(f5(1, y=2, z=3))

#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π (–ª—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏–π)
# ‚Äì –æ–Ω–∏ —è–≤–ª—è—é—Ç—Å—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏. –ü–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏–∏ –µ–µ –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –∂–µ –≤—ã–∑–≤–∞—Ç—å.
#
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
#
# print((lambda —Ö, —É: —Ö + —É)(5, 10))     # 5 + 10
# print(1 + (lambda x: x*5)(10) + 2)     # 1 + 50 + 2


# numbers = [1, 2, 5, 3, 4]
# numbers.sort(key=lambda x: -x)
# print(numbers)   --> [5, 4, 3, 2, 1]

# –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é func, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
# –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ –æ–Ω –¥–µ–ª–∏—Ç—Å—è –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞ –Ω–∞ 19 –∏–ª–∏ –Ω–∞ 13 –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

# func = lambda x: x % 19 == 0 or x % 13 == 0

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é func, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
# –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫—É—é –±—É–∫–≤—É a
# (—Ä–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤—ã –Ω–µ–≤–∞–∂–µ–Ω) –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
# func = lambda x: x[0].lower() == 'a' and x[-1].lower() == 'a'
# print(func('abcdA'))


# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_non_negative_num, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç
# —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º
# (—Ü–µ–ª—ã–º –∏–ª–∏ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º) –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
# is_non_negative_num = lambda x: set(x.replace('.', '', 1)) <= set('0123456789')
# print(is_non_negative_num('10.34ab'))
# print(is_non_negative_num('10.45'))


# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_num, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
# –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º (—Ü–µ–ª—ã–º –∏–ª–∏ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º) –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
# is_num = lambda x: "-" not in x[1:] and x.replace('.', '', 1).replace("-",'').isdigit()

# words = ['beverage', 'monday', 'abroad', 'bias', 'abuse', 'abolish', 'abuse', 'abuse', 'bid', 'wednesday', 'able', 'betray', 'accident', 'abduct', 'bigot', 'bet', 'abandon', 'besides', 'access', 'friday', 'bestow', 'abound', 'absent', 'beware', 'abundant', 'abnormal', 'aboard', 'about', 'accelerate', 'abort', 'thursday', 'tuesday', 'sunday', 'berth', 'beyond', 'benevolent', 'abate', 'abide', 'bicycle', 'beside', 'accept', 'berry', 'bewilder', 'abrupt', 'saturday', 'accessory', 'absorb']
# print(*sorted(filter(lambda x: len(x) == 6, words)))

# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π map() –∏ filter() —É–¥–∞–ª—è–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ numbers –≤—Å–µ
# –Ω–µ—á–µ—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –±–æ–ª—å—à–∏–µ 47, –∞ –≤—Å–µ —á–µ—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞—Ü–µ–ª–æ –¥–µ–ª–∏—Ç –Ω–∞ –¥–≤–∞ (—Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ ‚Äì //).
# –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞ —Å–ª–µ–¥—É–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª–∏–≤ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–∏–≤ –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫.

# nums = [46, 61, 34, 17, 56, 26, 93, 1, 3, 82, 71, 37, 80, 27, 77, 94, 34, 100, 36, 81, 33, 81, 66, 83, 41, 80, 80, 93,
#         40, 34, 32, 16, 5, 16, 40, 93, 36, 65, 8, 19, 8, 75, 66, 21, 72, 32, 41, 59, 35, 64, 49, 78, 83, 27, 57, 53, 43,
#         35, 48, 17, 19, 40, 90, 57, 77, 56, 80, 95, 90, 27, 26, 6, 4, 23, 52, 39, 63, 74, 15, 66, 29, 88, 94, 37, 44, 2,
#         38, 36, 32, 49, 5, 33, 60, 94, 89, 8, 36, 94, 46, 33]
#
# res = list(map(lambda x: x // 2 if x % 2 == 0 else x, filter(lambda x: x % 2 == 0 or (x % 2 != 0 and x < 47), nums)))
# print(*res)

# –ø—Ä–æ–≥—Ä–∞–º–º—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å–ø–∏—Å–∫–∞ data –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —à—Ç–∞—Ç–∞. –ó–∞—Ç–µ–º
# —Ä–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞, –∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
# data = [(19542209, 'New York'), (4887871, 'Alabama'), (1420491, 'Hawaii'), (626299, 'Vermont'), (1805832, 'West Virginia'), (39865590, 'California'), (11799448, 'Ohio'), (10711908, 'Georgia'), (10077331, 'Michigan'), (10439388, 'Virginia'), (7705281, 'Washington'), (7151502, 'Arizona'), (7029917, 'Massachusetts'), (6910840, 'Tennessee')]
#
# for i in sorted(data, key=lambda x: x[1][-1], reverse=True):
#     print(f"{i[1]}: {i[0]}")


# data = ['–≥–æ–¥', '—á–µ–ª–æ–≤–µ–∫', '–≤—Ä–µ–º—è', '–¥–µ–ª–æ', '–∂–∏–∑–Ω—å', '–¥–µ–Ω—å', '—Ä—É–∫–∞', '—Ä–∞–∑', '—Ä–∞–±–æ—Ç–∞', '—Å–ª–æ–≤–æ', '–º–µ—Å—Ç–æ', '–ª–∏—Ü–æ', '–¥—Ä—É–≥', '–≥–ª–∞–∑', '–≤–æ–ø—Ä–æ—Å', '–¥–æ–º', '—Å—Ç–æ—Ä–æ–Ω–∞', '—Å—Ç—Ä–∞–Ω–∞', '–º–∏—Ä', '—Å–ª—É—á–∞–π', '–≥–æ–ª–æ–≤–∞', '—Ä–µ–±–µ–Ω–æ–∫', '—Å–∏–ª–∞', '–∫–æ–Ω–µ—Ü', '–≤–∏–¥', '—Å–∏—Å—Ç–µ–º–∞', '—á–∞—Å—Ç—å', '–≥–æ—Ä–æ–¥', '–æ—Ç–Ω–æ—à–µ–Ω–∏–µ', '–∂–µ–Ω—â–∏–Ω–∞', '–¥–µ–Ω—å–≥–∏']
# print(*sorted(data, key=lambda x: (len(x), x)))


# –°–ø–∏—Å–æ–∫ mixed_list —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é
# # –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ max() –Ω–∞—Ö–æ–¥–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ.
#
# mixed_list = ['tuesday', 'abroad', 'abuse', 'beside', 'monday', 'abate', 'accessory', 'absorb', 1384878, 'sunday',
#               'about', 454805, 'saturday', 'abort', 2121919, 2552839, 977970, 1772933, 1564063, 'abduct', 901271,
#               2680434, 'bicycle', 'accelerate', 1109147, 942908, 'berry', 433507, 'bias', 'bestow', 1875665, 'besides',
#               'bewilder', 1586517, 375290, 1503450, 2713047, 'abnormal', 2286106, 242192, 701049, 2866491, 'benevolent',
#               'bigot', 'abuse', 'abrupt', 343772, 'able', 2135748, 690280, 686008, 'beyond', 2415643, 'aboard', 'bet',
#               859105, 'accident', 2223166, 894187, 146564, 1251748, 2851543, 1619426, 2263113, 1618068, 'berth',
#               'abolish', 'beware', 2618492, 1555062, 'access', 'absent', 'abundant', 2950603, 'betray', 'beverage',
#               'abide', 'abandon', 2284251, 'wednesday', 2709698, 'thursday', 810387, 'friday', 2576799, 2213552,
#               1599022, 'accept', 'abuse', 'abound', 1352953, 'bid', 1805326, 1499197, 2241159, 605320, 2347441]
# print(max(mixed_list, key=lambda x: x if isinstance(x,int) else 0))


# mixed_list = ['beside', 48, 'accelerate', 28, 'beware', 'absorb', 'besides', 'berry', 15, 65, 'abate', 'thursday', 76, 70, 94, 35, 36, 'berth', 41, 'abnormal', 'bicycle', 'bid', 'sunday', 'saturday', 87, 'bigot', 41, 'abort', 13, 60, 'friday', 26, 13, 'accident', 'access', 40, 26, 20, 75, 13, 40, 67, 12, 'abuse', 78, 10, 80, 'accessory', 20, 'bewilder', 'benevolent', 'bet', 64, 38, 65, 51, 95, 'abduct', 37, 98, 99, 14, 'abandon', 'accept', 46, 'abide', 'beyond', 19, 'about', 76, 26, 'abound', 12, 95, 'wednesday', 'abundant', 'abrupt', 'aboard', 50, 89, 'tuesday', 66, 'bestow', 'absent', 76, 46, 'betray', 47, 'able', 11]
# print(*sorted(mixed_list, key=lambda x: str(x) ))

# –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π —Ü–≤–µ—Ç
# print(*list(map(lambda x: 255 - x, [int(i) for i in input().split()])))

# # –ó–Ω–∞—á–µ–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ üå∂Ô∏è
# from functools import reduce as r
#
# eval = lambda coef, x: r(lambda v, c: c + v * x, map(int, coef))
# print(eval(input().split(), int(input())))

# 15.9 –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ any(), all(), zip(), enumerate()

# –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è all() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –µ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ
# –æ–±—ä–µ–∫—Ç–∞) –∏—Å—Ç–∏–Ω–Ω—ã (–ø—Ä–∏–≤–æ–¥—è—Ç—Å—è –∫ –∑–Ω–∞—á–µ–Ω–∏—é True), –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

# –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è any() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –µ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
# (–∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞) —è–≤–ª—è–µ—Ç—Å—è –∏—Å—Ç–∏–Ω–Ω—ã–º (–ø—Ä–∏–≤–æ–¥–∏—Ç—Å—è –∫ –∑–Ω–∞—á–µ–Ω–∏—é True), –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

# –§—É–Ω–∫—Ü–∏—è enumerate()
# –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è enumerate() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ –∏–∑ –∏–Ω–¥–µ–∫—Å–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ —Å–∞–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π
# –µ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞).
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
# colors = ['red', 'green', 'blue']
# for pair in enumerate(colors):
#     print(pair)
# –≤—ã–≤–æ–¥–∏—Ç:
# (0, 'red')
# (1, 'green')
# (2, 'blue')
#
# –ï—Å–ª–∏ —Å—á–µ—Ç –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å –æ—Ç–ª–∏—á–Ω–æ–≥–æ –æ—Ç –Ω—É–ª—è —á–∏—Å–ª–∞, —Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ start.
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
# colors = ['red', 'green', 'blue']
# for pair in enumerate(colors, 100):
#     print(pair)
# –≤—ã–≤–æ–¥–∏—Ç:
# (100, 'red')
# (101, 'green')
# (102, 'blue')
# –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —Ñ—É–Ω–∫—Ü–∏—è enumerate() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ —Å–ø–∏—Å–æ–∫, –∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç,
# –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–º. –¢–∞–∫–æ–π –æ–±—ä–µ–∫—Ç –ø–æ—Ö–æ–∂ –Ω–∞ —Å–ø–∏—Å–æ–∫ —Ç–µ–º, —á—Ç–æ –µ–≥–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞—Ç—å —Ü–∏–∫–ª–æ–º for, —Ç–æ –µ—Å—Ç—å –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å. –ò—Ç–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å–ø–∏—Å–æ–∫ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ list().
#
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
#
# colors = ['red', 'green', 'blue']
#
# pairs = enumerate(colors)
#
# print(pairs)
# print(list(pairs))
# –≤—ã–≤–æ–¥–∏—Ç:
#
# <enumerate object at 0x...>
# [(0, 'red'), (1, 'green'), (2, 'blue')]
# –ú—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É –∫–æ—Ä—Ç–µ–∂–µ–π –ø—Ä–∏ –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é —Ü–∏–∫–ª–∞ for.
#
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
#
# colors = ['red', 'green', 'blue']
# for index, item in enumerate(colors):
#     print(index, item)
# –≤—ã–≤–æ–¥–∏—Ç:
#
# 0 red
# 1 green
# 2 blue
# –¢–∞–∫–æ–π –∫–æ–¥ —è–≤–ª—è–µ—Ç—Å—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–æ–π –∫–æ–¥—É:
#
# colors = ['red', 'green', 'blue']
# for i in range(len(colors)):
#     print(i, colors[i])
#
# –§—É–Ω–∫—Ü–∏—è zip()
# –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è zip() –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –∫–∞–∂–¥–æ–π –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –µ–π
# –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞) –≤ –∫–æ—Ä—Ç–µ–∂–∏.
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
# numbers = [1, 2, 3]
# words = ['one', 'two', 'three']
# for pair in zip(numbers, words):
#     print(pair)
# –≤—ã–≤–æ–¥–∏—Ç:
# (1, 'one')
# (2, 'two')
# (3, 'three')
# –ß–∞—Å—Ç—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ zip()
# –°—Ü–µ–Ω–∞—Ä–∏–π 1. –§—É–Ω–∫—Ü–∏—è zip() —É–¥–æ–±–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä–µ–π, –∫–æ–≥–¥–∞ –∫–ª—é—á–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö —Å–ø–∏—Å–∫–∞—Ö.
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
# keys = ['name', 'age', 'gender']
# values = ['Timur', 28, 'male']
# info = dict(zip(keys, values))
# print(info)
# –≤—ã–≤–æ–¥–∏—Ç:
# {'name': 'Timur', 'age': 28, 'gender': 'male'}

# –°—Ü–µ–Ω–∞—Ä–∏–π 2. –§—É–Ω–∫—Ü–∏—è zip() —É–¥–æ–±–Ω–∞ –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ) –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ä–∞–∑—É –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫–æ–ª–ª–µ–∫—Ü–∏—è–º.
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
# name = ['Timur', 'Ruslan', 'Rustam']
# age = [28, 21, 19]
# for x, y in zip(name, age):
#     print(x, y)
# –≤—ã–≤–æ–¥–∏—Ç: 
# Timur 28
# Ruslan 21
# Rustam 19

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π all() –∏ any() –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫:
# def all(iterable):
#     for item in iterable:
#        if not item:
#            return False
#     return True
#
# def any(iterable):
#     for item in iterable:
#         if item:
#             return True
#     return False
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ú—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ñ—É–Ω–∫—Ü–∏–∏ zip() –∏ enumerate():
#
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
#
# list1 = ['a1', 'a2', 'a3']
# list2 = ['b1', 'b2', 'b3']
#
# for index, (item1, item2) in enumerate(zip(list1, list2)):
#     print(index, item1, item2)
# –≤—ã–≤–æ–¥–∏—Ç:
#
# 0 a1 b1
# 1 a2 b2
# 2 a3 b3


# –ò—Å–ø–æ–ª—å–∑—É—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é —Å—Ä–∞–∑—É –ø–æ —Ç—Ä–µ–º —Å–ø–∏—Å–∫–∞–º countries, capitals –∏ population
# –≤—ã–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
# <capital> is the capital of <country>, population equal <population> people.

# countries = ['Russia', 'USA', 'UK', 'Germany', 'France', 'India']
# capitals = ['Moscow', 'Washington', 'London', 'Berlin', 'Paris', 'Delhi']
# population = [145_934_462, 331_002_651, 80_345_321, 67_886_011, 65_273_511, 1_380_004_385]
# for country, capital, people in zip(countries, capitals, population):
#     print(f'{capital} is the capital of {country}, population equal {people} people.')

# –í–Ω—É—Ç—Ä–∏ —à–∞—Ä–∞
# abscissas = [float(i) for i in input().split()]
# ordinates = [float(i) for i in input().split()]
# applicates = [float(i) for i in input().split()]
# print(all(map(lambda x: x[0]**2 + x[1]**2 + x[2]**2 <= 4, zip(abscissas, ordinates, applicates))))

# # # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP-–∞–¥—Ä–µ—Å
# ip=input().split('.')
# print(all(map(lambda n:n.isdigit() and int(n)<=255,ip)))


# –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —á–∏—Å–ª–∞
# a, b = int(input()), int(input())
# print(*filter(lambda n: all(map(lambda x: x != 0 and n % x == 0, map(int, str(n)))), range(a, b+1)))


# –•–æ—Ä–æ—à–∏–π –ø–∞—Ä–æ–ª—å
# s = input()
# print('YES' if all((any(i.isupper() for i in s),
#                     any(i.islower() for i in s),
#                     any(i.isdigit() for i in s),
#                     len(s) >= 7)) else 'NO')

# –û—Ç–ª–∏—á–Ω–∏–∫–∏
# progress = []
# for i in range(int(input())):
#     progress.append(any(['5' in input().split() for j in range(int(input()))]))
#
# print('YES' if all(progress) else 'NO')

# –ü–∏—Å—å–º–æ –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–∞
# def generate_letter(mail, name, date, time, place, teacher = '–¢–∏–º—É—Ä –ì—É–µ–≤', number = 17):
#     return 'To: ' + mail + \
#     '\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, ' + name + \
#     '!\n–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —ç–∫–∑–∞–º–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–π–¥–µ—Ç ' + date + ', –≤ ' + time + \
#     '.\n–ü–æ –∞–¥—Ä–µ—Å—É: ' + place + \
#     '.\n–≠–∫–∑–∞–º–µ–Ω –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å ' + teacher + ' –≤ –∫–∞–±–∏–Ω–µ—Ç–µ ' + str(number) + '.\n–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ!'

# # Pretty print
# def pretty_print(data, side = '-', delimiter = '|'):
#     mainStr = delimiter + ' ' + (' ' + delimiter + ' ').join(map(str, data)) + ' ' + delimiter
#     print(' ' + side * (len(mainStr) - 2))
#     print (mainStr)
#     print(' ' + side * (len(mainStr) - 2))


# def concat(*elems, sep = ' '):
#     return sep.join([str(elem) for elem in elems])

# from functools import reduce
# def product_of_odds(data):
#     return reduce(lambda a,b: a*b, [elem for elem in data if elem%2==1], 1)

# words = 'the world is mine take a look what you have started'.split()
# print(*map(lambda x: '\"' + x + '\"',words))

# numbers = [18, 191, 9009, 5665, 78, 77, 45, 23, 19991, 908, 8976, 6565, 5665, 10, 1000, 908, 909, 232, 45654, 786]
# print(*list(filter(lambda x: str(x) != str(x)[::-1], numbers)))

# numbers = [(10, -2, 3, 4), (-13, 56), (1, 9, 2), (-1, -9, -45, 32), (-1, 5, 1), (17, 0, 1), (0, 1), (3,), (39, 12), (11, -23), (10, -100, 21, 32), (3, -8), (1, 1)]
# sorted_numbers = sorted(numbers, key=lambda x: sum(x)/len(x), reverse=True)
# print(sorted_numbers)

# def call(func, *args):
#     return func(*args)

# def compose(f, g):
#     return lambda x: f(g(x))

# def arithmetic_operation(operation):
#     if operation == '+':
#         return lambda a,b: a + b
#     if operation == '-':
#         return lambda a,b: a - b
#     if operation == '*':
#         return lambda a,b: a * b
#     if operation == '/':
#         return lambda a,b: a / b

# –í –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
# words = input().split()
# sorted_words = sorted(words, key=lambda a: a.lower())
# print(*sorted_words)

# –ì–µ–º–∞—Ç—Ä–∏—è —Å–ª–æ–≤–∞
# n = int(input())
# words = []
#
# def calculate_gematry(word):
#     summa = 0
#     word = word.upper()
#     for elem in word:
#         summa += ord(elem) - ord('A')
#     return summa
#
# for i in range(n):
#     words.append(input())
#
# sorted_words = sorted(words)
# sorted_words = sorted(sorted_words, key=calculate_gematry)
#
# for elem in sorted_words:
#     print(elem)

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ IP-–∞–¥—Ä–µ—Å–æ–≤
# n = int(input())
# ip_addresses = []
#
#
# def calculate_digit(ip):
#     arr = [int(elem) for elem in ip.split('.')]
#     return arr[0] * pow(256, 3) + arr[1] * pow(256, 2) + arr[2] * pow(256, 1) + arr[3] * pow(256, 0)
#
#
# for i in range(n):
#     ip_addresses.append(input())
#
# ip_addresses = sorted(ip_addresses, key=calculate_digit)
# for elem in ip_addresses:
#     print(elem)

# 17.1 –§–∞–π–ª–æ–≤—ã–π –≤–≤–æ–¥ –∏ –≤—ã–≤–æ–¥
# –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
# –ö–∞–∫ —É–∂–µ —Å–∫–∞–∑–∞–Ω–æ, –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ open() –≤ —Ñ–∞–π–ª–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
# –ø–æ–ø–∞–¥–∞–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞, –∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª (–¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Ñ–∞–π–ª–∞).
#
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
#
# file = open('info.txt', 'w', encoding='utf-8')    # –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏
#
# print(file)
# –≤—ã–≤–æ–¥–∏—Ç:
#
# <_io.TextIOWrapper name='info.txt' mode='w' encoding='utf-8'>
# read() ‚Äì —á–∏—Ç–∞–µ—Ç –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞;
# readline() ‚Äì —á–∏—Ç–∞–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –∏–∑ —Ñ–∞–π–ª–∞;
# readlines() ‚Äì —á–∏—Ç–∞–µ—Ç –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫.


# –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –≤ –ø–∞–ø–∫–µ —Å –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –µ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª languages.txt —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:
#
# Python
# Java
# Javascript
# C#
# C
# C++
# PHP
# R
# Objective-C
# –ú–µ—Ç–æ–¥ read()
# –§–∞–π–ª–æ–≤—ã–π –º–µ—Ç–æ–¥ read() —Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ —Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª—ã
# –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É '\n'.
#
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
#
# file = open('languages.txt', 'r', encoding='utf-8')
#
# content = file.read()
#
# file.close()
# —Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ languages.txt –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é content. –í –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π content –±—É–¥–µ—Ç
# —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è —Å—Ç—Ä–æ–∫–∞ 'Python\nJava\nJavascript\nC#\nC\nC++\nPHP\nR\nObjective-C'.
#
# –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –º–µ—Ç–æ–¥ read() —Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞, –≤–∫–ª—é—á–∞—è –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫:
#
# –ï—Å–ª–∏ –º–µ—Ç–æ–¥—É read() –ø–µ—Ä–µ–¥–∞—Ç—å —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, —Ç–æ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞–Ω–æ –Ω–µ –±–æ–ª–µ–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
# —Å–∏–º–≤–æ–ª–æ–≤. –ù–∞–ø—Ä–∏–º–µ—Ä, —Å—á–∏—Ç—ã–≤–∞—Ç—å —Ñ–∞–π–ª –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ –º–æ–∂–Ω–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –º–µ—Ç–æ–¥–∞ read(1).


# –ú–µ—Ç–æ–¥ readline()
# –§–∞–π–ª–æ–≤—ã–π –º–µ—Ç–æ–¥ readline() —Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –∏–∑ —Ñ–∞–π–ª–∞ (–¥–æ —Å–∏–º–≤–æ–ª–∞ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏ '\n'),
# –ø—Ä–∏ —ç—Ç–æ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤–º–µ—Å—Ç–µ —Å —Å–∏–º–≤–æ–ª–æ–º '\n'. –ï—Å–ª–∏ —Å—á–∏—Ç–∞—Ç—å —Å—Ç—Ä–æ–∫—É –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äì –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ –∏ –±–æ–ª—å—à–µ —Å—Ç—Ä–æ–∫ –≤ –Ω–µ–º –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞.
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
#
# file = open('languages.txt', 'r', encoding='utf-8')
#
# language = file.readline()
#
# file.close()
# —Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Ñ–∞–π–ª–∞ languages.txt –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é language. –í –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π language
# –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è —Å—Ç—Ä–æ–∫–∞ 'Python\n'.
# –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞ '\n' –∏–∑ –∫–æ–Ω—Ü–∞ —Å—á–∏—Ç–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —É–¥–æ–±–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–æ–≤—ã–π –º–µ—Ç–æ–¥ rstrip().
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
#
# line = 'Python\n'
# line = line.rstrip()
# —É–¥–∞–ª—è–µ—Ç —Å–∏–º–≤–æ–ª \n –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–æ–∫–∏ line, –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —á–µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π line —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ 'Python'.

# –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –º–æ–∂–Ω–æ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏.
# –° –ø–æ–º–æ—â—å—é —Ü–∏–∫–ª–∞ while:

# file = open('languages.txt', 'r', encoding='utf-8')
# line = file.readline()  # —Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
# while line != '':  # –ø–æ–∫–∞ –Ω–µ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
#     print(line.strip())  # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—á–∏—Ç–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
#     line = file.readline()  # —á–∏—Ç–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
# file.close()
#
# –° –ø–æ–º–æ—â—å—é —Ü–∏–∫–ª–∞ for (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç):
# file = open('languages.txt', 'r', encoding='utf-8')
# for line in file:
#     print(line.strip())
# file.close()
#
# –§–∞–π–ª–æ–≤—ã–π –º–µ—Ç–æ–¥ readlines() —Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ –≤—Å–µ—Ö —Å—á–∏—Ç–∞–Ω–Ω—ã—Ö
# —Å—Ç—Ä–æ–∫ (–æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ ‚Äî –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞). –ü—Ä–∏ —ç—Ç–æ–º, –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏  '\n'üòÖ.
#
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
# file = open('languages.txt', 'r', encoding='utf-8')
# languages = file.readlines()
# file.close()
# —Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ languages.txt –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é languages. –í –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π languages
# –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è —Å–ø–∏—Å–æ–∫:
# ['Python\n', 'Java\n', 'Javascript\n', 'C#\n', 'C\n', 'C++\n', 'PHP\n', 'R\n', 'Objective-C']
# –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–∏–º–≤–æ–ª '\n' –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:
# languages = [line.strip() for line in file.readlines()]
# –ª–∏–±–æ —Ñ—É–Ω–∫—Ü–∏—é map()
# languages = list(map(str.strip, file.readlines()))
# –ª–∏–±–æ –∞–Ω–æ–Ω–∏–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:
# languages = list(map(lambda line: line.strip(), file.readlines()))
# –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏—é list() —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—ä–µ–∫—Ç list(file) ,
# –ø–æ–ª—É—á–∏–º —Ç–æ—Ç –∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —á—Ç–æ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–µ—Ç–æ–¥–∞ file.readlines().
#
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 4. –°—É—â–µ—Å—Ç–≤—É—é—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã:

# \n ‚Äì –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø–µ—á–∞—Ç–∏ –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –≤–Ω–∏–∑;
# \r ‚Äì –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø–µ—á–∞—Ç–∏ –≤ –∫—Ä–∞–π–Ω–µ–µ –ª–µ–≤–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏.
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
#
# print('aaaaaa\nbb')
# –≤—ã–≤–æ–¥–∏—Ç:
#
# aaaaaa
# bb
#  –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
#
# print('aaaaaa\rbb')
# –≤—ã–≤–æ–¥–∏—Ç:
#
# bbaaaa
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
#
# print(ord('\n'))
# print(ord('\r'))
# –≤—ã–≤–æ–¥–∏—Ç:
# 10
# 13

# file = open(input(), 'r', encoding='utf-8')
# for line in file:
#     print(line.strip())
# file.close()
#
# with open(input()) as f:
#     print(f.read())

# file = open('languages.txt', 'r', encoding='utf-8')
# languages = file.readlines()
# file.close()
# print(languages[-2])

# –°–ª—É—á–∞–π–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
# import random
# file = open('lines.txt', 'r', encoding='utf-8')
# text = file.readlines()
# file.close()
# print(text[random.randrange(0, len(text))])

# –°—É–º–º–∞ –¥–≤—É—Ö-1
# file = open('numbers.txt')
# print(sum(map(int, file)))
# file.close()

# l = [int(i) for i in open('numbers.txt')]
# print(sum(l))

# –°—É–º–º–∞ –¥–≤—É—Ö-2
# file = open('nums.txt')
# print(sum(map(int, file.read().split())))
# file.close()

# file = open('nums.txt')
# summa = 0
# for line in file.read().split():
#     summa += int(line)
# print(summa)
# file.close()


# –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
# file = open('prices.txt', 'r', encoding='utf-8')
# s = 0
# for line in file:
#     tovar, count, price = line.split()
#     s += int(count) * int(price)
# print(s)
# file.close()

# import pandas as pd
#
# df = pd.read_csv('prices.txt', sep ='\t', header = None)
# df.columns = ['–¢–æ–≤–∞—Ä', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–¶–µ–Ω–∞']
# df['–ò—Ç–æ–≥–æ'] = df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] * df['–¶–µ–Ω–∞']
# summa_zakaza = sum(df['–ò—Ç–æ–≥–æ'])
# print(summa_zakaza)


# –§–∞–π–ª–æ–≤—ã–π –º–µ—Ç–æ–¥ seek()
# –§–∞–π–ª–æ–≤—ã–π –º–µ—Ç–æ–¥ seek() –∑–∞–¥–∞—ë—Ç –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –≤ –±–∞–π—Ç–∞—Ö –æ—Ç –Ω–∞—á–∞–ª–∞ —Ñ–∞–π–ª–∞. –ß—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫—É—Ä—Å–æ—Ä –≤ —Å–∞–º–æ–µ
# –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ seek(), –ø–µ—Ä–µ–¥–∞–≤ –µ–º—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏–µ 0.
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:

# file = open('languages.txt', 'r', encoding='utf-8')
# line1 = file.readline()
# file.seek(0)               # –ø–µ—Ä–µ–≤–æ–¥–∏–º –∫—É—Ä—Å–æ—Ä –≤ —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ
# line2 = file.readline()
#
# print(line1, line2)
#
# file.close()
# –≤—ã–≤–æ–¥–∏—Ç:
# Python
# Python

# –ï—Å–ª–∏ –º–µ—Ç–æ–¥ seek() —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫—É—Ä—Å–æ—Ä (—Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é), —Ç–æ –º–µ—Ç–æ–¥ tell() –ø–æ–ª—É—á–∞–µ—Ç –µ–µ.
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
#
# file = open('languages.txt', 'r', encoding='utf-8')
# print(file.tell())
# line1 = file.readline()
# print(file.tell())
#
# file.close()
# –≤—ã–≤–æ–¥–∏—Ç:
#
# 0
# 8
# –í —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ –∫—É—Ä—Å–æ—Ä (—Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è) —Ä–∞–≤–µ–Ω –Ω—É–ª—é, –ø–æ—Å–ª–µ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –∫—É—Ä—Å–æ—Ä —Å–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ 8 –±–∞–π—Ç
# (–ø–æ –±–∞–π—Ç—É –Ω–∞ –∫–∞–∂–¥—ã–π –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ 'P', 'y', 't', 'h', 'o', 'n' –∏ –¥–≤–∞ –±–∞–π—Ç–∞ –Ω–∞ —Å–∏–º–≤–æ–ª –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏ '\n').


# # –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
# with object as name:
#     # –ó–¥–µ—Å—å –Ω–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ä–µ—Å—É—Ä—Å name.
#     # –≠—Ç–æ —Ç–µ–ª–æ with-–±–ª–æ–∫–∞.
# # –ê –∑–¥–µ—Å—å —Ä–µ—Å—É—Ä—Å name —É–∂–µ –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω, –¥–∞–∂–µ –µ—Å–ª–∏ –≤ —Ç–µ–ª–µ with-–±–ª–æ–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.

# with open('languages.txt', 'r', encoding='utf-8') as file:
#     for line in file:
#         print(line)
#                           # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞
# print('–§–∞–π–ª –∑–∞–∫—Ä—ã—Ç')


# –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç —Å—Ç—Ä–æ–∫–∏
# with open('text.txt', 'r', encoding='utf-8') as file:
#     print(file.read()[::-1])

# –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
# with open('data.txt', 'r', encoding='utf-8') as file:
#     lines = file.readline()
#     for i in range(len(lines)):
#         print(lines[len(lines) - 1 - i].strip())
#
# with open('data.txt', encoding='utf-8') as file:
#     print(*file.readlines()[::-1], sep='')


# –î–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
# with open('lines.txt', 'r', encoding='utf-8') as file:
#     lines = file.readlines()
#     for line in lines:
#         if len(line) == len(max(lines, key=len)):
#             print(line.strip())

# –°—É–º–º–∞ —á–∏—Å–µ–ª –≤ —Å—Ç—Ä–æ–∫–∞—Ö
# with open('numbers.txt') as file:
#     for line in file.readlines():
#         print(sum([int(elem) for elem in line.split()]))

# with open('numbers.txt') as f:
#     for line in f:
#         print(sum(map(int, line.split())))


# # –°—É–º–º–∞ —á–∏—Å–µ–ª –≤ —Ñ–∞–π–ª–µ
# with open('numbers.txt', encoding='utf-8') as file:
#     row = ''.join(c if c.isdigit() else ' ' for c in file.read())
#     print(sum(map(int, row.split())))


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∞–π–ª—É
# linesNum = 0
# wordsNum = 0
# lettersNum = 0
#
# with open('file.txt') as file:
#     for line in file.readlines():
#         linesNum += 1
#         wordsNum += len(line.split())
#         lettersNum += len([elem for elem in line if elem.isalpha()])
#
# print("Input file contains:\n" + str(lettersNum) + " letters\n" + str(wordsNum) + " words\n" + str(linesNum) + " lines")


# with open('lines.txt') as f:
#     txt = f.read()
#     print('Input file contains:')
#     print(sum(map(str.isalpha, txt)), 'letters')
#     print(len(txt.split()), 'words')
#     print(txt.count('\n') + 1, 'lines')


# # Random name and surname
# from random import randint
#
# firstNames = []
# lastNames = []
#
# with open('first_names.txt') as file:
#     for line in file.readlines():
#         firstNames.append(line)
#
# with open('last_names.txt') as file:
#     for line in file.readlines():
#         lastNames.append(line)
#
# for i in range(3):
#     print(firstNames[randint(0, len(firstNames))].strip() + ' ' + lastNames[randint(0, len(lastNames))].strip())


# –ù–µ–æ–±—ã—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
# with open('population.txt') as file:
#     for line in file.readlines():
#         if (line.startswith('G') and int(line.strip().split()[-1]) > 500000):
#             print(line.strip().split()[0])

# with open('population.txt') as f:
#     for line in f:
#         n, p = line.split('\t')
#         if n.startswith('G') and int(p) > 500000:
#             print(n)

# with open('population.txt',encoding='utf-8') as pop:
#     spisok=[str(i).rstrip().split() for i in pop.readlines() ]
#     for i in spisok:
#         if i[0][0]=='G' and int(i[-1])>500000:
#             print(i[0])


# # CSV-—Ñ–∞–π–ª
# def read_csv():
#     with open('data.csv') as file:
#         keys = file.readline().strip().split(',')
#         return [dict(zip(keys, line.strip().split(','))) for line in file]


# 'r' - Read (—á—Ç–µ–Ω–∏–µ) –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è. –¢–∞–∫–æ–π —Ñ–∞–π–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω.
# 'w'	 - Write (–∑–∞–ø–∏—Å—å)	–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏. –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ —Å—Ç–µ—Ä–µ—Ç—å –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.
# –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–Ω –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω.
# 'a'	 - Append (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ)	–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏. –í—Å–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º—ã–µ –≤ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç
# –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –µ–≥–æ –∫–æ–Ω–µ—Ü. –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –æ–Ω –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω.
# 'r+' - 	Read + Write	–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏. –í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–∞—Å—Ç–∏—á–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å
# —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞.
# 'x' - Create (—Å–æ–∑–¥–∞–Ω–∏–µ)	–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª. –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –æ—à–∏–±–∫–∞.

# –î–ª—è –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–≤–∞ —Ñ–∞–π–ª–æ–≤—ã—Ö –º–µ—Ç–æ–¥–∞:
# write() ‚Äì –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ —Ñ–∞–π–ª;
# writelines() ‚Äì –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª.

# –ú–µ—Ç–æ–¥ write()
# –û–±—â–∏–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞ write():
# —Ñ–∞–π–ª–æ–≤–∞—è_–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è.writ–µ(—Å—Ç—Ä–æ–∫–æ–≤–æ–µ_–∑–Ω–∞—á–µ–Ω–∏–µ)
#
# —Ñ–∞–π–ª–æ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ‚Äì —ç—Ç–æ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –∫–æ—Ç–æ—Ä–∞—è —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—ä–µ–∫—Ç;
# —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äì —ç—Ç–æ —Å–∏–º–≤–æ–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ —Ñ–∞–π–ª.
# –î–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ (—Ä–µ–∂–∏–º—ã 'w', '–∞', 'r+'), –∏–Ω–∞—á–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –æ—à–∏–±–∫–∞.
# –ï—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç–∫—Ä—ã—Ç –≤ —Ä–µ–∂–∏–º–µ 'w', —Ç–æ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å—Ç–∏—Ä–∞–µ—Ç—Å—è, –∞ —É–∂–µ –∑–∞—Ç–µ–º
# –≤ –Ω–µ–≥–æ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ.
#
# –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ–¥–∞:
#
# with open('myfile.txt', 'w', encoding='utf-8') as file:
#     file.write('Python and beegeek forever\n')
#     file.write('We love stepik <3')
# —Ñ–∞–π–ª myfile.txt –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
#
# Python and beegeek forever
# We love stepik <3

# –ï—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç–∫—Ä—ã—Ç –≤ —Ä–µ–∂–∏–º–µ 'a', —Ç–æ –∑–∞–ø–∏—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Å–∞–º—ã–π –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞.
# –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ–¥–∞:
#
# with open('myfile.txt', 'a', encoding='utf-8') as file:
#     file.write('Python and beegeek forever\n')
#     file.write('We love stepik <3')
# —Ñ–∞–π–ª myfile.txt –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
#
# First line of the file.
# Second line of the file.
# Third line of the file.Python and beegeek forever
# We love stepik <3

# –ï—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç–∫—Ä—ã—Ç –≤ —Ä–µ–∂–∏–º–µ 'r+', —Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–∞—Å—Ç–∏—á–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.
# –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ–¥–∞:
#
# with open('myfile.txt', 'r+', encoding='utf-8') as file:
#     file.write('Python and beegeek forever\n')
#     file.write('We love stepik.')
# —Ñ–∞–π–ª myfile.txt –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
#
# Python and beegeek forever
# We love stepik. file.
# Third line of the file.


# –ú–µ—Ç–æ–¥ writelines()
# –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã –º–µ—Ç–æ–¥–∞ write() –¥–æ–ø–∏—Å—ã–≤–∞—é—Ç —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞.
#
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥ —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª philosophers.txt –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –Ω–µ–≥–æ —Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞:
#
# with open('philosophers.txt', 'w', encoding='utf-8') as file:
#     file.write('–î–∂o–Ω –õ–æ–∫–∫\n')
#     file.write('–î—ç–≤–∏–¥ –•—å—é–º\n')
#     file.write('–≠–¥–ºy–Ω–¥ –ë–µ—Ä–∫\n')
# –ù–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ —á–∞—Å—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ü–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞. –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å
# —Å –ø–æ–º–æ—â—å—é —Ü–∏–∫–ª–∞ –∏–ª–∏ –º–µ—Ç–æ–¥–∞ writelines(), —á—Ç–æ —É–¥–æ–±–Ω–µ–µ. –ú–µ—Ç–æ–¥ writelines() –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ
# –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ–≥–æ –≤ —Ñ–∞–π–ª.
#
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥ —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª philosophers.txt –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –Ω–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ø–∏—Å–∫–∞ philosophers:
#
# philosophers = ['–î–∂o–Ω –õ–æ–∫–∫\n', '–î—ç–≤–∏–¥ –•—å—é–º\n', '–≠–¥–ºy–Ω–¥ –ë–µ—Ä–∫\n']
#
# with open('philosophers.txt', 'w', encoding='utf-8') as file:
#     file.writelines(philosophers)


# –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ print()
# –î–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é print().
# –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–π –µ—â–µ –æ–¥–∏–Ω –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç file, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã–π —Ñ–∞–π–ª.
# –ü—Ä–∏ —ç—Ç–æ–º —Ñ—É–Ω–∫—Ü–∏—è print() –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É.
#
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
#
# with open('philosophers.txt', 'w', encoding='utf-8') as output:
#     print('–î–∂o–Ω –õ–æ–∫–∫', file=output)
#     print('–î—ç–≤–∏–¥ –•—å—é–º', file=output)
#     print('–≠–¥–ºy–Ω–¥ –ë–µ—Ä–∫', file=output)
# —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª philosophers.txt —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:
#
# –î–∂o–Ω –õ–æ–∫–∫
# –î—ç–≤–∏–¥ –•—å—é–º
# –≠–¥–ºy–Ω–¥ –ë–µ—Ä–∫
# –ú—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—é –º–æ—â–Ω–æ—Å—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ print() –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∏–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
#
# –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:
#
# with open('philosophers.txt', 'w', encoding='utf-8') as output:
#     print('–î–∂o–Ω –õ–æ–∫–∫', '–î—ç–≤–∏–¥ –•—å—é–º', '–≠–¥–ºy–Ω–¥ –ë–µ—Ä–∫', sep='***', file=output)
# —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª philosophers.txt —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:
#
# –î–∂o–Ω –õ–æ–∫–∫***–î—ç–≤–∏–¥ –•—å—é–º***–≠–¥–ºy–Ω–¥ –ë–µ—Ä–∫

# –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
# with open('output.txt', 'w') as output:
#     output.write(input())


# –°–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞
# from random import randint
#
# with open('random.txt', 'w') as file:
#     arr = [str(randint(111, 777)) + '\n' for i in range(25)]
#     file.writelines(arr)


# –ù—É–º–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫
# arr = []
# counter = 1
#
# with open('input.txt') as file:
#     for line in file.readlines():
#         arr.append(str(counter) + ') ' + line)
#         counter += 1
#
# with open('output.txt', 'w') as file:
#     file.writelines(arr)

# with open('input.txt') as inp, open('output.txt', 'w') as out:
#     for i, j in enumerate(inp, start=1):
#         print(f'{i}) {j}', end='', file=out)


# –ü–æ–¥–∞—Ä–æ–∫ –Ω–∞ –Ω–æ–≤—ã–π –≥–æ–¥
# arr = []
#
# with open('class_scores.txt') as file:
#     for line in file.readlines():
#         arr.append(line.strip().split()[0] + ' ' + str(int(line.strip().split()[1]) + 5 if int(line.strip().split()[1]) < 95 else 100) + '\n')
#
# with open('new_scores.txt', 'w') as file:
#     file.writelines(arr)

# –ó–∞–≥–∞–¥–∫–∞ –æ—Ç –ñ–∞–∫–∞ –§—Ä–µ—Å–∫–æ üå∂Ô∏è
# with open('goats.txt', 'r', encoding='utf-8') as file, open('answer.txt', 'w', encoding='utf-8') as answer:
#     lst = []
#     for string in file.read().split('GOATS'):
#         lst.append(string.strip('COLOURS').strip('\n').strip(' goat ').split(' goat\n'))
#     for c in lst[0]:
#         if lst[1].count(c) > len(lst[1]) * 0.07:
#             print(f'{c} goat', file=answer)

# –ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ üå∂Ô∏è
# n = int(input())
# result = ''
#
# for i in range(n):
#     with open(input()) as file:
#         result += file.read()
#
# with open('output.txt', 'w') as file:
#     file.write(result)


# # –õ–æ–≥ —Ñ–∞–π–ª üå∂Ô∏è
# import io
#
# result = []
#
# with io.open('logfile.txt', encoding='utf-8') as file:
#     for line in file:
#         name = line.strip().split(', ')[0]
#         startTime = line.strip().split(', ')[1]
#         endTime = line.strip().split(', ')[2]
#         if int(endTime.split(':')[0]) - int(startTime.split(':')[0]) > 1:
#             result.append(name + '\n')
#         if int(endTime.split(':')[0]) - int(startTime.split(':')[0]) == 1 and int(endTime.split(':')[1]) - int(startTime.split(':')[1]) >= 0:
#             result.append(name + '\n')
#
# with open('output.txt', 'w') as file:
#     file.writelines(result)
#


# if (n := int(input())) <= 10000:
#     print(f'–°—É–º–º–∞ {n} –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç, –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ')
# else:
#     print(f'–û–≥–æ! {n}! –ö—É–¥–∞ –≤–∞–º —Å—Ç–æ–ª—å–∫–æ? –ú—ã –∑–∞–±–µ—Ä–µ–º {n - 10000}')

# if 'walrus' in (a := input()):
#     print('–ù–∞—à–ª–∏ –º–æ—Ä–∂–∞')
# else:
#     print('–ù–∏–∫–∞–∫–∏—Ö –º–æ—Ä–∂–µ–π —Ç—É—Ç –Ω–µ—Ç')

# match n := int(input()):
#     case 1:
#         print('–°–æ–≤—Å–µ–º –µ—â–µ –∑–µ–ª–µ–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç–∏–∫')
#     case 2:
#         print('–î–∂—É–Ω-—Å—Ç—É–¥–µ–Ω—Ç')
#     case 3:
#         print('–ú–∏–¥–ª-—Å—Ç—É–¥–µ–Ω—Ç')
#     case 4:
#         print('–°–µ–Ω—å–µ—Ä-—Å—Ç—É–¥–µ–Ω—Ç')
#     case 5:
#         print('–ë–æ—Å—Å –∫–∞—á–∞–ª–∫–∏')
#     case _:
#         print('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—Å')


# match n:= int(input()):
#     case 1|3|5|7|8|10|12:
#         print('31')
#     case 4|6|9|11:
#         print('30')
#     case 2:
#         print('28')

# match n:= input():
#     case '–û–≤–µ–Ω'|'–õ–µ–≤'|'–°—Ç—Ä–µ–ª–µ—Ü':
#         print('–û–≥–Ω–µ–Ω–Ω—ã–π')
#     case '–¢–µ–ª–µ—Ü'|'–î–µ–≤–∞'|'–ö–æ–∑–µ—Ä–æ–≥':
#         print('–ó–µ–º–Ω–æ–π')
#     case '–ë–ª–∏–∑–Ω–µ—Ü—ã'|'–í–µ—Å—ã'|'–í–æ–¥–æ–ª–µ–π':
#         print('–í–æ–∑–¥—É—à–Ω—ã–π')
#     case '–†–∞–∫'|'–°–∫–æ—Ä–ø–∏–æ–Ω'|'–†—ã–±—ã':
#         print('–í–æ–¥–Ω—ã–π')


# value = [1, 2, 3]
# match value:
#     case int() | float():
#         print("–ò–º–µ–µ–º –¥–µ–ª–æ —Å —á–∏—Å–ª–æ–º")
#     case str():
#         print("–ò–º–µ–µ–º –¥–µ–ª–æ —Å–æ —Å—Ç—Ä–æ–∫–æ–π")
#     case list():
#         print("–ò–º–µ–µ–º –¥–µ–ª–æ —Å–æ —Å–ø–∏—Å–∫–æ–º")
#     case  _:
#         print(f"–õ—É—á—à–µ —Å —ç—Ç–∏–º –¥–µ–ª –Ω–µ –∏–º–µ—Ç—å")

# my_tuple = (
# 32, 45, 32, 60, 43, 19, 39, 75, 50, 12, 53, 13, 28, 70, 68, 5, 64, 55, 30, 47, 23, 20, 17, 36, 45, 31, 46, 50, 33, 45,
# 9, 41, 12, 57, 40, 43, 47, 51, 56, 54, 40, 30, 37, 23, 43, 66, 64, 27, 44, 75, 51, 2, 19, 72, 30, 8, 29, 43, 7, 73, 34,
# 65, 54, 50, 43, 6, 50, 45, 49, 30, 39, 50, 41, 70, 38, 16, 31, 51, 72, 45, 58, 39, 50, 56, 24, 30, 9, 53, 27, 31, 68,
# 56, 26, 39, 34, 50, 10, 12, 3, 27)
#
# slice_5_10 = my_tuple[5:11]
# slice_from_20 = my_tuple[20::]
# slice_to_35 = my_tuple[0:35]
#
# print(slice_5_10)
# print(slice_from_20)
# print(slice_to_35)

# for i in [
#     [109, 121, 95, 116, 117, 112, 108, 101, 91, 53, 58, 49, 49, 93],
#     [109, 121, 95, 116, 117, 112, 108, 101, 91, 50, 48, 58, 93],
#     [109, 121, 95, 116, 117, 112, 108, 101, 91, 58, 51, 54, 93]
# ]:
#     print(''.join(chr(j) for j in i))

# words_tuple = ('quaint', 'leftovers', 'thesis', 'density', 'retired', 'weak', 'tolerate',
#                'sensitivity', 'primary', 'definition', 'determine', 'bring', 'monstrous',
#                'hurl', 'timetable', 'month', 'advocate', 'provoke', 'stress', 'omission')
# for i in words_tuple:
#     print(f'–î–ª–∏–Ω–∞ —Å–ª–æ–≤–∞ {i} = {len(i)}')

# my_tuple = (
# -214, 181, -139, 448, -664, -66, 213, 832, 717, -462, -924, -706, -85, -244, -222, -340, -482, -518, -781, 759, -593,
# 905, -354, -377, -141, -742, 383, -381, 109, -639, -480, -810, -686, 892, -612, 696, 993, 791, 631, -493, -218, -829,
# -275, 619, -628, -241, -565, -835, -69, 747, 711, -252, -811, -407, -153, 904, 933, -254, 307, -493, -419, -109, -543,
# 155, -127, 613, -452, -459, 856, 562, 333, -66, -77, -598, -779, -278, 867, 321, -20, -415, -357, 735, -906, -14, -370,
# 453, -630, -736, -830, -917, 32, 422, -895, 198, 284, 472, -986, -964, -73, 29)
# l = []
# for i in my_tuple:
#     if i %2!=0:
#         l.append(i)
# print(sum(l)/len(l))

# currencies = {
#     'Argentine Peso': 118362.205708,
#     'Australian Dollar': 1586.232315,
#     'Bahraini Dinar': 423.780164,
#     'Botswana Pula': 13168.450636,
#     'Brazilian Real': 5954.781483,
#     'British Pound': 834.954104,
#     'Bruneian Dollar': 1520.451015,
#     'Bulgarian Lev': 1955.83,
#     'Canadian Dollar': 1430.54405,
#     'Chilean Peso': 898463.818465,
#     'Chinese Yuan Renminbi': 7171.445692,
#     'Colombian Peso': 4447741.922165,
#     'Croatian Kuna': 7527.744707,
#     'Czech Koruna': 24313.797041,
#     'Danish Krone': 7440.613895,
#     'Emirati Dirham': 4139.182587,
#     'Hong Kong Dollar': 8786.255952,
#     'Hungarian Forint': 355958.035747,
#     'Icelandic Krona': 143603.932438,
#     'Indian Rupee': 84241.767127,
#     'Indonesian Rupiah': 16187150.010697,
#     'Iranian Rial': 47534006.535121,
#     'Israeli Shekel': 3569.191411,
#     'Japanese Yen': 129149.364679,
#     'Kazakhstani Tenge': 489292.515538,
#     'Kuwaiti Dinar': 340.959682,
#     'Libyan Dinar': 5196.539901,
#     'Malaysian Ringgit': 4717.485104,
#     'Mauritian Rupee': 49212.933037,
#     'Mexican Peso': 23130.471272,
#     'Nepalese Rupee': 134850.008728,
#     'New Zealand Dollar': 1703.649473,
#     'Norwegian Krone': 9953.078431,
#     'Omani Rial': 433.360301,
#     'Pakistani Rupee': 198900.635421,
#     'Philippine Peso': 57574.278782,
#     'Polish Zloty': 4579.273862,
#     'Qatari Riyal': 4102.552652,
#     'Romanian New Leu': 4946.638369,
#     'Russian Ruble': 86197.012666,
#     'Saudi Arabian Riyal': 4226.530892,
#     'Singapore Dollar': 1520.451015,
#     'South African Rand': 17159.831129,
#     'South Korean Won': 1355490.097163,
#     'Sri Lankan Rupee': 228245.645722,
#     'Swedish Krona': 10439.125427,
#     'Swiss Franc': 1037.792217,
#     'Taiwan New Dollar': 31334.286611,
#     'Thai Baht': 37436.518169,
#     'Trinidadian Dollar': 7636.35428,
#     'Turkish Lira': 15078.75981,
#     'US Dollar': 1127.074905,
#     'Venezuelan Bolivar': 511082584.868731
# }
# val = input()
# # if val in currencies:
# #     print(currencies[val])
# # else:
# #     print(f'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {val}')
#
#
# print(currencies[val] if val in currencies else f'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {val}')

# account = {
#   "id": 3136,
#   "uid": "1359acc6-f07a-4a2a-984e-3fb809982948",
#   "account_number": "0847799459",
#   "iban": "GB90XTND56373623909314",
#   "bank_name": "ABN AMRO HOARE GOVETT CORPORATE FINANCE LTD.",
#   "routing_number": "126602476",
#   "swift_bic": "BCYPGB2LHGB"
# }
# # keys = []
# # for i in account:
# #     keys.append(i)
# # print(keys)
# print(keys := list(account))
#
# user = {
#     "id": 4170,
#     "uid": "5e941db5-9e0f-4f94-9fc5-734110c6be14",
#     "password": "SyUpfo1ljm",
#     "first_name": "Teresa",
#     "last_name": "Wehner",
#     "username": "teresa.wehner",
#     "email": "teresa.wehner@email.com",
#     "gender": "Non-binary",
#     "phone_number": "+674 424.561.2776",
#     "social_insurance_number": "637316241",
#     "date_of_birth": "1993-08-17"
# }
# user.pop('password')
# user.pop('last_name')
# user.setdefault("secret", "SyUpfo1ljm")
# user.setdefault("surname", "Wehner")
# print(user)


# s = input('–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É! –ü–æ–¥—Å—á–∏—Ç–≤–∞–µ–º –µ–µ –±—É–∫–≤—ã: ')
# d = {}
# for i in s:
#     if i in d:
#         d[i] += 1
#     else:
#         d[i] = 1
# print(d)
# for letter, count in d.items():
#     print(letter, count)

# workers = {
#     'employer1': {'name': 'Jhon', 'salary': 7500},
#     'employer2': {'name': 'Emma', 'salary': 8000},
#     'employer3': {'name': 'Brad', 'salary': 500}
# }
# workers['employer3']['salary']=8500
# print(workers)

# supermarket = {
#     "milk": {"quantity": 20, "price": 1.19},
#     "biscuits": {"quantity": 32, "price": 1.45},
#     "butter": {"quantity": 20, "price": 2.29},
#     "cheese": {"quantity": 15, "price": 1.90},
#     "bread": {"quantity": 15, "price": 2.59},
#     "cookies": {"quantity": 20, "price": 4.99},
#     "yogurt": {"quantity": 18, "price": 3.65},
#     "apples": {"quantity": 35, "price": 3.15},
#     "oranges": {"quantity": 40, "price": 0.99},
#     "bananas": {"quantity": 23, "price": 1.29}
# }
# coast = 0
# for i in supermarket:
#     coast += supermarket[i]["quantity"] * supermarket[i]["price"]
# print(coast)
#
# s = 0
# for v in supermarket.values():
#     s += v.get('quantity') * v.get('price')
# print(s)

# my_list = [56, 59, 53, 75, 62, 61, 75, 65, 59, 62, 64, 53,
#            54, 62, 69, 53, 55, 62, 54, 66, 55, 57, 58, 75,
#            72, 55, 51, 56, 71, 66, 57, 56, 59, 73, 68, 57,
#            50, 54, 62, 68, 59, 64, 59, 59, 71, 68, 57, 54, 53, 72]
# my_set = set(my_list)
# print(sum(my_set)/len(my_set))

# name = set(input())
# print('CHAT WITH HER!' if len(name) % 2 == 0 else 'IGNORE HIM!')

# print(['NO', 'YES'][len(set(input().lower())) == 26])

# y = int(input()) + 1
# while len(set(str(y))) != 4:
#     y += 1
# print(y)
#
# user = {
#     "id": 4170,
#     "uid": "5e941db5-9e0f-4f94-9fc5-734110c6be14",
#     "password": "SyUpfo1ljm",
#     "first_name": "Teresa",
#     "last_name": "Wehner",
#     "username": "teresa.wehner",
#     "email": "teresa.wehner@email.com",
#     "gender": "Non-binary",
#     "phone_number": "+674 424.561.2776",
#     "social_insurance_number": "637316241",
#     "date_of_birth": "1993-08-17",
#     "employment": {
#         "title": "Central Hospitality Liaison",
#         "key_skill": "Organisation"
#     },
#     "subscription": {
#         "plan": "Essential",
#         "status": "Idle",
#         "payment_method": "Debit card",
#         "term": "Annual"
#     }
# }
# print({key: user[key] for key in input().split()})

#
# set_a = {31, 37, 39, 41, 47, 58, 60, 62, 70, 75,
#          76, 77, 78, 79, 80, 81, 85, 86, 88, 90, 93, 96, 98, 99}
#
# set_b = {0, 1, 8, 16, 17, 18, 22, 24, 29, 31,
#          33, 34, 36, 42, 46, 47, 51, 53, 62, 64, 65, 66, 67}
#
# print(len(set_a ^ set_b))
# print(len(set_b - set_a))

# A = {'a', 'b', 'c', 'd'}
# B = {'c', 'd', 'e'}
# print(B - A)

# words = ['mention', 'soup', 'pneumonia', 'tradition', 'concert', 'tease', 'generation',
#          'winter', 'national', 'jacket', 'winter', 'wrestle', 'proposal', 'error',
#          'pneumonia', 'concert', 'value', 'value', 'disclose', 'glasses', 'tank',
#          'national', 'soup', 'feel', 'few', 'concert', 'wrestle', 'proposal', 'soup',
#          'sail', 'brown', 'service', 'proposal', 'winter', 'jacket', 'mention', 'tradition',
#          'value', 'feel', 'bear', 'few', 'value', 'winter', 'proposal', 'government',
#          'control', 'value', 'few', 'generation', 'service', 'national',
#          'tradition', 'government', 'mention', 'proposal']
# print(len([i for i in set(words) if len(i) > 6]))

# english_words = ('attack', 'bless', 'look', 'reckless', 'short', 'monster', 'trolley', 'sound',
#                  'ambiguity', 'researcher', 'trunk', 'coat', 'quantity', 'question', 'tenant',
#                  'miner', 'definite', 'kit', 'spectrum', 'satisfied', 'selection', 'carve',
#                  'ask', 'go', 'suggest')
#
# for index, value in enumerate(english_words,1):
#   print(f'Word ‚Ññ {index} = {value}')
#
# [print(f'Word ‚Ññ {key} = {value}') for key, value in enumerate(english_words, 1)]

# lst = list(map(int, input()))
# for i in range (len(lst)):
#     if i % 2 == 0:
#         if lst[i] * 2 > 9:
#             lst[i] = lst[i] * 2 - 9
#         else:
#             lst[i] *= 2
# if sum(lst) % 10 == 0:
#     print(True)
# else:
#     print(False)


# keys = ['Ten', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety', 'One hundred']
# values = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
# result = dict(zip(keys, values))
# print(result)

# employees = [
#     'Pankratiy', 'Innokentiy', 'Anfisa', 'Yaroslava', 'Veniamin',
#     'Leonti', 'Daniil', 'Mishka', 'Lidochka',
#     'Terenti', 'Vladik', 'Svetka', 'Maks', 'Yura', 'Sergei'
# ]
#
# identifiers = [77, 48, 88, 85, 76, 81, 62, 43, 5, 56, 17, 20, 37, 32, 96]
#
# employees_data = dict(zip(sorted(identifiers), sorted(employees)))
# print(employees_data)

# def fake_bin(x):
#     res = ''
#     for i in x:
#         if int(i) < 5:
#             res += '0'
#         else:
#             res += '1'
#     return res
#
#
# x = input()
# print(fake_bin(x))

# def count_sheep(n):
#     res = ''
#     for i in range(1, n+1):
#         res += f"{i} sheep..."
#     return res
#
# print(count_sheep(int(input())))

# def remove_char(s):
#     return s[1:-1]
#
# print(remove_char('qwerty'))

# def remove_exclamation_marks(s):
#     return s.replace('!', '')

# def abbrev_name(name):
#     return ".".join([w[0].upper() for w in name.split()])

# def area_or_perimeter(l, w):
#     return l * w if l == w else 2 * (l + w)

# def dna_to_rna(dna):
#     return dna.replace('T','U')
#
# print( dna_to_rna("GACCGCCGCC"))


# def rps(p1, p2):
#     if p1 == p2:
#         return "Draw!"
#     elif p1 == "scissors" and p2 == "paper" or p1 == "paper" and p2 == "rock" or p1 == "rock" and p2 == "scissors":
#         return "Player 1 won!"
#     else:
#         return "Player 2 won!"

#
# def basic_op(operator, value1, value2):
#     if operator =='+': return int(value1) + int(value2)
#     if operator =='-': return int(value1) - int(value2)
#     if operator =='*': return int(value1) * int(value2)
#     if operator =='/': return int(value1) / int(value2)
#
# print(basic_op("+", 2, 3))

# def disemvowel(string):
#     for i in "aeiouAEIOU":
#         string = string.replace(i, "")
#     return string
#
# def disemvowel(string):
#     return "".join(c for c in string if c.lower() not in "aeiou")
#
# print(disemvowel('This website is for losers LOL'))
#
#
# def high_and_low(numbers):
#     a, b = max(numbers.split()), min(numbers.split())
#     return ' '.join([(a), (b)])
#
# print(high_and_low("1 2 3 4 5"))  # return "5 1")
# print(high_and_low("1 2 -3 4 5")) # return "5 -3")
# print(high_and_low("1 9 3 4 -5")) # return "9 -5")

# def longest(a1, a2):
#     return ''.join(sorted(set(a1+a2)))
#
# a = "xyaabbbccccdefww"
# b = "xxxxyyyyabklmopq"
# print(longest(a, b)) #-> "abcdefklmopqwxy"


# def get_middle(s):
#     if len(s) % 2 == 0:
#         return s[1:-1]
#     else:
#         return s[int(len(s)/2-0.5)]
#
#     return s[len(s) // 2] if len(s) % 2 != 0 else s[len(s) // 2 - 1:len(s) // 2 + 1]
#
# print(get_middle('id'))

# def descending_order(num):
#     return num[::-1].sort
#
# print(descending_order(145263))


# def get_count(sentence):
#     cnt = 0
#     for i in sentence:
#         if i in "aeiou":
#             cnt += 1
#     return cnt
#
# print(get_count('asdfe'))

# def friend(x):
#     a = []
#     for i in x:
#         if len(i) == 4:
#             a.append(i)
#     return a
#
# print(friend(["Ryan", "Kieran", "Mark",]))

# def is_isogram(string):
#     return len(string) == len(set(string.lower()))
#
# def generate_hashtag(s):
#     return '#'+''.join(s.replace(' ', ''))
#
# print(generate_hashtag('Codewars Is Nice'))

# def reverse_words(text):
#   return ' '.join([word[::-1] if len(word)>=5 else word for word in text.split(' ') ])
#
# print(reverse_words("This is an example!"))

# def spin_words(sentence):
#   return ' '.join([word[::-1] if len(word)>=5 else word for word in sentence.split(' ') ])
#
# print(spin_words("This is an example"))

# def is_divisible(n,x,y):
#     return n%x == 0 and n%y == 0
#
# print(is_divisible(12,2,6))

# def make_readable(seconds):
#     h = seconds // 3600
#     m = (seconds - h * 3600) // 60
#     s = seconds - (h * 3600) - (m * 60)
#     return f"{h:0>2d}:{m:0>2d}:{s:0>2d}"

# print(sum([int(input()) for i in range(int(input()))]))

# x = [1, 2, 3]
# y = x
# y.append(4)
#
# s = "123"
# t = s
# t = t + "4"
#
# print(str(x) + " " + s)

# # objects = [1, 2, 1, 2, 3]
# ans = 0
# objA = []
# for obj in objects:
#     if id(obj) not in objA:
#         ans += 1
#         objA.append(id(obj))
#
# print(ans)

# a = []
# def foo(arg1, arg2):
#   a.append("foo")
# foo(a.append("arg1"), a.append("arg2"))
# print(a)

# class Stack:
#     def __init__(self):
#         self.values = []
#         self.size = 0
#         self.maxsize = 0
#
#     def push(self, element):
#         self.values.append(element)
#         self.size += 1
#         if self.maxsize < self.size:
#             self.maxsize = self.size
#
#         print(self.values, '| size =', self.size, '| maxsize =', self.maxsize)
#
#     def pop(self):
#         assert self.size > 0, '–ù–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –ø—É—Å—Ç–æ–≥–æ —Å—Ç–µ–∫–∞'
#         element = self.values.pop()
#         self.size -= 1
#         print(self.values, '| size =', self.size, '| maxsize =', self.maxsize)
#         return element
#
# stack = Stack()
# stack.push('module')
#
# def h():
#     stack.push('h')
#     stack.push('print')
#     print(12)
#     stack.pop()  # print
#     stack.pop()  # h
#
# def f():
#     stack.push('f')
#     g(h)
#     stack.pop()  # f
#
# def g(a):
#     stack.push('g')
#     a()
#     stack.pop()  # g
#
# g(f)
# print('\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç–µ–∫–∞ (maxsize) =', stack.maxsize)


# def closest_mod_5(x):
#     if x % 5 == 0:
#         return x
#     return "I don't know :("

# def C(n, k):
#     if k == 0:
#         return 1
#     elif k > n:
#         return 0
#     else:
#         return C(n - 1, k) + C(n - 1, k - 1)
#
#
# n, k = map(int, input().split())
# print(C(n, k))


# class A:
#     def __init__(self, val=0):
#         self.val = val
#
#     def add(self, x):
#         self.val += x
#
#     def print_val(self):
#         print(self.val)
#
#
# a = A()
# b = A(2)
# c = A(4)
# a.add(2)
# b.add(2)
#
# a.print_val()
# b.print_val()
# c.print_val()

# class MoneyBox:
#     def __init__(self, capacity):
#         self.capacity = capacity
#         self.count = 0
#
#     def can_add(self, v):
#         return self.count + v <= self.capacity
#
#     def add(self, v):
#         if self.can_add(v):
#             self.count += v

# class Buffer:
#
#     def __init__(self):
#         self.current_part = []
#
#     def add(self, *a):
#         self.current_part.extend(a)
#         while len(self.current_part) - 5 >= 0:
#             print(sum(self.current_part[0:5]))
#             self.current_part = self.current_part[5:]
#
#     def get_current_part(self):
#         return self.current_part
#
# buf = Buffer()
# buf.add(1, 2, 3)
# buf.get_current_part() # –≤–µ—Ä–Ω—É—Ç—å [1, 2, 3]
# buf.add(4, 5, 6) # print(15) ‚Äì –≤—ã–≤–æ–¥ —Å—É–º–º—ã –ø–µ—Ä–≤–æ–π –ø—è—Ç–µ—Ä–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
# buf.get_current_part() # –≤–µ—Ä–Ω—É—Ç—å [6]
# buf.add(7, 8, 9, 10) # print(40) ‚Äì –≤—ã–≤–æ–¥ —Å—É–º–º—ã –≤—Ç–æ—Ä–æ–π –ø—è—Ç–µ—Ä–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
# buf.get_current_part() # –≤–µ—Ä–Ω—É—Ç—å []
# buf.add(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1) # print(5), print(5) ‚Äì –≤—ã–≤–æ–¥ —Å—É–º–º —Ç—Ä–µ—Ç—å–µ–π –∏ —á–µ—Ç–≤–µ—Ä—Ç–æ–π –ø—è—Ç–µ—Ä–∫–∏
# buf.get_current_part() # –≤–µ—Ä–Ω—É—Ç—å [1]

# class A:
#     val = 1
#
#     def foo(self):
#         A.val += 2
#
#     def bar(self):
#         self.val += 1
#
#
# a = A()
# b = A()
#
# a.bar()
# a.foo()
#
# c = A()
#
# print(a.val)
# print(b.val)
# print(c.val)

# classes = {}
#
# def add_class(classes, class_name, parents):
#     if class_name not in classes:
#         classes[class_name] = []
#     classes[class_name].extend(parents)
#     for parent in parents:
#         if parent not in classes:
#             classes[parent] = []
#
# def found_path(classes, start, end, path=[]):
#     path = path + [start]
#     if start == end:
#         return path
#     if start not in classes:
#         return None
#     for node in classes[start]:
#         if node not in path:
#             newpath = found_path(classes, node, end, path)
#             if newpath: return newpath
#     return None
#
# def answer(classes, parent, child):
#     if not(parent or child) in classes or not found_path(classes, child, parent):
#         return 'No'
#     return 'Yes'
#
# n = int(input())
# for _ in range(n):
#     class_description = input().split()
#     class_name = class_description[0]
#     class_parents = class_description[2:]
#     add_class(classes, class_name, class_parents)
#
# q = int(input())
# for _ in range(q):
#     question = input().split()
#     parent = question[0]
#     child = question[1]
#     print(answer(classes, parent, child))


# class LoggableList(Loggable, list):
#     def append(self, arg):
#         super(LoggableList, self).append(arg)
#         self.log(arg)

# class Color:
#     red = 0
#     green = 0
#     blue = 0
#
#     def __init__(self, r, g, b):
#         red = r
#         green = g
#         blue = b
#
#     def toHex(self):
#         return '#%02x%02x%02x' % (red, green, blue)
#
#
# grey = Color(80, 80, 80)

# class Point(object):
#     def __init__(self, x, y, z):
#         self.coord = (x, y, z)
#
# p = Point(13, 14, 15)
# print(p.coord) # (13, 14, 15)


# class Point:
#     color = 'red'
#     circle = 2
#
#     def set_coords(self, x, y):
#         self.x = x
#         self.y = y
#
# pt = Point()
# pt.set_coords(10, 20)
#
# print(pt.__dict__)


# class Calculator:
#     def add(self, a, b):
#         return a + b
#
#     def subtract(self, a, b):
#         return a - b
#
#     def multiply(self, a, b):
#         return a * b
#
#     def divide(self, a, b):
#         return a / b


# # create a calculator object
# my_calc = Calculator()
#
# while True:
#
#     print("1: Add")
#     print("2: Subtract")
#     print("3: Multiply")
#     print("4: Divide")
#     print("5: Exit")
#
#     operation = int(input("Select operation: "))
#
#     # Make sure the user have entered the valid choice
#     if operation in (1, 2, 3, 4, 5):
#
#         # first check whether user want to exit
#         if (operation == 5):
#             break
#
#         # If not then ask fo the input and call appropiate methods
#         a = int(input("Enter first number: "))
#         b = int(input("Enter second number: "))
#
#         if (operation == 1):
#             print(a, "+", b, "=", my_calc.add(a, b))
#         elif (operation == 2):
#             print(a, "-", b, "=", my_calc.subtract(a, b))
#         elif (operation == 3):
#             print(a, "*", b, "=", my_calc.multiply(a, b))
#         elif (operation == 4):
#             print(a, "/", b, "=", my_calc.divide(a, b))
#
#     else:
#         print("Invalid Input")






