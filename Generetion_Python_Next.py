# from math import sqrt
# a, b = int(input()), int(input())
# print(a + b)  # —Å—É–º–º—É —á–∏—Å–µ–ª a –∏ b;
# print(a - b)  # —Ä–∞–∑–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª a –∏ b;
# print(a * b)  # –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–µ–ª a –∏ b;
# print(a / b)  # —á–∞—Å—Ç–Ω–æ–µ —á–∏—Å–µ–ª a –∏ b;
# print(a // b)  # —Ü–µ–ª—É—é —á–∞—Å—Ç—å –æ—Ç –¥–µ–ª–µ–Ω–∏—è —á–∏—Å–ª–∞ a –Ω–∞ b;
# print(a % b)  # –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è —á–∏—Å–ª–∞ a –Ω–∞ b;
# print(sqrt(a**10 + b**10))  # –∫–æ—Ä–µ–Ω—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∏–∑ —Å—É–º–º—ã –∏—Ö 10-—Ö —Å—Ç–µ–ø–µ–Ω–µ–π: sqrt{a^{10} + b^{10}}

# –ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞
# def my_imt(m, r):
#     imt = m / (r * r)
#     if 18.5 <= imt <= 25:
#         return "–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –º–∞—Å—Å–∞"
#     elif imt < 18.5:
#         return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞"
#     elif imt > 25:
#         return "–ò–∑–±—ã—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞"
#
#
# m = float(input())
# r = float(input())
#
# print(my_imt(m, r))


# –°—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏
# def coast(text):
#     rub = len(text) * 0.6
#     kop = len(text) * 60 % 100
#     return f'{int(rub)} —Ä. {kop} –∫–æ–ø.'
#
# stroka = input()
# print(coast(stroka))


# string = input()
# price = 60 * len(string)
#
# print(f'{price // 100} —Ä. {price % 100} –∫–æ–ø.')


##–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
# print(len(list(input().split())))

# –ó–æ–¥–∏–∞–∫
# sp = ['–î—Ä–∞–∫–æ–Ω', '–ó–º–µ—è', '–õ–æ—à–∞–¥—å', '–û–≤—Ü–∞', '–û–±–µ–∑—å—è–Ω–∞', '–ü–µ—Ç—É—Ö', '–°–æ–±–∞–∫–∞', '–°–≤–∏–Ω—å—è', '–ö—Ä—ã—Å–∞', '–ë—ã–∫', '–¢–∏–≥—Ä', '–ó–∞—è—Ü',
#       '–î—Ä–∞–∫–æ–Ω']
# print(sp[(int(input())-8) % 12])
#
#
# # 8,9,10,11,0,1,2,3,4,5,6,7  - %
# #
# # 0,1,2,3,4,5,6,7,8,9,10,11

# –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç —á–∏—Å–ª–∞
# a = input()
# if len(a) == 5:
#       print(int(a[::-1]))
# elif len(a) == 6:
#       print(int(a[0]+a[-1:0:-1]))


# Standard American Convention
# print(f"{int(input()):,}")


# –ó–∞–¥–∞—á–∞ –ò–æ—Å–∏—Ñ–∞ –§–ª–∞–≤–∏—è üå∂Ô∏èüå∂Ô∏è
# n, k = int(input()), int(input())
# counter = 0
# for i in range(1, n + 1):
#     counter = (counter + k) % i
# print(counter + 1)


# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã–µ —á–µ—Ç–≤–µ—Ä—Ç–∏
# n = int(input())
# counter1 = counter2 = counter3 = counter4 = 0
# for i in range(n):
#     x, y = map(int, input().split())
#     if x > 0 and y > 0:
#         counter1 += 1
#     elif x < 0 and y > 0:
#         counter2 += 1
#     elif x < 0 and y < 0:
#         counter3 += 1
#     elif x > 0 and y < 0:
#         counter4 += 1
# print(f'–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å: {counter1}')
# print(f'–í—Ç–æ—Ä–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å: {counter2}')
# print(f'–¢—Ä–µ—Ç—å—è —á–µ—Ç–≤–µ—Ä—Ç—å: {counter3}')
# print(f'–ß–µ—Ç–≤–µ—Ä—Ç–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å: {counter4}')

# –ë–æ–ª—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
# s = list(map(int, input().split()))
# counter = 0
# for i in range(len(s)-1):
#     if s[i+1] > s[i]:
#         counter += 1
# print(counter)


# –ù–∞–∑–∞–¥, –≤–ø–µ—Ä—ë–¥ –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
# s = input().split()
# for i in range(0, len(s)-1, 2):
#     s[i], s[i+1] = s[i+1], s[i]
# print(*s, end=' ')

# –°–¥–≤–∏–≥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏
# s = input().split()
# s.insert(0, s[-1])
# del s[-1]
# print(*s)

# –†–∞–∑–ª–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
# s = input().split()
# s1 = []
# for i in s:
#     if i not in s1:
#         s1.append(i)
# print(len(s1))

# –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–µ–ª
# l = [int(input()) for n in range(int(input()))]
# n = int(input())
# fl = False
#
# for i in range(len(l)):
#     for j in range(i + 1, len(l)):
#         if l[i] * l[j] == n:
#             fl = True
#             break
#
# print('–î–ê' if fl == True else '–ù–ï–¢')

# –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞
# t, r = input(), input()
# if t == r:
#     print('–Ω–∏—á—å—è')
# elif t == '–∫–∞–º–µ–Ω—å' and r == '–Ω–æ–∂–Ω–∏—Ü—ã' or t == '–Ω–æ–∂–Ω–∏—Ü—ã' and r == '–±—É–º–∞–≥–∞' or t == '–±—É–º–∞–≥–∞' and r == '–∫–∞–º–µ–Ω—å':
#     print('–¢–∏–º—É—Ä')
# else:
#     print('–†—É—Å–ª–∞–Ω')


# –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞, —è—â–µ—Ä–∏—Ü–∞, –°–ø–æ–∫ üå∂Ô∏è
# timur = input()
# ruslan = input()
# result = {'–∫–∞–º–µ–Ω—å': ['–Ω–æ–∂–Ω–∏—Ü—ã', '—è—â–µ—Ä–∏—Ü–∞'],
#           '–Ω–æ–∂–Ω–∏—Ü—ã': ['–±—É–º–∞–≥–∞', '—è—â–µ—Ä–∏—Ü–∞'],
#           '–±—É–º–∞–≥–∞': ['–∫–∞–º–µ–Ω—å', '–°–ø–æ–∫'],
#           '–°–ø–æ–∫': ['–Ω–æ–∂–Ω–∏—Ü—ã', '–∫–∞–º–µ–Ω—å'],
#           '—è—â–µ—Ä–∏—Ü–∞': ['–±—É–º–∞–≥–∞', '–°–ø–æ–∫']}
# if timur == ruslan:
#     print('–Ω–∏—á—å—è')
# else:
#     if ruslan in result[timur]:
#         print('–¢–∏–º—É—Ä')
#     else:
#         print('–†—É—Å–ª–∞–Ω')

# –û—Ä–µ–ª –∏ —Ä–µ—à–∫–∞
# stroka = input().split('–û')
# res = max(stroka, key=len)
# print(len(res))

# –ö—Ä–µ–º–Ω–∏–µ–≤–∞—è –¥–æ–ª–∏–Ω–∞ üå∂Ô∏èüå∂Ô∏è
# for i in range(int(input())):
#     s, virus, x  = input(), 'anton', 0
#     for sym in s:
#         if sym == virus[x]:
#             x += 1
#         if x == 5:
#             print(i + 1, end=' ')
#             break


# –†–æ—Å–∫–æ–º–Ω–∞–¥–∑–æ—Ä –∑–∞–ø—Ä–µ—Ç–∏–ª –±—É–∫–≤—É –∞ üå∂Ô∏èüå∂Ô∏è
# word = input() + ' –∑–∞–ø—Ä–µ—Ç–∏–ª –±—É–∫–≤—É'
# alpha = [chr(i) for i in range(1072, 1104)]
#
# for letter in alpha:
#     if letter in word:
#         print(word, letter)
#         word = word.replace(letter, '').replace('  ', ' ').strip()

# –ü—Ä–µ–¥–∏–∫–∞—Ç –¥–µ–ª–∏–º–æ—Å—Ç–∏
# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def func(num1, num2):
#     if num1 % num2 == 0:
#         return True
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# num1, num2 = int(input()), int(input())
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# if func(num1, num2):
#     print('–¥–µ–ª–∏—Ç—Å—è')
# else:
#     print('–Ω–µ –¥–µ–ª–∏—Ç—Å—è')

'''
–º–µ—Ç–æ–¥ append() –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞.
–º–µ—Ç–æ–¥ extend() —Ä–∞—Å—à–∏—Ä—è–µ—Ç –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫ –¥—Ä—É–≥–∏–º —Å–ø–∏—Å–∫–æ–º.
–º–µ—Ç–æ–¥ insert() –≤—Å—Ç–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –≤ –∑–∞–¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏.
–º–µ—Ç–æ–¥ index() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–∞–≤–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É –≤ –º–µ—Ç–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—é.
–º–µ—Ç–æ–¥ remove() —É–¥–∞–ª—è–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–∞–≤–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É –≤ –º–µ—Ç–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—é.
–º–µ—Ç–æ–¥ pop() —É–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ.
–º–µ—Ç–æ–¥ count() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ, –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–≤–Ω—ã –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É –≤ –º–µ—Ç–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—é.
–º–µ—Ç–æ–¥ reverse() –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ, —Ç–æ –µ—Å—Ç—å –º–µ–Ω—è–µ—Ç –µ–≥–æ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π.
–º–µ—Ç–æ–¥ copy() —Å–æ–∑–¥–∞–µ—Ç –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—É—é –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞.
–º–µ—Ç–æ–¥ clear() —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞.
–æ–ø–µ—Ä–∞—Ç–æ—Ä del –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–∞–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ú–µ—Ç–æ–¥—ã —Å—Ç—Ä–æ–∫, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏:
–º–µ—Ç–æ–¥ split() —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–ª–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤,
—Å–∏–º–≤–æ–ª —Ç–∞–±—É–ª—è—Ü–∏–∏ (\t) –∏–ª–∏ —Å–∏–º–≤–æ–ª –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (\n).
–º–µ—Ç–æ–¥ join() —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è —Å—Ç—Ä–æ–∫—É,
–∫ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –º–µ—Ç–æ–¥.
'''

# list1 = [10, 20, [300, 400, [5000, 6000], 500], 30, 40]
# list1[2][2].append(7000)
# # print(list1)  #-> [10, 20, [300, 400, [5000, 6000, 7000], 500], 30, 40]

# list1 = ['a', 'b', ['c', ['d', 'e', ['f', 'g'], 'k'], 'l'], 'm', 'n']
# sub_list = ['h', 'i', 'j']
# list1[2][1][2].extend(sub_list)
# print(list1)   #->['a', 'b', ['c', ['d', 'e', ['f', 'g', 'h', 'i', 'j'], 'k'], 'l'], 'm', 'n']


# list1 = [[1, 7, 8], [9, 7, 102], [6, 106, 105], [100, 99, 98, 103], [1, 2, 3]]
# maximum = -1
# for i in list1:
#     if max(i) > maximum:
#         maximum = max(i)
# print(maximum)


# list1 = [[1, 7, 8], [9, 7, 102], [102, 106, 105], [100, 99, 98, 103], [1, 2, 3]]
# for i in list1:
#     i.reverse()
#
# print(list1)  #->[[8, 7, 1], [102, 7, 9], [105, 106, 102], [103, 98, 99, 100], [3, 2, 1]]

# list1 = [[1, 7, 8], [9, 7, 102], [102, 106, 105], [100, 99, 98, 103], [1, 2, 3]]
# total = 0
# counter = 0
# for i in list1:
#     total += sum(i)
#     counter += len(i)
#
#
# print(total)
# print(counter)
# print(total/counter)


# n, m = int(input()), int(input())    # —Å—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è n –∏ m
# my_list = [[0] * m for _ in range(n)]
# print(my_list)

# –°—á–∏—Ç—ã–≤–∞–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
# n = 4                                          # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ (—ç–ª–µ–º–µ–Ω—Ç–æ–≤)
# my_list = []
#
# for _ in range(n):
#     elem = [int(i) for i in input().split()]   # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–æ–∫–∏
#     my_list.append(elem)

# –ü–µ—Ä–µ–±–æ—Ä –∏ –≤—ã–≤–æ–¥ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
# my_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
# for i in range(len(my_list)):
#     for j in range(len(my_list[i])):
#         print(my_list[i][j], end=' ')   # –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä end
#     print()                             # –ø–µ—Ä–µ–Ω–æ—Å –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É


# my_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
# for row in my_list:
#     for elem in row:
#         print(elem, end=' ')
#     print()

# my_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
# for i in range(len(my_list)):
#     for j in range(len(my_list[i])):
#         print(my_list[j][i], end=' ')    # –≤—ã–≤–æ–¥–∏–º my_list[j][i] –≤–º–µ—Å—Ç–æ my_list[i][j]
#     print()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
# –ø–æ –∏–Ω–¥–µ–∫—Å—É
# my_list = [[1, 9, 8, 7, 4], [7, 3, 4], [2, 1]]
# total = 0
# for i in range(len(my_list)):
#     for j in range(len(my_list[i])):
#         total += my_list[i][j]
# print(total)

# –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º
# my_list = [[1, 9, 8, 7, 4], [7, 3, 4], [2, 1]]
# total = 0
# for row in my_list:
#     for elem in row:
#         total += elem
# print(total)


# n = 3
# list1 = []
# for _ in range(n):
#     row = input().split()
#     list1.extend(row)
# print(list1)   #-> ['9', '7', '6', '2', '1', '3', '4', '45', '67']


# my_list = [[12, 221, 3], [41, 5, 633], [71, 8, 99]]
#
# maximum = my_list[0][0]
# minimum = my_list[0][0]
#
# for row in my_list:
#     if max(row) > maximum:
#         maximum = max(row)
#     if min(row) < minimum:
#         minimum = min(row)
#
# print(maximum + minimum)


# –°–ø–∏—Å–æ–∫ –ø–æ –æ–±—Ä–∞–∑—Ü—É 1
# n = int(input())
# matrix = [[i for i in range(1, n + 1)] for j in range(1, n + 1)]
# print(*matrix, sep='\n')

# n = int(input())
# matrix = []
# for i in range(1, n + 1):
#    matrix.append(i)
# for j in range(1, n + 1):
#    print(matrix)

# –°–ø–∏—Å–æ–∫ –ø–æ –æ–±—Ä–∞–∑—Ü—É 2
# n = int(input())
# matrix = [[j for j in range(1, i + 1)] for i in range(1, n + 1)]
# print(*matrix, sep='\n')

# n = int(input())
# matrix = []
# for i in range(1, n + 1):
#     matrix.append(i)
#     print(matrix)

# –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –ü–∞—Å–∫–∞–ª—è 1 üå∂Ô∏è
# n = int(input())
#
# li = [1]
# for i in range(n):
#     for j in range(len(li) - 1):
#         li[j] = li[j] + li[j + 1]
#     li.insert(0, 1)
#
# print(li)
#
# from math import factorial
# n = int(input())
# b = []
# for i in range(n+1):
#     b.append (int((factorial(n))/(factorial(i)*factorial(n-i))))
# print(b)


# a = [1]
# for i in range(int(input())):
#     a = [x + y for x, y in zip([*a, 0], [0, *a])]
# print(a)

# –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –ü–∞—Å–∫–∞–ª—è 2
# n = int(input())
# P=[]
# for i in range(0,n):
#     row=[1]*(i+1)
#     for j in range(i+1):
#         if j!=0 and j!=i:
#             row[j]=P[i-1][j-1]+P[i-1][j]
#     P.append(row)
#
# for r in P:
#     print(*r)

# # -------------------–§–£–ù–ö–¶–ò–Ø-------------------
# def pascal(n):
#     triangle = [[1]]
#
#     for i in range(n - 1):
#         row = [1]
#         for j in range(1, len(triangle[i])):
#             row += [sum(triangle[i][j - 1: j + 1])]
#         row += [1]
#         triangle.append(row.copy())
#
#     return triangle
#
#
# # --------------------–í–´–ó–û–í--------------------
# [print(*row) for row in pascal(int(input()))]


# –£–ø–∞–∫–æ–≤–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ üå∂Ô∏è
# res = []
# for el in input().split():
#     if res and el in res[-1]:
#         res[-1].append(el)
#     else:
#         res.append([el])
# print(res)
#
# #–†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏ üå∂Ô∏è
# def chunked(st, n):
#     st = st.split()
#     a = [[] for _ in range(0, len(st), n)]
#     for i in range(len(a)):
#         a[i].extend(st[:n])
#         st = st[n:]
#     return a
#
# string = input()
# num = int(input())
#
# print(chunked(string, num))

# –ü–æ–¥—Å–ø–∏—Å–∫–∏ —Å–ø–∏—Å–∫–∞ üå∂Ô∏èüå∂Ô∏è
# n = input().split()
# sp = [[]]
# k = 1
# while k != len(n) + 1:
#     for j in range(len(n)):
#         if len(n[j:j + k]) == k:
#             sp.append(n[j:j + k])
#     k += 1
# print(sp)

# ///////////////////////////////////////////////////////////
# 4.4 –ú–∞—Ç—Ä–∏—Ü—ã. –ß–∞—Å—Ç—å 1
##–º–∞—Ç—Ä–∏—Ü—É –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:
# [[input() for _ in range(m)] for _ in range(n)]


# matrix  = [[2, -5, -11, 0],
#            [-9, 4, 6, 13],
#            [4, 7, 12, -2]]
#
# print(matrix[1][2])  # –≤—ã–≤–æ–¥ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ (2, 3)  -->6

# –ü–µ—Ä–µ–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Ç—Ä–∏—Ü—ã

# –ø–µ—Ä–µ–±–∏—Ä–∞—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º:
# rows, cols = 3, 4           # rows - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫, cols - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
# matrix  = [[2, 3, 1, 0],
#            [9, 4, 6, 8],
#            [4, 7, 2, 7]]
# for r in range(rows):
#     for c in range(cols):
#         print(matrix[r][c], end=' ')
#     print()

# –ø–µ—Ä–µ–±–∏—Ä–∞—è –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º
# rows, cols = 3, 4           # rows - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫, cols - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
# matrix  = [[2, 3, 1, 0],
#            [9, 4, 6, 8],
#            [4, 7, 2, 7]]
# for c in range(cols):
#     for r in range(rows):
#         print(matrix[r][c], end=' ')
#     print()

# –§—É–Ω–∫—Ü–∏–∏ ljust() –∏ rjust()

# –°—Ç—Ä–æ–∫–æ–≤—ã–π –º–µ—Ç–æ–¥ ljust() –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ —à–∏—Ä–∏–Ω–µ, –¥–æ–±–∞–≤–ª—è—è –ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–∞.
# print('a'.ljust(3))
# print('ab'.ljust(3))
# print('abc'.ljust(3))

# –°—Ç—Ä–æ–∫–æ–≤—ã–π –º–µ—Ç–æ–¥ ljust() –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–º–µ—Å—Ç–æ –ø—Ä–æ–±–µ–ª–∞ –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–º—É –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç,
# –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π.
# print('a'.ljust(5, '*'))
# print('ab'.ljust(5, '$'))
# print('abc'.ljust(5, '#'))


# –°—Ç—Ä–æ–∫–æ–≤—ã–π –º–µ—Ç–æ–¥ rjust() –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ —à–∏—Ä–∏–Ω–µ, –¥–æ–±–∞–≤–ª—è—è –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞.
# print('a'.rjust(3))
# print('ab'.rjust(3))
# print('abc'.rjust(3))

# –°—Ç—Ä–æ–∫–æ–≤—ã–π –º–µ—Ç–æ–¥ rjust() –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–º–µ—Å—Ç–æ –ø—Ä–æ–±–µ–ª–∞ –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª,
# –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–º—É –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π.
# print('a'.rjust(5, '*'))
# print('ab'.rjust(5, '$'))
# print('abc'.rjust(5, '#'))


# –ü—Ä–∏–º–µ–Ω–∏–≤ –º–µ—Ç–æ–¥ ljust() –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ç–∞–±–ª–∏—Ü—ã –º—ã –ø–æ–ª—É—á–∏–º
# rows, cols = 3, 4                # rows - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫, cols - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
# matrix  = [[277, -930, 11, 0],
#            [9, 43, 6, 87],
#            [4456, 8, 290, 7]]
# for r in range(rows):
#     for c in range(cols):
#         print(str(matrix[r][c]).ljust(8), end='')
#     print()

# –≠–ª–µ–º–µ–Ω—Ç—ã —Å —Ä–∞–≤–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏ i == j –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏. –¢–∞–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–±–æ–∑–Ω–∞—á–∞—é—Ç—Å—è matrix[i][i].
# –≠–ª–µ–º–µ–Ω—Ç—ã —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ i –∏ j, —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º i + j + 1 = n (–∏–ª–∏ j = n - i - 1), –≥–¥–µ n ‚Äî —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –º–∞—Ç—Ä–∏—Ü—ã,
# –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ –ø–æ–±–æ—á–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏.

# n = 8
# matrix = [[0]*n for _ in range(n)]    # —Å–æ–∑–¥–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É —Ä–∞–∑–º–µ—Ä–æ–º 8√ó8
# for i in range(n):             # –∑–∞–ø–æ–ª–Ω—è–µ–º –≥–ª–∞–≤–Ω—É—é –¥–∏–∞–≥–æ–Ω–∞–ª—å –µ–¥–∏–Ω–∏—Ü–∞–º–∏, –∞ –ø–æ–±–æ—á–Ω—É—é –¥–≤–æ–π–∫–∞–º–∏
#     matrix[i][i] = 1
#     matrix[i][n-i-1] = 2
# for r in range(n):             # –≤—ã–≤–æ–¥–∏–º –º–∞—Ç—Ä–∏—Ü—É
#     for c in range(n):
#         print(matrix[r][c], end=' ')
#     print()

# –ò–Ω–¥–µ–∫—Å—ã i –∏ j —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏ —Å–≤—è–∑–∞–Ω—ã —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º i = j. –ò–Ω–¥–µ–∫—Å—ã i –∏ j—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞
# –ø–æ–±–æ—á–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º i + j + 1 = n (–∏–ª–∏  j = n - i - 1), –≥–¥–µ n ‚Äî —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –º–∞—Ç—Ä–∏—Ü—ã


## –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é print_matrix() –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ n:
# def print_matrix(matrix, n, width=1):
#     for r in range(n):
#         for c in range(n):
#             print(str(matrix[r][c]).ljust(width), end=' ')
#         print()
#
## –î–ª—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã –∏–∑ n —Å—Ç—Ä–æ–∫, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —á–∏—Å–ª–∞–º–∏, —É–¥–æ–±–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥:
# n = int(input())
# matrix = []
# for i in range(n):
#     temp = [int(num) for num in input().split()]
#     matrix.append(temp)


# n = 3
# a = [[1, 2, 3],             #->  9 8 7
#      [4, 5, 6],             #->  6 5 4
#      [7, 8, 9]]             #->  3 2 1
#
# for i in range(n):
#     for j in range(n):
#         print(a[n - i - 1][n - j - 1], end=' ')
#     print()


# —Å—á–∏—Ç–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏  –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π  –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–±–æ—á–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏
# n = 5
# a = [[19, 21, 33, 78, 99],
#      [41, 53, 66, 98, 76],
#      [79, 80, 90, 60, 20],
#      [33, 11, 45, 67, 90],
#      [45, 67, 12, 98, 23]]
#
# maximum = -1
# minimum = 100
#
# for i in range(n):
#     if a[i][i] > maximum:
#         maximum = a[i][i]
#     if a[i][n - i - 1] < minimum:
#         minimum = a[i][n - i - 1]
# print(minimum + maximum)   #-->101

# ----------------------------------
# —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã
# ----------------------------------

# N = int(input())
# M = int(input())
# matrix = [[0] * M for i in range(N)]
#
# # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
# for i in range(N):
#     for j in range(M):
#         matrix[i][j] = input()
#
# # –≤—ã–≤–µ—Å—Ç–∏ –º–∞—Ç—Ä–∏—Ü—É –Ω–∞ —ç–∫—Ä–∞–Ω –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
# for i in range(len(matrix)):  # len(A) - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –º–∞—Ç—Ä–∏—Ü–µ –ê
#     for j in range(len(matrix[i])):  # len(A[i]) - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ i
#         print(matrix[i][j], end=' ')
#     print()

# ----------------------------------
# ----------------------------------

# –í—ã–≤–µ—Å—Ç–∏ –º–∞—Ç—Ä–∏—Ü—É 1
# n, m = int(input()), int(input())
# matrix = [[0] * m for i in range(n)]
#
# # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã
# for i in range(n):
#     for j in range(m):
#         matrix[i][j] = input()
#
# # –≤—ã–≤–µ—Å—Ç–∏ –º–∞—Ç—Ä–∏—Ü—É –Ω–∞ —ç–∫—Ä–∞–Ω –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
# for i in range(len(matrix)):  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –º–∞—Ç—Ä–∏—Ü–µ
#     for j in range(len(matrix[i])):  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ i
#         print(matrix[i][j], end=' ')
#     print()

# # ------------------------------------
# n, m = int(input()), int(input())
# [print(*[input() for i in range(m)]) for i in range(n)]
# # -------------------------------------
# # -------------------------------------
# def input_matrix(rows, cols):
#     matrix = [[input() for _ in range(cols)] for _ in range(rows)]
#     return matrix
#
# def print_matrix(matrix):
#     for r in range(len(matrix)):
#         print(*matrix[r])
#     return None
#
# n, m = int(input()), int(input())
# print_matrix(input_matrix(n, m))
# # -------------------------------------
# # -------------------------------------
# –í—ã–≤–µ—Å—Ç–∏ –º–∞—Ç—Ä–∏—Ü—É 2
# rows, cols = int(input()), int(input())  # rows - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫, cols - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
# matrix = [[0] * cols for i in range(rows)]
#
# for i in range(rows):
#     for j in range(cols):
#         matrix[i][j] = input()
#
# for i in range(rows):
#     for j in range(cols):
#         print(matrix[i][j], end=' ')
#     print()
# print()
#
# for j in range(cols):
#     for i in range(rows):
#         print(matrix[i][j], end=' ')
#     print()
# -----------------------
# def print_matrix(matrix, rows, cols, width=1):
#     for i in range(rows):
#         for j in range(cols):
#             print(matrix[i][j].ljust(width), end=' ')
#         print()
#
#
# def print_transposed_matrix(matrix, rows, cols, width=1):
#     for j in range(cols):
#         for i in range(rows):
#             print(matrix[i][j].ljust(width), end=' ')
#         print()
#
#
# n, m = int(input()), int(input())
# matrix = [[input() for j in range(m)] for i in range(n)]
# print_matrix(matrix, n, m)
# print()
# print_transposed_matrix(matrix, n, m)

##–°–ª–µ–¥ –º–∞—Ç—Ä–∏—Ü—ã
# n = int(input())
# maximum = 0
# matrix = [list(map(int, input().split())) for __ in range(n)]
# for i in range(n):
#     maximum += matrix[i][i]
# print(maximum)


# res = 0
# for i in range(int(input())):
#     res += int(input().split()[i])
# print(res)

# –ë–æ–ª—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
# n = int(input())
# counter = 0
# matrix = [list(map(int, input().split())) for _ in range(n)]
# for i in matrix:
#     sr = (sum(list(map(int, i)))) / len(i)
#     for j in i:
#         if int(j) > sr:
#             counter += 1
#     print(counter)
#     counter = 0


# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤ –æ–±–ª–∞—Å—Ç–∏ 1
# n = int(input())
# maximum = []
# matrix = [list(map(int, input().split())) for __ in range(n)]
# for i in range(n):
#     for j in range(n):
#         if i >= j:
#             maximum.append(matrix[i][j])
# print(max(maximum))


# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤ –æ–±–ª–∞—Å—Ç–∏ 2 üå∂Ô∏è
# n = int(input())
# maximum = []
# matrix = [list(map(int, input().split())) for __ in range(n)]
# for i in range(n):
#     for j in range(n):
#         if (i >= j and i <= n - 1 -j) or (i <= j and i >= n - 1 -j) or (i == j) or (i + j + 1 == n):
#             maximum.append(matrix[i][j])
# print(max(maximum))

# –°—É–º–º—ã —á–µ—Ç–≤–µ—Ä—Ç–µ–π
# n = int(input())
# up = []
# left = []
# down = []
# right = []
# matrix = [list(map(int, input().split())) for __ in range(n)]
# for i in range(n):
#     for j in range(n):
#         if (i < j and i < n - 1 -j):
#             up.append(matrix[i][j])
#         elif (i > j and i < n - 1 -j):
#             left.append(matrix[i][j])
#         elif (i > j and i > n - 1 -j):
#             down.append(matrix[i][j])
#         elif (i < j and i > n - 1 -j):
#             right.append(matrix[i][j])
# print(f'–í–µ—Ä—Ö–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å: {sum(up)}')
# print(f'–ü—Ä–∞–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å: {sum(right)}')
# print(f'–ù–∏–∂–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å: {sum(down)}')
# print(f'–õ–µ–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å: {sum(left)}')


# –¢–∞–±–ª–∏—Ü–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è
# n, m = int(input()), int(input())
# for i in range(n):
#     mult = []
#     for j in range(m):
#         mult.append(str(i*j).ljust(3))
#     print(*mult)
#
# n, m = int(input()), int(input())
# mult = [[i * j for j in range(m)] for i in range(n)]
# for i in range(n):
#     for j in range(m):
#         print(str(mult[i][j]).ljust(3), end='')
#     print()


# –ú–∞–∫—Å–∏–º—É–º –≤ —Ç–∞–±–ª–∏—Ü–µ
# n, m = int(input()), int(input())
# row, col = 0, 0
# matrix = [[int(i) for i in input().split()] for _ in range(n)]
# for i in range(n):
#     for j in range(m):
#         if matrix[i][j] > matrix[row][col]:
#             row, col = i, j
# print(row, col)


# –û–±–º–µ–Ω —Å—Ç–æ–ª–±—Ü–æ–≤
# n, m = int(input()), int(input())
# matrix = [[int(i) for i in input().split()] for _ in range(n)]
# a, b = [int(i) for i in input().split()]
#
# for i in range(n):
#     matrix[i][a], matrix[i][b] = matrix[i][b], matrix[i][a]
# for i in matrix:
#     print(*i)

# –°–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
# n = int(input())
# flag = True
# matrix = [list(map(int, input().split())) for __ in range(n)]
# for i in range(n):
#     for j in range(n):
#         if matrix[i][j] != matrix[j][i]:
#             flag = False
#     if flag == False:
#         print('NO')
#         break
# else:
#     print('YES')


# –û–±–º–µ–Ω –¥–∏–∞–≥–æ–Ω–∞–ª–µ–π
# n = int(input())
# matrix = [[int(i) for i in input().split()] for _ in range(n)]
#
# for i in range(n):
#     matrix[i][i], matrix[n - i - 1][i] = matrix[n - i - 1][i], matrix[i][i]
#
# for row in matrix:
#     print(*row)

#
# # –ó–µ—Ä–∫–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
# n = int(input())
# matrix = [input().split() for _ in range(n)]
#
# for i in range(n // 2):
#     matrix[i], matrix[n - i - 1] = matrix[n - i - 1], matrix[i]
# for row in matrix:
#     print(*row)


# n = int(input())
# matrix = [[int(i) for i in input().split()] for _ in range(n)]
# matrix.reverse()
#
# for row in matrix:
#     print(*row)

# # –ü–æ–≤–æ—Ä–æ—Ç –º–∞—Ç—Ä–∏—Ü—ã
# n = int(input())
# matrix = [[int(i) for i in input().split()] for _ in range(n)]
#
# for j in range(n):
#     for i in range(n - 1, -1, -1):
#         print(matrix[i][j], end=' ')
#     print()


# –•–æ–¥—ã –∫–æ–Ω—è
# col, row = input().strip()
# coor_col = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7}
# coor_row = {'1': 7, '2': 6, '3': 5, '4': 4, '5': 3, '6': 2, '7': 1, '8': 0}
# arr = [["N" if [i, j] == [coor_row[row], coor_col[col]] else '.' for j in range(8)] for i in range(8)]
# for i in range(8):
#     for j in range(8):
#         if (coor_row[row] - i) * (coor_col[col] - j) in [-2, 2]: arr[i][j] = "*"
# for line in arr:
#     print(*line, sep = ' ')
#
# x, y = input()
# n = 8
# board = [['.'] * n for _ in range(n)]
# x = ord(x) - 97
# y = n - int(y)
# board[y][x] = 'N'
#
# for i in range(n):
#     for j in range(n):
#         if abs(y - i) * abs(x - j) == 2:
#             board[i][j] = '*'
#
# for row in board:
#     print(*row)


# –ú–∞–≥–∏—á–µ—Å–∫–∏–π –∫–≤–∞–¥—Ä–∞—Ç üå∂Ô∏è
# n = int(input())
# matrix = [[int(i) for i in input().split()] for j in range(n)]
#
# magic = sum(matrix[0])
# flag = 'YES'
# digits = [i for i in range(1, n ** 2 + 1)]
#
# for i in range(n):
#     for j in range(n):
#         if matrix[i][j] in digits:
#             digits.remove(matrix[i][j])
#     if i == n - 1 and j == n - 1 and digits != []:
#         flag = 'NO'
#
# for i in range(n):
#     if sum(matrix[i]) != magic:
#         flag = 'NO'
#         break
#
# for j in range(n):
#     result = 0
#     for i in range(n):
#         result += matrix[i][j]
#         if i == n - 1 and result != magic:
#             flag = 'NO'
#             break
#
# print(flag)

# –®–∞—Ö–º–∞—Ç–Ω–∞—è –¥–æ—Å–∫–∞
# x, y = [int(i) for i in input().split()]
# matrix = [['.'] * y for _ in range(x)]
#
# for i in range(x):
#     if i == 0 or i % 2 == 0:
#         for j in range(1, y, 2):
#             matrix[i][j] = '*'
#     else:
#         for j in range(0, y, 2):
#             matrix[i][j] = '*'
#
# for row in matrix:
#     print(*row)

# n, m = map(int, input().split())
# for i in range(n):
#     row = ['.' if (i + j) % 2 == 0 else '*' for j in range(m)]
#     print(*row)

# –ü–æ–±–æ—á–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å
# n = int(input())
# matrix = [[0] * n for _ in range(n)]
# for i in range(n):
#     matrix[i][n - 1 - i] = 1
#     for j in range(n):
#         if i > n - 1 - j:
#             matrix[i][j] = 2
#         print(matrix[i][j], end=" ")
#     print()

# def matrix(i, j, n):
#     if i == n - j - 1:
#         return 1
#     elif i < n - j - 1:
#         return 0
#     else:
#         return 2
# n = int(input())
# res = [[matrix(i, j, n) for j in range(n)] for i in range(n)]
# for x in res:
#     print(*x)


# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ 1
# n, m = map(int, input().split())
# matrix = []
# counter = 1
#
# for i in range(n):
#     matrix.append([])
#     for j in range(m):
#         matrix[i].append(counter)
#         counter += 1
#
#         print(f'{matrix[i][j]}'.ljust(3), end='')
#     print()

# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ 2
# n, m = [int(i) for i in input().split()]
# matrix = [[0] * m for _ in range(n)]
#
# for j in range(m):
#     for i in range(n):
#         matrix[i][j] = j * n + i + 1
#
# for i in range(n):
#     for j in range(m):
#         print(str(matrix[i][j]).ljust(3), end=' ')
#     print()


# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ 3
# n = int(input())
# matr = [[0] * n for _ in range(n)]
# for i in range(n):
#     matr[i][i] = 1
#     matr[i][n - 1 - i] = 1
# for i in range(n):
#     for j in range(n):
#         print(str(matr[i][j]).ljust(3), end='')
#     print()

# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ 4
# n = int(input())
# matrix = [[0] * n for _ in range(n)]
#
# for i in range(n):
#     for j in range(n):
#         if (i <= j and i + j + 1 <= n) or (i >= j and i + j + 1 >= n):
#             matrix[i][j] = 1
#
# for i in range(n):
#     for j in range(n):
#         print(str(matrix[i][j]).ljust(3), end=' ')
#     print()


# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ 5 üå∂Ô∏è
# n, m = [int(i) for i in input().split()]
# matrix = [[0] * m for _ in range(n)]
#
# for i in range(n):
#     for j in range(m):
#         matrix[i][j] = (i + j) % m + 1
#
# for i in range(n):
#     for j in range(m):
#         print(str(matrix[i][j]).ljust(3), end=' ')
#     print()


# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–º–µ–π–∫–æ–π
# s=input().split()
# n=int(s[0])
# m=int(s[1])
# matrix=[[0 for i in range(m)] for _ in range(n)]
# count =1
# for i in range(n):
#     for j in range(m):
#         matrix[i][j] += count
#         count+=1
# for i in range(n):
#     if i%2==0:
#         print(*matrix[i])
#     else:
#         matrix[i].reverse()
#         print(*matrix[i])


# n, m = [int(i) for i in input().split()]
# matrix = [[0] * m for _ in range(n)]
#
# for i in range(n):
#     for j in range(m):
#         matrix[i][j] = i * m + j + 1
#     if i % 2:
#         matrix[i].reverse()
#
# for i in range(n):
#     for j in range(m):
#         print(str(matrix[i][j]).ljust(3), end=' ')
#     print()

# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∏–∞–≥–æ–Ω–∞–ª—è–º–∏ üå∂Ô∏è
# n, m = [int(i) for i in input().split()]
# mtx = [[0] * m for _ in range(n)]
# sequence, k = 1, 0
#
# while sequence != n * m + 1:
#     for i in range(n):
#         for j in range(m):
#             if i + j == k:
#                 mtx[i][j] = sequence
#                 sequence += 1
#     k += 1
#
# for i in range(n):
#     for j in range(m):
#         print(str(mtx[i][j]).ljust(3), end='')
#     print()


# n, m = [int(i) for i in input().split()]
#
# matrix = [[1] * m for _ in range(n)]
# row, col, diag = 0, 0, 0
#
# for i in range(1, n * m):
#     col -= 1
#     row += 1
#     if col < 0 or row == n:
#         diag += 1
#         col = diag if diag < m else m - 1
#         row = diag - col
#
#     matrix[row][col] += i
#
# [print(*i) for i in matrix]

# # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Ç—Ä–∏—Ü—ã
# n, m = map(int, input().split())
# # –°–æ–∑–¥–∞–µ–º —Å–∫–µ–ª–µ—Ç –º–∞—Ç—Ä–∏—Ü—ã
# matrix = [[0] * m for i in range(n)]
# # –ó–∞–¥–∞–µ–º –æ—Ç—Å—á–µ—Ç —Å –µ–¥–∏–Ω–∏—Ü—ã
# d = 1
#
# for k in range(1, n + m):               # –¶–∏–∫–ª –ø–µ—Ä–µ–±–∏—Ä–∞—é—â–∏–π —Å—É–º–º—É –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
#     for i in range(n):                  # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏
#         for j in range(m):              # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã
#             if i + j + 1 == k:          # –í—ã—è–≤–ª—è–µ–º —è—á–µ–π–∫–∏, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –∏—Å–∫–æ–º–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏
#                 matrix[i][j] = d        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–π —è—á–µ–π–∫–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä
#                 d += 1                  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
#
# # –†–∞—Å–ø–µ—á–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É
# for row in range(n):
#     for col in range(m):
#         print(str(matrix[row][col]).ljust(3), end=' ')
#     print()


# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Ä–∞–ª—å—é üòàüòà
# n, m = map(int, input().split())
# l = [[0] * m for _ in range(n)]
# num = 1
# k = 0                                 # —É—Ä–æ–≤–µ–Ω—å –∫–≤–∞–¥—Ä–∞—Ç–∞: 0 - –≤–Ω–µ—à–Ω–∏–π, 1 - –≤–ª–æ–∂–µ–Ω–Ω—ã–π –∏ —Ç.–¥.
# product = n * m + 1                   # –≤—ã–Ω–µ—Å–µ–Ω–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —Ç.–∫. n –∏ m –º–µ–Ω—è—é—Ç—Å—è –≤ —Ü–∏–∫–ª–µ
#
# while num < product:
#     for j in range(k, m):             # –≤–µ—Ä—Ö–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞
#         l[k][j] = num
#         num += 1
#     for i in range(k + 1, n):         # –ø—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
#         l[i][j] = num
#         num += 1
#     if num == product:                # –∫–æ—Å—Ç—ã–ª—å –¥–ª—è —Å–ª—É—á–∞–µ–≤ —Å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ n, m
#         break
#     for j in range(m - 2, k - 1, -1): # –Ω–∏–∂–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞
#         l[i][j] = num
#         num += 1
#     for i in range(n - 2, k, -1):     # –ª–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
#         l[i][j] = num
#         num += 1
#     m -= 1                            # –∏–∑–º–µ–Ω—è—é —Ä–∞–∑–º–µ—Ä —Å—Ç–æ—Ä–æ–Ω –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞
#     n -= 1
#     k += 1
#
# for row in l:
#     for el in row:
#         print(str(el).ljust(3), end='')
#     print()


# 4.7 –û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –º–∞—Ç—Ä–∏—Ü–∞–º–∏ –≤ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ
# –°–ª–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü
# n, m = [int(i) for i in input().split()]
# matrix1 = [[int(i) for i in input().split()] for _ in range(n)]
# _ = input()
# matrix2 = [[int(i) for i in input().split()] for _ in range(n)]
# matrix3 = [[0] * m for _ in range(n)]
#
# for i in range(n):
#     for j in range(m):
#         matrix3[i][j] += matrix1[i][j] + matrix2[i][j]
#
# for row in matrix3:
#     print(*row)

# n, m = [int(x) for x in input().split()]
# A = [[int(x) for x in input().split()] for _ in range(n)]
# input()
# B = [[int(x) for x in input().split()] for _ in range(n)]
# C = [[A[i][j] + B[i][j] for j in range(m)] for i in range(n)]
# [print(*i) for i in C]

# –£–º–Ω–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü üå∂Ô∏è
# n, m = [int(x) for x in input().split()]
# matrix1 = [[int(x) for x in input().split()] for _ in range(n)]
# input()
# m, k = [int(x) for x in input().split()]
# matrix2 = [[int(x) for x in input().split()] for _ in range(m)]
# matrix3 = [[0] * k for i in range(n)]
# for i in range(n):
#     for j in range(k):
#         for q in range(m):
#             matrix3[i][j] += matrix1[i][q] * matrix2[q][j]
# [print(*i) for i in matrix3]


# –í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Ç—Ä–∏—Ü—ã
# n = int(input())
# a = [list(map(int, list(input().split()))) for _ in range(n)]
# m = int(input())
#
# def multi(a, b):
#     n = len(a)
#     b = list(zip(*b))
#     return [[sum([a[i][r] * b[j][r] for r in range(n)]) for j in range(n)] for i in range(n)]
#
# def expo(a, m):
#     c = list(a)
#     for _ in range(m-1):
#         c = multi(c, a)
#     return c
#
# result = expo(a, m)
#
# [print(*row) for row in result]

# –ö–∞–∂–¥—ã–π n-—ã–π —ç–ª–µ–º–µ–Ω—Ç
# s = input().split()
# n = int(input())
# res = []
# for i in range(n):
#     res.append(s[i::n])
# print(res)

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤ –æ–±–ª–∞—Å—Ç–∏ 2
# n = int(input())
# arr = []
# maximum = 0
# for i in range(n):
#     arr.append([int(elem) for elem in input().split()])
# for i in range(n):
#     for j in range(n):
#         if i >= n - 1 - j and arr[i][j] > maximum:
#             maximum = arr[i][j]
# print(maximum)

#  –±–µ—Ä–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã
# n = int(input())
# #  –≤—ã–ø–∏–ª–∏–≤–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# matrix = [[int(x) for x in input().split()] for i in range(n)]
# #  –≤—ã—á–∏—Å–ª—è–µ–º –±–æ–ª—å—à–∏–π (—ç–ª–µ–º–µ–Ω—Ç) –∏–∑ –±–æ–ª—å—à–∏—Ö (—ç–ª–µ–º–µ–Ω—Ç–æ–≤) –≤ –±–µ–≥—É—â–µ–º —Å—Ä–µ–∑–µ
# answer = max(max(matrix[i][n-i-1:]) for i in range(n))
# #  –∑–∞–∫–∏–¥—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
# print(answer)

# –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã
# import numpy as np
# n = int(input())
# arr = []
# for i in range(n):
#     arr.append([int(elem) for elem in input().split()])
# a_t = np.matrix(arr).transpose().tolist()
# for i in range(n):
#     print(*a_t[i])

# n = int(input())
# matrix = [input().split() for _ in range(n)]
#
# for i in range(n):
#     for j in range(i, n):
#         matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]
#
# for row in matrix:
#     print(*row)


# –°–Ω–µ–∂–∏–Ω–∫–∞
# n = int(input())
# arr = []
#
# for i in range(n):
#     arr.append([])
#     for j in range(n):
#         if i == n//2 or j == n//2 or i == j or i == n-j-1:
#             arr[i].append('*')
#         else:
#             arr[i].append('.')
#
# for i in range(n):
#     print(*arr[i])


# –°–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
# def is_symmetric(arr, n):
#     for i in range(n):
#         for j in range(n):
#             if arr[i][j] != arr[n-j-1][n-i-1]:
#                 return 'NO'
#     return 'YES'
#
# n = int(input())
# arr = []
#
# for i in range(n):
#     arr.append([int(elem) for elem in input().split()])
#
# print(is_symmetric(arr, n))

# n = int(input())
# arr = [list(map(int, input().split())) for _ in range(n)]
# res = 'YES'
# for i in range(n - 1):
#     for j in range(n - i - 1):
#         if arr[i][j] != arr[n - j - 1][n - i - 1]:
#             res = 'NO'
#             break
#     if res == 'NO':
#         break
# print(res)


# –õ–∞—Ç–∏–Ω—Å–∫–∏–π –∫–≤–∞–¥—Ä–∞—Ç üå∂Ô∏è
# import numpy as np
#
# def is_every_digit_in_arr(arr, n):
#     for i in range(1, n + 1):
#         if i not in arr:
#             return False
#     return True
#
# def is_latin_square(arr, n):
#     result = []
#     a_t = np.matrix(arr).transpose().tolist()
#     for i in range(n):
#         arr[i] = sorted(arr[i])
#         if (result != [] and result != arr[i]) or not is_every_digit_in_arr(arr[i], n):
#             return 'NO'
#         result = arr[i]
#     result = []
#     for i in range(n):
#         a_t[i] = sorted(a_t[i])
#         if (result != [] and result != a_t[i]) or not is_every_digit_in_arr(arr[i], n):
#             return 'NO'
#         result = a_t[i]
#
#     return 'YES'
#
# n = int(input())
# arr = []
#
# for i in range(n):
#     arr.append([int(elem) for elem in input().split()])
#
# print(is_latin_square(arr, n))

# n = int(input())
# matrix = [[int(i) for i in input().split()] for _ in range(n)]
# numbers = list(range(1, n + 1))
# result = 'YES'
#
# for i in range(n):
#     row_nums = sorted(matrix[i])
#     col_nums = sorted([matrix[j][i] for j in range(n)])
#     if row_nums != numbers or col_nums != numbers:
#         result = 'NO'
#         break
#
# print(result)

# # –•–æ–¥—ã —Ñ–µ—Ä–∑—è
# slovarx = {'a':0, 'b':1, 'c':2, 'd':3, 'e':4, 'f':5, 'g':6, 'h':7}
# slovary = {'8':0, '7':1, '6':2, '5':3, '4':4, '3':5, '2':6, '1':7, '0':8}
#
# position = input()
# arr = []
#
# for i in range(8):
#     arr.append([])
#     for j in range(8):
#         if j == slovarx[position[0]] and i == slovary[position[1]]:
#             arr[i].append('Q')
#         elif j == slovarx[position[0]] or i == slovary[position[1]]:
#             arr[i].append('*')
#         elif abs(slovarx[position[0]] - j) == abs(slovary[position[1]] - i):
#             arr[i].append('*')
#         else:
#             arr[i].append('.')
#
# for i in range(8):
#     print(*arr[i])
#
# # –î–∏–∞–≥–æ–Ω–∞–ª–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≥–ª–∞–≤–Ω–æ–π
# n = int(input())
# arr = []
#
# for i in range(n):
#     arr.append([])
#     for j in range(n):
#         arr[i].append(abs(i-j))
#
# for i in range(n):
#     print(*arr[i])

# //////////////////////////////  6.1 –í–≤–µ–¥–µ–Ω–∏–µ –≤ –∫–æ—Ä—Ç–µ–∂–∏   //////////////////////////////
# –ö–æ—Ä—Ç–µ–∂–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç:
# 
# –¥–æ—Å—Ç—É–ø –∫ —ç–ª–µ–º–µ–Ω—Ç—É –ø–æ –∏–Ω–¥–µ–∫—Å—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤);
# –º–µ—Ç–æ–¥—ã, –≤ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏ index(), count();
# –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –≤ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏ len(), sum(), min() –∏ max();
# —Å—Ä–µ–∑—ã;
# –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ in;
# –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏ (+) –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (*).

# 6 elementov
# primes = (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71)
# print(primes[:6])

# –∫—Ä–æ–º–µ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö.
# countries = ('Russia', 'Argentina', 'Slovakia', 'Canada', 'Slovenia', 'Italy', 'Spain', 'Ukraine', 'Chile', 'Cameroon')
# print(countries[2:])


# # –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–µ—Ö.
# countries = ('Russia', 'Argentina', 'Slovakia', 'Canada', 'Slovenia', 'Italy', 'Spain', 'Ukraine', 'Chile', 'Cameroon')
# print(countries[:-3])

# –∫—Ä–æ–º–µ –¥–≤—É—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏ —Ç—Ä–µ—Ö –ø–µ—Ä–≤—ã—Ö.
# countries = ('Russia', 'Argentina', 'Slovakia', 'Canada', 'Slovenia', 'Italy', 'Spain', 'Ukraine', 'Chile', 'Cameroon')
# print(countries[3:-2])

# # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ—Ä—Ç–µ–∂–∞
# countries = ('Romania', 'Poland', 'Estonia', 'Bulgaria', 'Slovakia', 'Slovenia', 'Hungary')
# number = len(countries)
# print(number)

# # —Å—É–º–º—É –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ—Ä—Ç–µ–∂–∞
# numbers = (12.5, 3.1415, 2.718, 9.8, 1.414, 1.1618, 1.324)
# print(min(numbers)+max(numbers))

# # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è index —Å–æ–¥–µ—Ä–∂–∞–ª–∞ –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ ¬´Slovenia¬ª
# countries = ('Russia', 'Argentina', 'Spain', 'Slovakia', 'Canada', 'Slovenia', 'Italy')
# index = countries.index('Slovenia')
# print(index)


# # number, —Å–æ–¥–µ—Ä–∂–∞–ª–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π ¬´Spain¬ª
# countries = ('Russia', 'Argentina', 'Spain', 'Slovakia', 'Canada', 'Slovenia', 'Italy', 'Spain', 'Ukraine', 'Chile', 'Spain', 'Cameroon')
# number = countries.count('Spain')
# print(number)


# # —á—Ç–æ–±—ã –æ–Ω –≤—ã–≤–µ–ª –∫–æ—Ä—Ç–µ–∂:  (1, 2, 3, 1, 2, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 8, 9, 10, 11, 12, 13)
# numbers1 = (1, 2, 3)
# numbers2 = (6,)
# numbers3 = (7, 8, 9, 10, 11, 12, 13)
#
# print(numbers1 * 2 + numbers2 * 9 + numbers3)
#
# city_name = input()
# city_year = int(input())
# city = (city_name, city_year)
# print(city)


# –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –∫–æ—Ä—Ç–µ–∂–∏
# tuples = [(), (), ('',), ('a', 'b'), (), ('a', 'b', 'c'), (1,), (), (), ('d',), ('', ''), ()]
# # non_empty_tuples = [tuples[2],tuples[3],tuples[5],tuples[6],tuples[9],tuples[10]]
# non_empty_tuples = [i for i in tuples if i]
# print(non_empty_tuples)

# # –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ —Ç–∞–∫, —á—Ç–æ–±—ã –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è new_tuples, —Å–æ–¥–µ—Ä–∂–∞–ª–∞ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ
# # —Å–ø–∏—Å–∫–∞ tuples —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –∫–∞–∂–¥–æ–≥–æ –∫–æ—Ä—Ç–µ–∂–∞, –∑–∞–º–µ–Ω–µ–Ω–Ω—ã–º –Ω–∞ —á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 100.
# tuples = [(10, 20, 40), (40, 50, 60), (70, 80, 90), (10, 90), (1, 2, 3, 4), (5, 6, 10, 2, 1, 77)]
# new_tuples = [i[:-1] + (100,) for i in tuples]
# print(new_tuples)


# # –≤—ã–≤–µ–ª —Å–ø–∏—Å–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å—Ä–µ–¥–Ω–∏–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–∏—Å–µ–ª –∫–∞–∂–¥–æ–≥–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∫–æ—Ä—Ç–µ–∂–∞
# numbers = ((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4), (90, 10))
# # tupl = []
# # for i in range(len(numbers)):
# #     tupl.append(sum(numbers[i])/len(numbers[i]))
# # print(tupl)
#
# print([sum(i) / len(i) for i in numbers])

# –í–µ—Ä—à–∏–Ω–∞ –ø–∞—Ä–∞–±–æ–ª—ã
# a, b, c = int(input()), int(input()), int(input()),
# print([(- (b / (2 * a))), (((4 * a * c) - b**2)/ (4 * a))])


# –ö–æ–Ω–∫—É—Ä—Å–Ω—ã–π –æ—Ç–±–æ—Ä
# n = int(input())
# sp = [input().split() for _ in range(n)]
# for i in sp:
#     print(*i)
# print()
# for i in sp:
#     if i[-1] == '5' or i[-1] == '4':
#         print(*i)
# --
# pup = [input() for _ in range(int(input()))]
# print(*pup, sep='\n')
# print()
# [print(x) for x in pup if int(x[-1]) > 3]

