# from math import sqrt
# a, b = int(input()), int(input())
# print(a + b)  # —Å—É–º–º—É —á–∏—Å–µ–ª a –∏ b;
# print(a - b)  # —Ä–∞–∑–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª a –∏ b;
# print(a * b)  # –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–µ–ª a –∏ b;
# print(a / b)  # —á–∞—Å—Ç–Ω–æ–µ —á–∏—Å–µ–ª a –∏ b;
# print(a // b)  # —Ü–µ–ª—É—é —á–∞—Å—Ç—å –æ—Ç –¥–µ–ª–µ–Ω–∏—è —á–∏—Å–ª–∞ a –Ω–∞ b;
# print(a % b)  # –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è —á–∏—Å–ª–∞ a –Ω–∞ b;
# print(sqrt(a**10 + b**10))  # –∫–æ—Ä–µ–Ω—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∏–∑ —Å—É–º–º—ã –∏—Ö 10-—Ö —Å—Ç–µ–ø–µ–Ω–µ–π: sqrt{a^{10} + b^{10}}

# –ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞
# def my_imt(m, r):
#     imt = m / (r * r)
#     if 18.5 <= imt <= 25:
#         return "–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –º–∞—Å—Å–∞"
#     elif imt < 18.5:
#         return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞"
#     elif imt > 25:
#         return "–ò–∑–±—ã—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞"
#
#
# m = float(input())
# r = float(input())
#
# print(my_imt(m, r))


# –°—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏
# def coast(text):
#     rub = len(text) * 0.6
#     kop = len(text) * 60 % 100
#     return f'{int(rub)} —Ä. {kop} –∫–æ–ø.'
#
# stroka = input()
# print(coast(stroka))


# string = input()
# price = 60 * len(string)
#
# print(f'{price // 100} —Ä. {price % 100} –∫–æ–ø.')


##–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
# print(len(list(input().split())))

# –ó–æ–¥–∏–∞–∫
# sp = ['–î—Ä–∞–∫–æ–Ω', '–ó–º–µ—è', '–õ–æ—à–∞–¥—å', '–û–≤—Ü–∞', '–û–±–µ–∑—å—è–Ω–∞', '–ü–µ—Ç—É—Ö', '–°–æ–±–∞–∫–∞', '–°–≤–∏–Ω—å—è', '–ö—Ä—ã—Å–∞', '–ë—ã–∫', '–¢–∏–≥—Ä', '–ó–∞—è—Ü',
#       '–î—Ä–∞–∫–æ–Ω']
# print(sp[(int(input())-8) % 12])
#
#
# # 8,9,10,11,0,1,2,3,4,5,6,7  - %
# #
# # 0,1,2,3,4,5,6,7,8,9,10,11

# –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç —á–∏—Å–ª–∞
# a = input()
# if len(a) == 5:
#       print(int(a[::-1]))
# elif len(a) == 6:
#       print(int(a[0]+a[-1:0:-1]))


# Standard American Convention
# print(f"{int(input()):,}")


# –ó–∞–¥–∞—á–∞ –ò–æ—Å–∏—Ñ–∞ –§–ª–∞–≤–∏—è üå∂Ô∏èüå∂Ô∏è
# n, k = int(input()), int(input())
# counter = 0
# for i in range(1, n + 1):
#     counter = (counter + k) % i
# print(counter + 1)


# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã–µ —á–µ—Ç–≤–µ—Ä—Ç–∏
# n = int(input())
# counter1 = counter2 = counter3 = counter4 = 0
# for i in range(n):
#     x, y = map(int, input().split())
#     if x > 0 and y > 0:
#         counter1 += 1
#     elif x < 0 and y > 0:
#         counter2 += 1
#     elif x < 0 and y < 0:
#         counter3 += 1
#     elif x > 0 and y < 0:
#         counter4 += 1
# print(f'–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å: {counter1}')
# print(f'–í—Ç–æ—Ä–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å: {counter2}')
# print(f'–¢—Ä–µ—Ç—å—è —á–µ—Ç–≤–µ—Ä—Ç—å: {counter3}')
# print(f'–ß–µ—Ç–≤–µ—Ä—Ç–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å: {counter4}')

# –ë–æ–ª—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
# s = list(map(int, input().split()))
# counter = 0
# for i in range(len(s)-1):
#     if s[i+1] > s[i]:
#         counter += 1
# print(counter)


# –ù–∞–∑–∞–¥, –≤–ø–µ—Ä—ë–¥ –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
# s = input().split()
# for i in range(0, len(s)-1, 2):
#     s[i], s[i+1] = s[i+1], s[i]
# print(*s, end=' ')

# –°–¥–≤–∏–≥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏
# s = input().split()
# s.insert(0, s[-1])
# del s[-1]
# print(*s)

# –†–∞–∑–ª–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
# s = input().split()
# s1 = []
# for i in s:
#     if i not in s1:
#         s1.append(i)
# print(len(s1))

# –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–µ–ª
# l = [int(input()) for n in range(int(input()))]
# n = int(input())
# fl = False
#
# for i in range(len(l)):
#     for j in range(i + 1, len(l)):
#         if l[i] * l[j] == n:
#             fl = True
#             break
#
# print('–î–ê' if fl == True else '–ù–ï–¢')

# –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞
# t, r = input(), input()
# if t == r:
#     print('–Ω–∏—á—å—è')
# elif t == '–∫–∞–º–µ–Ω—å' and r == '–Ω–æ–∂–Ω–∏—Ü—ã' or t == '–Ω–æ–∂–Ω–∏—Ü—ã' and r == '–±—É–º–∞–≥–∞' or t == '–±—É–º–∞–≥–∞' and r == '–∫–∞–º–µ–Ω—å':
#     print('–¢–∏–º—É—Ä')
# else:
#     print('–†—É—Å–ª–∞–Ω')


# –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞, —è—â–µ—Ä–∏—Ü–∞, –°–ø–æ–∫ üå∂Ô∏è
# timur = input()
# ruslan = input()
# result = {'–∫–∞–º–µ–Ω—å': ['–Ω–æ–∂–Ω–∏—Ü—ã', '—è—â–µ—Ä–∏—Ü–∞'],
#           '–Ω–æ–∂–Ω–∏—Ü—ã': ['–±—É–º–∞–≥–∞', '—è—â–µ—Ä–∏—Ü–∞'],
#           '–±—É–º–∞–≥–∞': ['–∫–∞–º–µ–Ω—å', '–°–ø–æ–∫'],
#           '–°–ø–æ–∫': ['–Ω–æ–∂–Ω–∏—Ü—ã', '–∫–∞–º–µ–Ω—å'],
#           '—è—â–µ—Ä–∏—Ü–∞': ['–±—É–º–∞–≥–∞', '–°–ø–æ–∫']}
# if timur == ruslan:
#     print('–Ω–∏—á—å—è')
# else:
#     if ruslan in result[timur]:
#         print('–¢–∏–º—É—Ä')
#     else:
#         print('–†—É—Å–ª–∞–Ω')

# –û—Ä–µ–ª –∏ —Ä–µ—à–∫–∞
# stroka = input().split('–û')
# res = max(stroka, key=len)
# print(len(res))

# –ö—Ä–µ–º–Ω–∏–µ–≤–∞—è –¥–æ–ª–∏–Ω–∞ üå∂Ô∏èüå∂Ô∏è
# for i in range(int(input())):
#     s, virus, x  = input(), 'anton', 0
#     for sym in s:
#         if sym == virus[x]:
#             x += 1
#         if x == 5:
#             print(i + 1, end=' ')
#             break


# –†–æ—Å–∫–æ–º–Ω–∞–¥–∑–æ—Ä –∑–∞–ø—Ä–µ—Ç–∏–ª –±—É–∫–≤—É –∞ üå∂Ô∏èüå∂Ô∏è
# word = input() + ' –∑–∞–ø—Ä–µ—Ç–∏–ª –±—É–∫–≤—É'
# alpha = [chr(i) for i in range(1072, 1104)]
#
# for letter in alpha:
#     if letter in word:
#         print(word, letter)
#         word = word.replace(letter, '').replace('  ', ' ').strip()

# –ü—Ä–µ–¥–∏–∫–∞—Ç –¥–µ–ª–∏–º–æ—Å—Ç–∏
# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def func(num1, num2):
#     if num1 % num2 == 0:
#         return True
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# num1, num2 = int(input()), int(input())
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# if func(num1, num2):
#     print('–¥–µ–ª–∏—Ç—Å—è')
# else:
#     print('–Ω–µ –¥–µ–ª–∏—Ç—Å—è')

'''
–º–µ—Ç–æ–¥ append() –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞.
–º–µ—Ç–æ–¥ extend() —Ä–∞—Å—à–∏—Ä—è–µ—Ç –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫ –¥—Ä—É–≥–∏–º —Å–ø–∏—Å–∫–æ–º.
–º–µ—Ç–æ–¥ insert() –≤—Å—Ç–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –≤ –∑–∞–¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏.
–º–µ—Ç–æ–¥ index() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–∞–≤–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É –≤ –º–µ—Ç–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—é.
–º–µ—Ç–æ–¥ remove() —É–¥–∞–ª—è–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–∞–≤–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É –≤ –º–µ—Ç–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—é.
–º–µ—Ç–æ–¥ pop() —É–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ.
–º–µ—Ç–æ–¥ count() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ, –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–≤–Ω—ã –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É –≤ –º–µ—Ç–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—é.
–º–µ—Ç–æ–¥ reverse() –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ, —Ç–æ –µ—Å—Ç—å –º–µ–Ω—è–µ—Ç –µ–≥–æ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π.
–º–µ—Ç–æ–¥ copy() —Å–æ–∑–¥–∞–µ—Ç –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—É—é –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞.
–º–µ—Ç–æ–¥ clear() —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞.
–æ–ø–µ—Ä–∞—Ç–æ—Ä del –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–∞–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ú–µ—Ç–æ–¥—ã —Å—Ç—Ä–æ–∫, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏:
–º–µ—Ç–æ–¥ split() —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–ª–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤,
—Å–∏–º–≤–æ–ª —Ç–∞–±—É–ª—è—Ü–∏–∏ (\t) –∏–ª–∏ —Å–∏–º–≤–æ–ª –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (\n).
–º–µ—Ç–æ–¥ join() —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è —Å—Ç—Ä–æ–∫—É,
–∫ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –º–µ—Ç–æ–¥.
'''

# list1 = [10, 20, [300, 400, [5000, 6000], 500], 30, 40]
# list1[2][2].append(7000)
# # print(list1)  #-> [10, 20, [300, 400, [5000, 6000, 7000], 500], 30, 40]

# list1 = ['a', 'b', ['c', ['d', 'e', ['f', 'g'], 'k'], 'l'], 'm', 'n']
# sub_list = ['h', 'i', 'j']
# list1[2][1][2].extend(sub_list)
# print(list1)   #->['a', 'b', ['c', ['d', 'e', ['f', 'g', 'h', 'i', 'j'], 'k'], 'l'], 'm', 'n']


# list1 = [[1, 7, 8], [9, 7, 102], [6, 106, 105], [100, 99, 98, 103], [1, 2, 3]]
# maximum = -1
# for i in list1:
#     if max(i) > maximum:
#         maximum = max(i)
# print(maximum)


# list1 = [[1, 7, 8], [9, 7, 102], [102, 106, 105], [100, 99, 98, 103], [1, 2, 3]]
# for i in list1:
#     i.reverse()
#
# print(list1)  #->[[8, 7, 1], [102, 7, 9], [105, 106, 102], [103, 98, 99, 100], [3, 2, 1]]

# list1 = [[1, 7, 8], [9, 7, 102], [102, 106, 105], [100, 99, 98, 103], [1, 2, 3]]
# total = 0
# counter = 0
# for i in list1:
#     total += sum(i)
#     counter += len(i)
#
#
# print(total)
# print(counter)
# print(total/counter)


# n, m = int(input()), int(input())    # —Å—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è n –∏ m
# my_list = [[0] * m for _ in range(n)]
# print(my_list)

# –°—á–∏—Ç—ã–≤–∞–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
# n = 4                                          # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ (—ç–ª–µ–º–µ–Ω—Ç–æ–≤)
# my_list = []
#
# for _ in range(n):
#     elem = [int(i) for i in input().split()]   # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–æ–∫–∏
#     my_list.append(elem)

# –ü–µ—Ä–µ–±–æ—Ä –∏ –≤—ã–≤–æ–¥ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
# my_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
# for i in range(len(my_list)):
#     for j in range(len(my_list[i])):
#         print(my_list[i][j], end=' ')   # –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä end
#     print()                             # –ø–µ—Ä–µ–Ω–æ—Å –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É


# my_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
# for row in my_list:
#     for elem in row:
#         print(elem, end=' ')
#     print()

# my_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
# for i in range(len(my_list)):
#     for j in range(len(my_list[i])):
#         print(my_list[j][i], end=' ')    # –≤—ã–≤–æ–¥–∏–º my_list[j][i] –≤–º–µ—Å—Ç–æ my_list[i][j]
#     print()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
# –ø–æ –∏–Ω–¥–µ–∫—Å—É
# my_list = [[1, 9, 8, 7, 4], [7, 3, 4], [2, 1]]
# total = 0
# for i in range(len(my_list)):
#     for j in range(len(my_list[i])):
#         total += my_list[i][j]
# print(total)

# –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º
# my_list = [[1, 9, 8, 7, 4], [7, 3, 4], [2, 1]]
# total = 0
# for row in my_list:
#     for elem in row:
#         total += elem
# print(total)


# n = 3
# list1 = []
# for _ in range(n):
#     row = input().split()
#     list1.extend(row)
# print(list1)   #-> ['9', '7', '6', '2', '1', '3', '4', '45', '67']


# my_list = [[12, 221, 3], [41, 5, 633], [71, 8, 99]]
#
# maximum = my_list[0][0]
# minimum = my_list[0][0]
#
# for row in my_list:
#     if max(row) > maximum:
#         maximum = max(row)
#     if min(row) < minimum:
#         minimum = min(row)
#
# print(maximum + minimum)


# –°–ø–∏—Å–æ–∫ –ø–æ –æ–±—Ä–∞–∑—Ü—É 1
# n = int(input())
# matrix = [[i for i in range(1, n + 1)] for j in range(1, n + 1)]
# print(*matrix, sep='\n')

# n = int(input())
# matrix = []
# for i in range(1, n + 1):
#    matrix.append(i)
# for j in range(1, n + 1):
#    print(matrix)

# –°–ø–∏—Å–æ–∫ –ø–æ –æ–±—Ä–∞–∑—Ü—É 2
# n = int(input())
# matrix = [[j for j in range(1, i + 1)] for i in range(1, n + 1)]
# print(*matrix, sep='\n')

# n = int(input())
# matrix = []
# for i in range(1, n + 1):
#     matrix.append(i)
#     print(matrix)

# –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –ü–∞—Å–∫–∞–ª—è 1 üå∂Ô∏è
# n = int(input())
#
# li = [1]
# for i in range(n):
#     for j in range(len(li) - 1):
#         li[j] = li[j] + li[j + 1]
#     li.insert(0, 1)
#
# print(li)
#
# from math import factorial
# n = int(input())
# b = []
# for i in range(n+1):
#     b.append (int((factorial(n))/(factorial(i)*factorial(n-i))))
# print(b)


# a = [1]
# for i in range(int(input())):
#     a = [x + y for x, y in zip([*a, 0], [0, *a])]
# print(a)

# –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –ü–∞—Å–∫–∞–ª—è 2
# n = int(input())
# P=[]
# for i in range(0,n):
#     row=[1]*(i+1)
#     for j in range(i+1):
#         if j!=0 and j!=i:
#             row[j]=P[i-1][j-1]+P[i-1][j]
#     P.append(row)
#
# for r in P:
#     print(*r)

# # -------------------–§–£–ù–ö–¶–ò–Ø-------------------
# def pascal(n):
#     triangle = [[1]]
#
#     for i in range(n - 1):
#         row = [1]
#         for j in range(1, len(triangle[i])):
#             row += [sum(triangle[i][j - 1: j + 1])]
#         row += [1]
#         triangle.append(row.copy())
#
#     return triangle
#
#
# # --------------------–í–´–ó–û–í--------------------
# [print(*row) for row in pascal(int(input()))]


# –£–ø–∞–∫–æ–≤–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ üå∂Ô∏è
# res = []
# for el in input().split():
#     if res and el in res[-1]:
#         res[-1].append(el)
#     else:
#         res.append([el])
# print(res)
#
# #–†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏ üå∂Ô∏è
# def chunked(st, n):
#     st = st.split()
#     a = [[] for _ in range(0, len(st), n)]
#     for i in range(len(a)):
#         a[i].extend(st[:n])
#         st = st[n:]
#     return a
#
# string = input()
# num = int(input())
#
# print(chunked(string, num))

# –ü–æ–¥—Å–ø–∏—Å–∫–∏ —Å–ø–∏—Å–∫–∞ üå∂Ô∏èüå∂Ô∏è
# n = input().split()
# sp = [[]]
# k = 1
# while k != len(n) + 1:
#     for j in range(len(n)):
#         if len(n[j:j + k]) == k:
#             sp.append(n[j:j + k])
#     k += 1
# print(sp)


# 4.4 –ú–∞—Ç—Ä–∏—Ü—ã. –ß–∞—Å—Ç—å 1